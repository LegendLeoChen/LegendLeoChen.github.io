<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建</title>
    <url>/2023/03/02/Hexo%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><blockquote>
<ul>
<li>官网下载git，确定好安装位置，无脑下一步即可。</li>
<li>完成后右键菜单将出现 <em>Git GUI</em> 和 <em>Git Bash</em> 两个新选项</li>
</ul>
</blockquote>
<span id="more"></span>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><blockquote>
<ul>
<li>官网下载 Node.js ，步骤同上。</li>
<li>完成后 cmd 输入</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    node -v
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>　没报错就说明成功</p>
</blockquote>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote>
<ul>
<li>本地新建一个文件夹（取名以 hexo 为例）进入后右键打开 <em>Git Bash</em></li>
<li>进入 Hexo 官网 <em><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></em></li>
<li>复制第一行指令，到 Bash 回车等待</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>　没有出现报错后会生成 <em>blog</em> 文件夹，输入 </p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">cd</span> blog 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li>然后输入第四行的命令</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">npm</span> <span class="token function">install</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li>然后输入第五行命令</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    hexo server
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li>该命令未来可以化简为 <code>hexo s</code> 使用，用于运行 hexo 服务器</li>
</ul>
</blockquote>
<blockquote>
<p>　随后出现一行  </p>
</blockquote>
<pre><code>Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.
</code></pre>
<blockquote>
<ul>
<li>用浏览器进入其中的地址即可进入博客页面，该页面他人无法访问</li>
</ul>
</blockquote>
<h1 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h1><blockquote>
<ul>
<li>在 <em>blog</em> 文件夹内进入<em>Git Bash</em> ，键入</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    hexo new <span class="token string">"文章标题"</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li><p>即可创建新文章于 <em>_source&#x2F;_posts</em> 文件夹中，文件格式为md（markdown）格式</p>
</li>
<li><p>关于文章md格式编写方法可参考官方文档（官网上有入口）的 <em>写作、Front-matter、标签插件、资源文件夹</em> 等部分内容，比较简单</p>
</li>
<li><p>编辑完成文章，保存文件后再 <em>Git Bash</em> 依次输入</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    hexo g
    hexo s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<ul>
<li>以生成网页并运行，刷新网页即可发现文章已经在网页当中</li>
</ul>
</blockquote>
<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><blockquote>
<ul>
<li><p>官网底部和顶部有主题入口，可选择各式各样的主题，这里以 <em>ayer</em> 主题为例</p>
</li>
<li><p>点击主题名字可跳转至其 GitHub 页面，下面通常有作者写的使用介绍和配置方法</p>
</li>
<li><p>按照要求安装后，在 <em>blog</em> 目录下打开 <em>_config.yml</em> （建议备份），将 <em>theme</em>后面的主题更换为 ayer</p>
</li>
<li><p>再通过 <code>hexo g</code> 和 <code>hexo s</code> 更新网页主题就应用成功，在此之前应先停止服务器</p>
</li>
</ul>
</blockquote>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><blockquote>
<ul>
<li><p>也是根据作者给的配置说明进行配置，文件在 <em>theme</em> 文件夹下的 <em>_config.yml</em> 中（不要与之前的那个混淆，也建议备份）</p>
</li>
<li><p>更改配置后保存后，进入 <em>blog</em> 文件夹的 <em>_config.yml</em> 中按需求配置 <em>title、subtitle</em> 等多个配置项目，即可更改网站标题，描述，作者名字等</p>
</li>
<li><p>最后再次更新网页即可看到主题变化</p>
</li>
</ul>
</blockquote>
<h1 id="通过Gitee联网"><a href="#通过Gitee联网" class="headerlink" title="通过Gitee联网"></a>通过Gitee联网</h1><h2 id="注册Gitee"><a href="#注册Gitee" class="headerlink" title="注册Gitee"></a>注册Gitee</h2><blockquote>
<ul>
<li><p>注册账号并登录 Gitee ，右上角个人界面内完成实名认证，这是使用联网功能的必要条件。记住个人空间的地址 <a href="https://gitee.com/xxx">https://gitee.com/xxx</a> 的 xxx 部分</p>
</li>
<li><p>在右上角 + 号处点击新建仓库，设置好名称和路径即可创建。</p>
</li>
</ul>
</blockquote>
<h2 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h2><blockquote>
<ul>
<li><p>创建好后，会有一个教程界面，复制 Git全局设置 的两行代码到 Bash 运行</p>
</li>
<li><p>将以下命令的 邮箱地址 换为自己的邮箱</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    ssh-keygen -t rsa -C <span class="token string">"邮箱地址"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li><p>运行需三次回车，一直确认即可</p>
</li>
<li><p>输入以下代码获取密钥</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">cat</span> ~/.ssh/id_rsa.pub
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li><p>复制显示出来的密钥，打开仓库在右上角设置，点击 SSH公钥 将刚才的密钥复制、命名并添加</p>
</li>
<li><p>在 Bash 中输入</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">ssh</span> -T git@gitee.com
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li><p>返回 <em>successfully</em> 即配置成功</p>
</li>
<li><p>打开根目录（blog）打开配置文件（_config.yml）到底部， <em>type</em> 设置为 <em>‘git’</em></p>
</li>
<li><p>下一行输入 <em>repository:</em> （冒号后有一个空格）</p>
</li>
<li><p>然后进入仓库界面代码栏，点击 <em>SSH</em> 复制后面的地址添加到*repository: *后，保存退出</p>
</li>
<li><p>根目录运行以下命令将博客部署到 gitee</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li><p>运行 <code>hexo g</code> 然后运行 <code>hexo d</code> 可以将博客更新到 gitee 中，点击仓库的管理将仓库开源，勾选开源选项，打勾3项须知</p>
</li>
<li><p>之后点击服务一栏的 <em>Gitee Pages</em> 服务，勾选下面的 <em>强制使用HTTPS</em> 点击 更新 即可启动</p>
</li>
<li><p>接着会显示正在部署网站，完成后会给你网站地址，点击即可访问</p>
</li>
</ul>
</blockquote>
<h1 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h1><blockquote>
<ul>
<li><p>每次写完博客在 Bash 运行 <code>hexo g</code> 和 <code>hexo s</code> 后在本地地址先查看是否满意，再运行 <code>hexo d</code> 部署</p>
</li>
<li><p>然后在 gitee 的 Pages 服务点击 更新 即可</p>
</li>
<li><p>若网页未发生变化就运行</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">    hexo clean
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<ul>
<li>清理缓存后再部署</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>主流大模型技术笔记</title>
    <url>/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本文作为笔记，通过阅读论文，记录市面上主流的大模型的技术内容。</p>
<h1 id="🔥基础预备"><a href="#🔥基础预备" class="headerlink" title="🔥基础预备"></a>🔥基础预备</h1><h2 id="🚢注意力机制"><a href="#🚢注意力机制" class="headerlink" title="🚢注意力机制"></a>🚢注意力机制</h2><span id="more"></span>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6.jpg" alt="注意力机制计算"></p>
<ul>
<li>QKV都是输入的矩阵，可以理解为推理时，拿着Q去查找每个词的K，根据QK相似度的不同从而得到一个权重矩阵，再取K对应的V进行矩阵乘法计算。</li>
<li>多头注意力（MHA）本质上就像CNN里面的多通道，学习不同方面的特征，有多组的QKV经过各自结构一致的网络共同整合得到整个模块的输出。<br><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%90%84%E7%A7%8D%E5%A4%9A%E5%A4%B4%E6%B3%A8%E6%84%8F%E5%8A%9B.jpg" alt="各种多头注意力"></li>
<li>多查询注意力机制（MQA）是MHA的变体，所有注意力头直接共享同一组KV，相当于减少了参数。</li>
<li>组查询注意力（GQA）将MHA和MQA进行折中，也就是若干个头一组共享KV。</li>
</ul>
<h2 id="🚢KV-Cache"><a href="#🚢KV-Cache" class="headerlink" title="🚢KV Cache"></a>🚢KV Cache</h2><p>KV Cache是一种优化技术，用于提升模型推理效率，<strong>通过缓存K、V减少重复计算</strong>，从而加速解码器的矩阵运算。DeepSeek里面的MLA等MHA变体都是基于该技术进行改进的。</p>
<ul>
<li>KV Cache仅用于推理阶段，该阶段KV保持不变，因此可以缓存；</li>
<li>KV Cache只存在于解码器，因为解码器生成时需要多次运算矩阵；</li>
<li>KV Cache因为缓存了KV，会加速Q@K@V的矩阵乘法运算，提高推理速度；</li>
<li>KV Cache的缺点是会增加内存占用。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E4%B8%8D%E4%BD%BF%E7%94%A8KV_Cache.jpg" alt="不使用KV Cache的注意力"></p>
<ul>
<li>如上图，每次自回归时，之前的QKV三者本身的生成、Q与所有K相乘的结果、QKV计算的结果都是要重复计算的，因此会增加推理时间。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/KV_Cache.jpg" alt="KV Cache"></p>
<ul>
<li><p>如上图每次自回归时，QK相乘得到结果与V矩阵相乘，紫色部分是过去的K、V，它们本来会被新的K、V所覆盖，但是每一步计算都要用到，需要重新生成，把它们缓存下来就能得到很明显的性能提升。</p>
</li>
<li><p><strong>为什么没有Q Cache</strong>，如上图，因为Q每次都是新生成的那个token的Q与所有的K进行相乘，根本用不到之前的Q，也就不用缓存了。</p>
</li>
<li><p>QK相乘结果也不缓存，因为过去的QK和Q一样也是不需要用于生成新的token的。</p>
</li>
</ul>
<blockquote>
<p>由于内存限制，LLM的回复能力确实会随着问答的进行逐渐变差，这种现象可以理解为模型具备一定的“遗忘性”。具体而言，由于硬件资源的限制，KV Cache的大小是有限的。当缓存达到其容量上限时，旧的信息可能会被新的信息覆盖或丢弃。其表现为随着问答的进行，早期的对话内容可能会因为KV Cache的容量限制而被移除或覆盖，导致模型逐渐“遗忘”之前的上下文。由于模型无法访问完整的对话历史，其生成的回复可能会变得不够准确或连贯，尤其是在需要依赖早期信息的情况下。所以，在长对话或多轮问答中，模型的性能可能会显着下降，因为它无法有效地利用整个对话历史。</p>
</blockquote>
<h2 id="🚢精度"><a href="#🚢精度" class="headerlink" title="🚢精度"></a>🚢精度</h2><h3 id="FP32-x2F-FP16-x2F-BF16"><a href="#FP32-x2F-FP16-x2F-BF16" class="headerlink" title="FP32&#x2F;FP16&#x2F;BF16"></a>FP32&#x2F;FP16&#x2F;BF16</h3><p>fp32、fp16、bf16分别指单精度浮点数（float32）、Intel提出的半精度浮点数（float16）、nvidia提出的半精度浮点数（bfloat16）。名字当中的数字就对应了该种浮点数表示方法所占的bit数，那么fp16和bp16的存储空间天然就是fp32的一半。</p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E7%B2%BE%E5%BA%A6%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="精度示意图"></p>
<ul>
<li>以fp16为例，它占有16bit（2字节），其中5bit用来表示指数位（表示2的幂次），10bit用来表示小数位（也叫尾数位，表示浮点数的有效数字部分），还有一个符号位。5个指数位本来可以表示00000-11111，但是全0和全1有特殊含义，换算成10进制也就是1至30，减去偏置15、能表示的正负区间为-14至15，尾数位可以表示1.0000000000至1.1111111111（此时尾数位前的隐藏项为1），换算成10进制也就是[1, 2)。</li>
<li>指数位全0表示<strong>非规格数</strong>，也就是+0、-0, 以及非常靠近0的数, 比如1E-38。</li>
<li>指数全1表示<strong>特殊数</strong>，有Inf和NaN两种情况。小数位全0表示无穷大inf，根据符号位不同可以分为+inf和-inf。小数位不全为0，表示NaN。</li>
<li>规格数和非规格数拼接起来才是一个完整的取值范围。</li>
<li>所以fp16最大是 二进制 ±1.1111111111×2^11110 &#x3D;&gt; 十进制±(1+1023&#x2F;1024)×2^15 &#x3D; ±65504；最小是1&#x2F;2024×2^(-14) &#x3D; 5.96E−8。也就是fp16的动态范围为（5.96E−8 ~ 65504）</li>
<li>fp32（8指数+23尾数+1符号）的动态范围为(1.4E-45 ~ 3.40E38)，bf16相当于尾数位为7的fp32，动态范围是（9.2E−41~3.38E38），也就是<strong>牺牲精度换来高取值范围</strong>。</li>
</ul>
<h3 id="混合精度"><a href="#混合精度" class="headerlink" title="混合精度"></a>混合精度</h3><p>混合精度就是通过一些设计，使得我们可以享受半精度的优点，又可以一定程度规避数据溢出和舍入误差（超小值被忽略导致误差）。</p>
<ul>
<li>我们使用 fp32 权重作为精确的 “主权重 (master weight)”进行备份，而其他所有值（weights，activations， gradients）均使用 fp16 进行计算以提高训练速度，最后在梯度更新阶段再使用半精度的梯度更新单精度的主权重，这样当很小的梯度乘上学习率后要跟权重（fp32的）做运算时，就不会被舍弃了。</li>
<li>由于 fp16 混合精度大大减少了内存需求, 并可以实现更快的速度, 因此只有在在此训练模式下表现不佳时, 才考虑不使用混合精度训练。</li>
</ul>
<h2 id="🚢新的激活函数"><a href="#🚢新的激活函数" class="headerlink" title="🚢新的激活函数"></a>🚢新的激活函数</h2><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%96%B0%E7%9A%84%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.jpg" alt="新的激活函数"><br>下列公式中 σ 即 sigmoid 函数，σ(x) &#x3D; 1 &#x2F; (1 + exp(-x)) 。</p>
<ol>
<li>GLU：GLU(x) &#x3D; (xW + b) ⊗ σ(xV + c)；</li>
<li>Swish：Swish(x) &#x3D; x · σ(x)；</li>
<li>SwiGLU：SwiGLU(x, W, V, b, c) &#x3D; Swish_1(xW + b) ⊗ (xV + c) ，其中Swish_β(x) &#x3D; x σ(β x)，⊗是哈达玛积（对位元素乘）；<blockquote>
<p>SwiGLU函数可以提升性能，有可微性、自适应性（因为GLU是一种类似于长短期记忆网络（LSTM）带有门机制的网络结构，通过门机制控制信息通过的比例，来让模型自适应地选择哪些单词和特征对预测下一个词有帮助）。</p>
</blockquote>
</li>
<li>GELU：GELU(x) &#x3D; x · P(X⩽x) &#x3D; x · Φ(x)，其中Φ(x)表示正态分布的累积分布函数。</li>
</ol>
<h1 id="🔥Llama3"><a href="#🔥Llama3" class="headerlink" title="🔥Llama3"></a>🔥Llama3</h1><p>论文：<a href="https://ai.meta.com/research/publications/the-llama-3-herd-of-models/">The Llama 3 Herd of Models</a><br>llama3相较于以往，数据量提升了，模型规模也提升了，算法架构并没有很复杂，使用的是标准的稠密的transformer模型，模型性能的提升主要得益于数据集的质量和多样性。</p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/llama3%E8%A1%A8%E7%8E%B0.jpg" alt="llama3表现"></p>
<ul>
<li>表中是llama3基准测试表现，CoT代表回答问题前告诉模型应该怎么做，它和few shot都是llama模型很常用的后训练手段。模型的参数量对其效果的影响还是很大的。</li>
</ul>
<h2 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h2><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/llama3%E6%9E%B6%E6%9E%84.jpg" alt="llama3架构"><br>模型流程主要分为<strong>预训练</strong>和<strong>后训练</strong>，预训练是让模型能够学会生成下一个token，相当于学会说话，理解语言；后训练则是让模型能够完成任务，在编码、数学等各类领域当中有提升。<br><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/llama%E5%A4%9A%E6%A8%A1%E6%80%81.jpg" alt="llama3多模态"></p>
<ul>
<li><strong>多模态编码器</strong>预训练：为图像和语音分别训练编码器，模型学会视觉内容与自然语言描述之间的关系。语音编码器通过自监督方法训练，该方法屏蔽部分语音输入，并通过离散token表示重建被屏蔽的部分，从而使模型学习语音信号的结构。</li>
<li><strong>视觉适配模块</strong>训练：训练一个adapter，将预训练的图像编码器集成到预训练的语言模型中。adapter由一系列交叉注意力层组成，将图像编码器表示输入到语言模型中。adapter模块在文本-图像对上进行训练，使图像表示与语言表示对齐。在训练adapter时，更新图像编码器的参数的同时冻结语言模型的参数。最后还在视频-文本数据对上训练了一个视频adapter模块，使模型能够跨帧聚合信息。</li>
<li><strong>语音适配模块</strong>训练：通过一个adapter将语音编码器集成到模型中，将语音编码转换为可以直接输入微调语言模型的token表示。在SFT阶段，adapter模块和编码器的参数共同更新，以实现高质量的语音理解。在训练语音适配模块时，同样冻结语言模型。</li>
</ul>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>预训练时对数据做了大量工作，包括但不限于：</p>
<ol>
<li><strong>数据提取和清洗</strong>，将html通过工具提取内容，对于图像渲染的数学公式等也进行了提取，还发现markdown文本对于训练是有害的，就除去了，还移除了可能有不安全信息的网站；</li>
<li><strong>数据退火</strong>，将质量好但体量小的数据集用于靠后阶段的训练，能够较好地提升模型（类似于考前背题）；</li>
<li>使用<strong>启发式算法</strong>过滤数据，用<strong>模型</strong>做质量过滤；</li>
<li>各种<strong>去重</strong>。</li>
</ol>
<h2 id="模型架构"><a href="#模型架构" class="headerlink" title="模型架构"></a>模型架构</h2><p>Llama 3使用了标准的稠密Transformer架构，相较于llama2，llama3的模型架构上有小改动：</p>
<ol>
<li><strong>GQA</strong>代替MHA。</li>
<li>多个无关文档同时训练时，标上<strong>注意力掩码</strong>，在计算注意力时两个文档之间不进行计算。</li>
<li><strong>扩展词表</strong>，使用128K大小的字典，多语言能力提升，但是这方面依然不如GPT4。</li>
<li>使用<strong>旋转位置编码RoPE</strong>进行位置编码，RoPE基本频率超参数增加到500,000，这使模型能够更好地支持更长的上下文。</li>
</ol>
<h2 id="scaling-law"><a href="#scaling-law" class="headerlink" title="scaling law"></a>scaling law</h2><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/scalinglaw.jpg" alt="scaling law"></p>
<ul>
<li>如图，算力增长时，损失是比较接近线性下降的，意味着用小的模型就可以低成本地预测大的模型的效果如何。</li>
<li>值得注意的是，当模型足够大时（右下角的弧线），曲线更加平滑，意味着此时样本量的影响没有那么大。</li>
<li>基于scaling law，团队最终决定训练一个405B参数的旗舰模型。</li>
</ul>
<h2 id="训练硬件"><a href="#训练硬件" class="headerlink" title="训练硬件"></a>训练硬件</h2><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%9B%9B%E7%A7%8D%E5%B9%B6%E8%A1%8C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95.jpg" alt="四种并行训练方法"></p>
<ul>
<li>为了扩展Llama 3最大模型的训练，团队使用了4D并行方法——结合了四种不同类型的并行方法来分片模型。这种方法有效地将计算任务分布在多个GPU上，并确保每个GPU的模型参数、优化器状态、梯度和激活都能适应其高带宽内存（HBM）。</li>
</ul>
<ol>
<li>张量并行：将单个权重张量分割成多个块并分配到不同的设备上。</li>
<li>流水线并行：将模型按层垂直分成多个阶段，使得不同的设备可以并行处理完整模型流水线的不同阶段。</li>
<li>上下文并行：将输入上下文分割成段，减少长序列输入的内存瓶颈。</li>
<li>完全分片的数据并行（FSDP）：将模型、优化器和梯度分片，同时实现数据并行，即在多个GPU上并行处理数据，并在每个训练步骤后同步。</li>
</ol>
<h2 id="训练配方"><a href="#训练配方" class="headerlink" title="训练配方"></a>训练配方</h2><ul>
<li>预训练Llama 3 405B的配方包括三个主要阶段：（1）初始预训练（2）长上下文预训练（3）退火。</li>
<li>后训练策略的核心是<strong>奖励模型</strong>和<strong>语言模型</strong>，步骤如下（要按顺序）：<ul>
<li><strong>RM阶段</strong>：先在预训练检查点上训练一个奖励模型（RM），它会学习如何对回答（偏好数据）采取次序不同的三个响应——（编辑 &gt; 选择 &gt; 拒绝），偏好数据是人工严格标注的；</li>
<li><strong>SFT阶段</strong>：使用奖励模型对人工标注的提示词进行<strong>拒绝采样</strong>（Rejection sampling，RS），即面对多个答案，RM通过评分函数排序这些答案，过滤掉比较差的答案，生成了新的数据，这些数据被用来微调LLM；</li>
<li><strong>DPO阶段</strong>：使用<strong>直接偏好优化（DPO）</strong>对SFT模型进行人类偏好对齐。训练时，他们主要使用前几轮对齐中表现最佳模型收集的最新偏好数据，因此训练数据更符合每轮优化的策略模型的分布，DPO效果好过PPO等探索类算法；</li>
<li>最后，对在每个RM、SFT或DPO阶段使用不同版本的数据或超参数进行实验所获得的模型进行<strong>加权平均</strong>。</li>
</ul>
</li>
</ul>
<h1 id="🔥ChatGLM"><a href="#🔥ChatGLM" class="headerlink" title="🔥ChatGLM"></a>🔥ChatGLM</h1><p>论文：<a href="https://arxiv.org/pdf/2103.10360.pdf">ChatGLM1</a>、<a href="https://arxiv.org/abs/2406.12793">ChatGLM4</a></p>
<h2 id="🚢ChatGLM1"><a href="#🚢ChatGLM1" class="headerlink" title="🚢ChatGLM1"></a>🚢ChatGLM1</h2><p>1代使用的是encoder-decoder架构，也就是seq2seq的思想。</p>
<h3 id="预训练"><a href="#预训练" class="headerlink" title="预训练"></a>预训练</h3><p><strong>GLM的核心技术就在于预训练任务的设计。</strong></p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/GLM%E5%A1%AB%E7%A9%BA%E4%BB%BB%E5%8A%A1.jpg" alt="GLM填空任务"></p>
<ul>
<li>如图，GLM预训练时，在输入文本中，随机删除连续的tokens，模型以自回归的方式从损坏的文本中预测缺失的词，这意味着在预测一个片段中的缺失词时，模型可以访问损坏的文本和之前预测的片段。</li>
<li>为了充分捕捉不同片段之间的相互依赖关系，会随机打乱片段的顺序，类似于排列语言模型。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/GLM%E9%A2%84%E8%AE%AD%E7%BB%83%E6%96%B9%E6%A1%88.jpg" alt="GLM预训练方案"></p>
<ul>
<li>输入被分成两部分：Part A是缺失的文本，Part B是被遮盖的片段。Part A的词可以相互看到，但不能看到 Part B中的任何词。Part B的词可以看到Part A和Part B中的前置词，但不能看到Part B中的后续词。</li>
<li>为了实现自回归生成，每个片段都用特殊的符号 <code>[START]</code> 和 <code>[END]</code> 进行填充。</li>
<li>在GLM中，使用<strong>二维位置编码</strong>，第一个位置id用来标记Part A中的位置，第二个位置id用来表示跨度内部的相对位置。</li>
<li>上图d部分也展示了A可以互相看到，B能看到完整的A、B的前面部分而看不到B的后面。</li>
</ul>
<h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p>在原始Transformer模块的基础上进行了一些修改：</p>
<ul>
<li>重组了LN和残差连接的顺序；</li>
<li>使用单个线性层对输出token进行预测；</li>
<li>激活函数从ReLU换成了GeLUS。</li>
</ul>
<h2 id="🚢ChatGLM2"><a href="#🚢ChatGLM2" class="headerlink" title="🚢ChatGLM2"></a>🚢ChatGLM2</h2><p>主要提升：更长的上下文，更强大的性能，更高效的推理，更开放的协议。</p>
<ul>
<li>改进：</li>
</ul>
<ol>
<li>RoPE替换二维位置编码；</li>
<li>MQA替换MHA；</li>
<li>完全的decoder-only：不区分Part A&#x2F;B，1代中Part A是双向注意力（可以看到后文），这代全部token都无法看到后文；</li>
<li>多目标任务：去掉特殊任务的token。</li>
</ol>
<h2 id="🚢ChatGLM3"><a href="#🚢ChatGLM3" class="headerlink" title="🚢ChatGLM3"></a>🚢ChatGLM3</h2><p>架构与2代一致，整体变化不大，算是一个普通的迭代。</p>
<ul>
<li>2、3代相较于1代的共同变化：</li>
</ul>
<ol>
<li>位置编码改为从每个GLMBlock一份提升为全局一份；</li>
<li>词表的大小从ChatGLM的150528缩小为65024，加载更快；</li>
<li>激活函数改成Swish-1。</li>
</ol>
<h2 id="🚢ChatGLM4"><a href="#🚢ChatGLM4" class="headerlink" title="🚢ChatGLM4"></a>🚢ChatGLM4</h2><p>GLM4整体性能相比GLM3全面提升60%，逼近GPT-4；支持更长上下文；更强的多模态；支持更快推理速度，更多并发，大大降低推理成本；同时GLM-4增强了智能体能力。</p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/GLM4%E7%9A%84agent.jpg" alt="GLM4的agent能力"></p>
<ul>
<li>GLM-4 实现自主根据用户意图，自动理解、规划复杂指令，自由调用网页浏览器、Code Interpreter代码解释器和多模态文生图大模型，以完成复杂任务。</li>
<li>简单来讲，即只需一个指令，GLM-4会自动分析指令，结合上下文选择决定调用合适的工具。</li>
<li>可以实现文生图、代码解释器、网页浏览、函数调用等工具的使用，还可以一次调用多个工具。</li>
</ul>
<h1 id="🔥DeepSeek"><a href="#🔥DeepSeek" class="headerlink" title="🔥DeepSeek"></a>🔥DeepSeek</h1><p>论文：<a href="https://arxiv.org/pdf/2412.19437">DeepSeek-v3</a>、<a href="https://arxiv.org/pdf/2412.19437">DeepSeek-R1</a></p>
<p>DeepSeek-v3改进了transformer内部结构和整体架构，在辅助损失函数等方面也有创新，使用监督微调和强化学习作为后训练手段提升模型性能。而且训练时间、耗费资源和GPT等模型相比都极具优势。</p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/deepseek-v3%E8%A1%A8%E7%8E%B0.jpg" alt="deepseek-v3表现"></p>
<ul>
<li>deepseek-v3在编程和数学方面尤为强势，其他方面也相当优秀</li>
</ul>
<p>DeepSeek-R1是仅基于强化学习，完全不使用监督学习微调（SFT）的模型，性能强于OpenAI-o1，各方面表现都是最强的。它创新性地增加了<strong>思考环节</strong>，使用<strong>蒸馏手段</strong>训练了很强的小模型。</p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/deepseek-R1%E8%A1%A8%E7%8E%B0.jpg" alt="deepseek-R1表现"></p>
<h2 id="🚢DeepSeek-v3"><a href="#🚢DeepSeek-v3" class="headerlink" title="🚢DeepSeek-v3"></a>🚢DeepSeek-v3</h2><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/deepseek-v3%E6%A0%B8%E5%BF%83%E6%94%B9%E8%BF%9B.jpg" alt="deepseek-v3核心改进"><br>deepseek-v3对transformer的MLP（前馈网络）和注意力机制进行了改进，得到 <strong>DeepSeekMoE</strong> 和 <strong>MLA</strong>。</p>
<h3 id="MLA"><a href="#MLA" class="headerlink" title="MLA"></a>MLA</h3><p>Multi-head Latent Attention（MLA）是基于transformer的多头注意力机制（MHA）改进得到的。<br><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/MLA%E6%94%B9%E8%BF%9B%E9%83%A8%E5%88%86.jpg" alt="MLA改进部分"></p>
<ul>
<li>如图所示，MLA在MHA前面增加了一些计算过程（可学习）生成QKV，而不是将输入直接作为QKV。主要是通过<strong>低秩联合压缩</strong>来减小KV cache的大小，从而提高推理速度。图中阴影部分是需要缓存的内容。</li>
<li>如图kv生成的部分，上一层的输入通过<strong>降采样矩阵</strong>生成ct，再通过<strong>上采样矩阵</strong>生成K和V，这意味着KV cache只需要缓存内存占用更小的ct，而不用缓存K、V。</li>
<li>可以看到输入进MHA的k由两个部分拼接而成，左边的是输入特征通过<strong>旋转位置向量（RoPE）</strong>进行位置编码生成的k（这个k连同ct需要缓存），主要提供位置信息；右边的是通过低秩联合压缩生成的k，主要提供内容信息。</li>
<li>Q这边，是输入特征通过降采样矩阵生成ct，ct分别通过上采样和位置编码生成两种q，拼接后获得Q输入MHA。虽然Q不需要缓存，但是可能是为了QK操作的对称性，还是进行了这些操作。</li>
<li>总的来说，MLA增加了计算量，但是降低了内存压力，相当于小的时间换了大的空间。</li>
</ul>
<h3 id="MoE"><a href="#MoE" class="headerlink" title="MoE"></a>MoE</h3><p>混合专家机制（MoE），不同于MLP每个神经元无时无刻都在起作用，MoE是一种稀疏的网络模型。<br><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/DeepSeekMoE.jpg" alt="DeepSeekMoE"></p>
<ul>
<li>网络由多个共享专家（shared experts）和路由专家（routed experts）组成。如图，绿色的共享专家是必定激活的，而蓝色的路由专家是可选择激活的。路由器router负责选择top k个路由专家激活。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/MoE%E6%9C%BA%E5%88%B6.jpg" alt="MoE机制"></p>
<ul>
<li>公式如上，<strong>模块输出h &#x3D; 输入u（残差连接） + 共享专家输出 + 路由专家输出</strong>。g是路由专家的<strong>亲合度分数</strong>由输入u和路由器的向量e（可学习）求相似度求得，也就是路由器会学习如何根据输入选择最合适的Kr个路由专家进行推理。所以路由专家的输出其实是<strong>加权</strong>的，g会作为每个路由专家的话语权参与输出的计算。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B9%B3%E8%A1%A1%E8%B7%AF%E7%94%B1%E6%96%B9%E6%A1%88.jpg" alt="无辅助损失负载均衡"></p>
<ul>
<li>为了防止某些路由专家过多或者过少地参与，过去会新设置辅助损失来惩罚这种不均的情况，这会降低模型性能、增加计算量。如上图，deepseek采用<strong>无辅助损失负载均衡</strong>（auxiliary-loss-free load balancing），即在训练过程中，为每个专家添加一个偏置b参与亲合度g的计算。当某个专家被激活时，b会降低来减少下一次激活的可能性，反之亦然。</li>
</ul>
<h3 id="MTP"><a href="#MTP" class="headerlink" title="MTP"></a>MTP</h3><p>Multi-Token Prediction（MTP）可以高效重复利用特征，使得模型一次生成多个token，以提升预测效果。<br><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/MTP.jpg" alt="MTP"></p>
<ul>
<li>如图主模型（main model）是原本的transformer结构，主模型主干部分在输出特征用于预测时，该特征也被输入到MTP（只有一个transformer块）来生成多一个的token，有n个MTP就能生成n+1个token。</li>
<li>损失计算时，所有MTP损失求均值，再加权后参与损失计算即可。</li>
</ul>
<h1 id="🔥Qwen"><a href="#🔥Qwen" class="headerlink" title="🔥Qwen"></a>🔥Qwen</h1><p>论文：<a href="https://arxiv.org/pdf/2309.16609">Qwen</a>、<a href="https://arxiv.org/pdf/2407.10671">Qwen2</a>、<a href="https://arxiv.org/pdf/2409.12186">Qwen2.5</a>、<a href="http://arxiv.org/pdf/2308.12966">Qwen-VL</a>、<a href="https://arxiv.org/pdf/2409.12191">Qwen2-VL</a></p>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Qwen%E7%B3%BB%E5%88%97.jpg" alt="Qwen系列"><br>千问系列除了有纯语言模型，还包含了视觉-语言模型Qwen-VL和音频-语言模型Qwen-Audio。团队发布了四个密集模型，参数量分别为0.5B、1.5B、7B和72B，还有一个参数量为57B的混合专家（MoE）模型。</p>
<h2 id="🚢Qwen1"><a href="#🚢Qwen1" class="headerlink" title="🚢Qwen1"></a>🚢Qwen1</h2><p>Qwen是使用Transformer的修改版本设计的，具体来说，是采用了LlaMA的架构设计，Qwen对架构的修改包括以下几个方面：</p>
<ul>
<li><strong>位置编码</strong>：使用旋转位置编码RoPE；</li>
<li><strong>偏置</strong>：在 QKV 注意力层中添加偏置以增强模型的外推能力；</li>
<li><strong>归一化</strong>：使用RMSNorm，是LayerNorm的一种变体，在相同的性能下提高了效率。</li>
<li><strong>激活函数</strong>：采用SwiGLU作为激活函数，它是Swish和门控线性单元的组合。初步实验验证，基于GLU的激活函数效果优于基于GELU等其他基线的选项。</li>
</ul>
<p>Qwen还合并了两种注意力机制：LogN-Scaling, Window Attention。LogN-Scaling调整点积Q和V的因子取决于上下文长度和训练长度的比率，确保注意力值的熵随着上下文长度的增长保持稳定。Window Attention将注意力限制在一个有限的上下文窗口中，避免模型注意力计算的tokens之间不会距离太远。</p>
<ul>
<li>训练方法上，后训练还是SFT和RLHF齐上。</li>
</ul>
<h2 id="🚢Qwen2"><a href="#🚢Qwen2" class="headerlink" title="🚢Qwen2"></a>🚢Qwen2</h2><h3 id="模型架构-1"><a href="#模型架构-1" class="headerlink" title="模型架构"></a>模型架构</h3><ul>
<li>Qwen2采用了<strong>基于字节级别的字节对编码</strong>（byte-level byte-pair encoding）的相同tokenizer。这个tokenizer表现出高效的编码效率，其压缩率优于其他方案，从而增强了Qwen2的多语言处理能力。</li>
<li>Qwen2系列基本上是基于Transformer架构的大型语言模型，具有因果掩码的自注意力机制。该系列包括四种规模的密集语言模型和一个MoE模型。</li>
<li><strong>密集语言模型</strong>：<ul>
<li>使用了前面提到的组查询注意力<strong>GQA</strong>代替MHA。</li>
<li>同时，为了扩展Qwen2的上下文窗口，Qwen2实现了<strong>双块注意力</strong>（Dual Chunk Attention, <strong>DCA</strong>），将长序列分割成可管理长度的块。如果输入可以在一个块内处理，DCA会产生与原始注意力机制相同的结果。否则，DCA有助于有效捕捉块内和跨块之间的相对位置信息，从而提升长上下文处理性能。</li>
<li>此外，Qwen2还采用了<strong>YARN</strong>重新调整注意力权重，以更好地进行长度外推。</li>
<li>Qwen2延续了Qwen的<strong>SwiGLU</strong>激活函数，旋转位置向量（RoPE）进行位置编码，QKV偏置进行注意力处理，以及RMSNorm和预归一化方法以确保训练的稳定性。</li>
</ul>
</li>
<li><strong>专家混合模型</strong>：<ul>
<li>Qwen2的MoE模型采用细粒度专家，创建了更小规模的专家，并同时激活更多的专家。</li>
<li>共享专家、路由专家之前提到，大体上是一样的。</li>
</ul>
</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/qwen2%E6%A8%A1%E5%9E%8B%E8%A7%84%E6%A0%BC.jpg" alt="qwen2模型规格"></p>
<ul>
<li>Qwen2系列包括五种规模的模型，与Qwen1.5模型相比，Qwen2模型每个token的键值（KV）大小显著较低。这一特性使得在长上下文推理任务中内存占用大幅减少。</li>
</ul>
<h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><ul>
<li>预训练：<ul>
<li>Qwen2对数据集进行了质量提升（优化算法过滤数据）和数据扩展（多语言、代码、数学）；</li>
<li>还优化了来自不同来源和领域的数据混合以学习近似人类的分布。</li>
<li>为了增强Qwen2的长上下文处理能力，团队在预训练的最后阶段将上下文长度从4,096个token增加到32,768个token。</li>
</ul>
</li>
<li>后训练：<ul>
<li>使用<strong>SFT</strong>和<strong>RLHF</strong>进行后训练，采用<strong>协作数据注释</strong>和<strong>自动数据生成</strong>来产生数据集。</li>
<li>RLHF方面，在离线训练阶段，使用预编译的偏好数据集，通过直接偏好优化最大化y+和y-之间的似然差异（y+是比y-更优的答案）。在在线训练阶段，模型实时迭代优化其性能，利用奖励模型进行即时反馈。</li>
</ul>
</li>
</ul>
<h2 id="🚢Qwen2-5"><a href="#🚢Qwen2-5" class="headerlink" title="🚢Qwen2.5"></a>🚢Qwen2.5</h2><p>Qwen2.5 的关键特点：</p>
<ol>
<li><strong>规模更优</strong>，引入更多规模的模型如14B、32B；</li>
<li><strong>数据更优</strong>，预训练和后训练数据量有了显著提升；</li>
<li><strong>使用体验更优</strong>，Qwen2 在使用中的关键限制已被克服，包括生成长度从2K tokens提升至8K tokens，更好地支持结构化输入和输出（如表格和JSON），以及更便捷的工具使用。</li>
</ol>
<ul>
<li>Qwen2.5延续了Qwen2的关键技术，如GQA、SwiGLU激活函数、旋转位置编码RoPE、RMSNorm，为了增强长上下文处理能力，继续使用YARN和双块注意力（DCA）。</li>
<li>在稠密模型的基础上，团队进一步扩展为 MoE 模型架构。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Qwen2.5%E4%B8%8A%E4%B8%8B%E6%96%87%E8%83%BD%E5%8A%9B.jpg" alt="Qwen2.5上下文能力"></p>
<ul>
<li>Qwen2.5在秘钥检索任务中达到百分百准确率，显示其超强的上下文能力。为了提升推理速度，团队引入了<strong>稀疏注意力机制</strong>，这对于提升长上下文处理时的用户体验至关重要。</li>
<li>总的来说，2.5是基于2的一个正常迭代，没有很革命性的新技术，但是得到了很好的效果。</li>
</ul>
<h2 id="🚢Qwen-VL"><a href="#🚢Qwen-VL" class="headerlink" title="🚢Qwen-VL"></a>🚢Qwen-VL</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><ul>
<li>架构上，语言部分使用了来自Qwen-7B模型的预训练权重，视觉部分采用了Vision Transformer（ViT）架构，在训练和推理过程中，将输入图像调整到特定的分辨率，然后通过将图像分割成大小为14的图块来处理它们。</li>
<li><strong>位置感知的视觉-语言适配器</strong>（Position-aware Vision-Language Adapter）：<ul>
<li>作用：为了压缩图像token长度，提高图像特征处理效率；</li>
<li>该模块由一个单层的交叉注意力模块构成，使用一组可训练的向量（嵌入）作为Q，使用来自视觉编码器的图像特征作为交叉注意力操作的K；</li>
<li>考虑到图像中位置信息的重要性，作者引入了<strong>2D绝对位置编码</strong>到交叉注意力机制的查询-键对中。</li>
</ul>
</li>
</ul>
<h3 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h3><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Qwen-VL%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B.jpg" alt="Qwen-VL训练过程"></p>
<ol>
<li>stage1：预训练，目标是使用大量的图文对数据对齐视觉模块和LLM的模态，这个阶段冻结LLM模块的参数； </li>
<li>stage2：多任务预训练，使用更高质量的图文多任务数据（主要来源自开源VL任务，部分自建数据集），更高的图片像素输入，全参数训练；</li>
<li>stage3：指令微调阶段，这个阶段冻结视觉Encoder模块，使用的数据主要来自大模型Self-Instruction方式自动生成，目标是提升模型的指令遵循和多轮对话能力。</li>
</ol>
<h2 id="🚢Qwen2-VL"><a href="#🚢Qwen2-VL" class="headerlink" title="🚢Qwen2-VL"></a>🚢Qwen2-VL</h2><p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Qwen2-VL%E6%9E%B6%E6%9E%84.jpg" alt="Qwen2-VL架构"></p>
<ul>
<li>架构方面，依然是LLM+视觉编码器结构，但是无adapter。</li>
<li><strong>原生分辨率输入</strong>：Qwen2-VL现在可以处理<strong>任意分辨率</strong>的图像，动态将其转换为可变数量的视觉tokens。为支持此功能，修改了ViT，去除了原始的绝对位置嵌入，并引入了<strong>2D-RoPE</strong>，以捕捉图像的二维位置信息。</li>
<li><strong>压缩图像token</strong>：为减少每幅图像的视觉tokens，在ViT后采用了一个简单的多层感知器（MLP）层，将相邻的2×2个tokens压缩为一个token，并在压缩的视觉tokens的开头和结尾放置特殊的&lt;|vision_start|&gt;和&lt;|vision_end|&gt; tokens。</li>
</ul>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%97%8B%E8%BD%AC%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81.jpg" alt="多模态旋转位置编码"></p>
<ul>
<li><p>与传统的1D-RoPE（用于LLM）仅能编码一维位置信息不同，M-RoPE有效地建模了多模态输入的位置信息。这通过将原始旋转embedding分解为三个组成部分：时间、高度和宽度来实现。对于文本输入，这些组件使用相同的位置ID，使得M-RoPE在功能上等同于1D-RoPE。 在处理图像时，每个视觉token的时间ID保持不变，而高度和宽度组件则根据token在图像中的位置分配不同的ID。对于视频，视为一系列帧，每帧的时间ID递增，而高度和宽度组件遵循与图像相同的ID分配模式。在输入包含多种模态的情况下，每种模态的位置编号通过将前一模态的最大位置ID +1 来初始化（如图中文本输入的第一个位置编码为4）。M-RoPE不仅增强了位置信息的建模，还减少了图像和视频的位置ID值，使模型在推理时能够推断更长的序列。</p>
</li>
<li><p>训练依然遵循Qwen-VL，采用三阶段训练方法。</p>
</li>
</ul>
<h1 id="🔥Baichuan2"><a href="#🔥Baichuan2" class="headerlink" title="🔥Baichuan2"></a>🔥Baichuan2</h1><p>在模型架构层面，主要还是基于Transformer，改进如下：</p>
<ol>
<li>Tokenizer：Baichuan 2的词汇表大小从 Baichuan 1的 64,000 扩展到 125,696，使用使用来自 SentencePiece 的字节对编码（BPE），不像 Baichuan 1那样添加虚拟前缀。</li>
<li>Baichuan 2-7B 采用位置编码 RoPE，为 Baichuan 2-13B 采用 ALiBi。</li>
<li>使用 SwiGLU 激活函数、RMSNorm均方根归一化、AdamW优化器、BF16精度。</li>
<li>微调是SFT+RLHF。</li>
</ol>
<p><img src="/2025/02/17/%E4%B8%BB%E6%B5%81%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Baichuan%E7%9A%84RLHF.jpg" alt="Baichuan的RLHF"></p>
<ul>
<li>给定一个提示，用不同大小和阶段（SFT，PPO）的 Baichuan 2 模型生成多样化的回应。在训练RM时，只使用由 Baichuan 2 模型族生成的回应。</li>
<li>获得奖励模型之后，使用<strong>PPO算法</strong>进一步训练语言模型，具体使用了<strong>4种模型</strong>：</li>
</ul>
<ol>
<li>actor模型：负责生成回应；</li>
<li>reference模型：用于计算固定参数的KL惩罚；</li>
<li>reward模型：提供整个回应的总体奖励，固定参数；</li>
<li>critic模型：用于学习每个token的值。</li>
</ol>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型SFT微调（LoRA）方案</title>
    <url>/2025/02/06/%E5%A4%A7%E6%A8%A1%E5%9E%8BSFT%E5%BE%AE%E8%B0%83%EF%BC%88LoRA%EF%BC%89%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>本次借助huggingface平台下载大模型和数据集，并在本地尝试进行微调，目的是跑通并体验微调过程。微调使用的是参数高效微调也就是PEFT，策略是有监督微调SFT，使用的具体方法是LoRA。<span id="more"></span><br><strong>注意：huggingface下载都是需要代理的，文中出现的python库自行用pip安装即可。</strong></p>
<h1 id="🔥模型下载"><a href="#🔥模型下载" class="headerlink" title="🔥模型下载"></a>🔥模型下载</h1><p><a href="https://huggingface.co/">huggingface</a>上选择模型，这里以Qwen&#x2F;Qwen2.5-3B-Instruct为例。</p>
<ul>
<li><p>如下图可以直接在界面中的files and versions中下载模型，把所有文件下载进一个文件夹即可。<br><img src="/2025/02/06/%E5%A4%A7%E6%A8%A1%E5%9E%8BSFT%E5%BE%AE%E8%B0%83%EF%BC%88LoRA%EF%BC%89%E6%96%B9%E6%A1%88/%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9.jpg" alt="huggingface模型界面"></p>
</li>
<li><p>也可以通过命令行一次性下载，先通过<code>pip install -U huggingface_hub</code>安装命令行工具，在cmd中通过以下指令登录huggingface并下载模型：</p>
</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">huggingface-cli login
huggingface-cli download --resume-download Qwen/Qwen2.5-3B-Instruct --local-dir D://你的存储路径
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>首先第一句指令登录，会让你输入huggingface个人账户界面的access tokens的令牌，输入后即可通过第二条指令下载模型到指定位置。</li>
</ul>
<h1 id="🔥数据集下载"><a href="#🔥数据集下载" class="headerlink" title="🔥数据集下载"></a>🔥数据集下载</h1><p><a href="https://huggingface.co/">huggingface</a>上选择数据集，以弱智吧数据集 LooksJuicy&#x2F;ruozhiba 为例。</p>
<ul>
<li>通过python的datasets库可以直接下载源文件：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> datasets <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> load_dataset<span class="token punctuation">,</span> load_from_disk
<span class="token keyword">import</span> os

<span class="token comment" spellcheck="true"># 配置你的代理</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'HTTP_PROXY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:7890'</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'HTTPS_PROXY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:7890'</span>

dataset <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"LooksJuicy/ruozhiba"</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>
dataset<span class="token punctuation">.</span>save_to_disk<span class="token punctuation">(</span><span class="token string">"./datasets/ruozhiba"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存到该目录下</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2025/02/06/%E5%A4%A7%E6%A8%A1%E5%9E%8BSFT%E5%BE%AE%E8%B0%83%EF%BC%88LoRA%EF%BC%89%E6%96%B9%E6%A1%88/%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F.jpg" alt="数据集格式"></p>
<ul>
<li>这样只是下载源文件没有进行处理，在官网可以预览文件内容如上，该数据集由 instruction 和 output 组成，比较简单。</li>
<li>我们可以直接通过如下代码进行预处理，思路就是缓存数据集源文件并转换成可以用于训练的message（json格式），最后保存到json文件当中，这次不划分数据集，直接全部用于训练。</li>
<li>缓存是不会自动清掉的，可以在C盘的.cache里面手动删掉。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_from_disk<span class="token punctuation">,</span> load_dataset
<span class="token keyword">import</span> os

<span class="token comment" spellcheck="true"># 配置代理</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'HTTP_PROXY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:7890'</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'HTTPS_PROXY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:7890'</span>
<span class="token comment" spellcheck="true"># 系统 prompt，可以自行设置</span>
system_message <span class="token operator">=</span> <span class="token string">"回答问题"</span>

<span class="token comment" spellcheck="true"># 转换为 messages</span>
<span class="token keyword">def</span> <span class="token function">create_conversation</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">"messages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> system_message<span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> sample<span class="token punctuation">[</span><span class="token string">"instruction"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> sample<span class="token punctuation">[</span><span class="token string">"output"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># 从 hub 加载数据集</span>
dataset <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"LooksJuicy/ruozhiba"</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 转换 dataset 为 OAI messages</span>
dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>map<span class="token punctuation">(</span>create_conversation<span class="token punctuation">,</span> remove_columns<span class="token operator">=</span>dataset<span class="token punctuation">.</span>features<span class="token punctuation">,</span> batched<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token number">345</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"messages"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 保存到磁盘</span>
dataset<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token string">"train_dataset.json"</span><span class="token punctuation">,</span> orient<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥微调"><a href="#🔥微调" class="headerlink" title="🔥微调"></a>🔥微调</h1><ul>
<li>有了数据集和模型，就可以进行微调了，这里以LoRA微调为例，使用transformers、trld等库进行微调。</li>
<li>主要流程就是加载数据集、加载模型及其分词器、配置LoRA参数、配置训练参数，最后就可以定义训练器进行训练了。流程上和传统深度学习一样，只不过对应的库都进行了封装，不需要手动编写训练的常规流程。</li>
<li>超参数可以自行调整，<strong>减少显存占用</strong>可以降低批次大小<code>per_device_train_batch_size</code>和梯度积累<code>gradient_accumulation_steps</code>，<strong>减少训练总时长</strong>可以减少迭代数<code>num_train_epochs</code>（可以小于1）或调整批次大小。其他参数可以自行尝试。</li>
<li>注意：生成的LoRA模型是<strong>增量模型</strong>，也就是依赖原模型存在，所以生成的模型不会很大，如有需要可以自行查找方法来保存完整模型。</li>
<li>代码如下：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">,</span> os
<span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForCausalLM<span class="token punctuation">,</span> BitsAndBytesConfig
<span class="token keyword">from</span> trl <span class="token keyword">import</span> SFTTrainer<span class="token punctuation">,</span> setup_chat_format
<span class="token keyword">from</span> peft <span class="token keyword">import</span> LoraConfig
<span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_dataset
<span class="token keyword">from</span> transformers <span class="token keyword">import</span> TrainingArguments
<span class="token keyword">import</span> warnings
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"`tokenizer` is deprecated"</span><span class="token punctuation">)</span>
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"`use_cache=True` is incompatible"</span><span class="token punctuation">)</span>
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"torch.utils.checkpoint: please pass in use_reentrant"</span><span class="token punctuation">)</span>
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"Torch was not compiled with flash attention"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 设置设备和环境</span>
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 加载数据集</span>
dataset <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span> data_files<span class="token operator">=</span><span class="token string">"train_dataset.json所在路径"</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 加载模型和分词器</span>
model_id <span class="token operator">=</span> <span class="token string">"qwen2.5-3b模型文件夹的路径"</span>
bnb_config <span class="token operator">=</span> BitsAndBytesConfig<span class="token punctuation">(</span>
    load_in_4bit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    bnb_4bit_use_double_quant<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    bnb_4bit_quant_type<span class="token operator">=</span><span class="token string">"nf4"</span><span class="token punctuation">,</span>
    bnb_4bit_compute_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>bfloat16
<span class="token punctuation">)</span>

model <span class="token operator">=</span> AutoModelForCausalLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>
    model_id<span class="token punctuation">,</span>
    device_map<span class="token operator">=</span><span class="token string">"auto"</span><span class="token punctuation">,</span>
    torch_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>bfloat16<span class="token punctuation">,</span>
    quantization_config<span class="token operator">=</span>bnb_config<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_id<span class="token punctuation">)</span>
tokenizer<span class="token punctuation">.</span>padding_side <span class="token operator">=</span> <span class="token string">'right'</span>

<span class="token comment" spellcheck="true"># 配置LoRA</span>
peft_config <span class="token operator">=</span> LoraConfig<span class="token punctuation">(</span>
    lora_alpha<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>
    lora_dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>
    r<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>
    bias<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">,</span>
    task_type<span class="token operator">=</span><span class="token string">"CAUSAL_LM"</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 定义训练参数</span>
args <span class="token operator">=</span> TrainingArguments<span class="token punctuation">(</span>
    output_dir<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"保存模型的路径"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    num_train_epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>
    per_device_train_batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>
    gradient_accumulation_steps<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
    gradient_checkpointing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    optim<span class="token operator">=</span><span class="token string">"adamw_torch_fused"</span><span class="token punctuation">,</span>
    logging_steps<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>
    save_strategy<span class="token operator">=</span><span class="token string">"steps"</span><span class="token punctuation">,</span>
    save_steps<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>
    learning_rate<span class="token operator">=</span><span class="token number">3e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>
    fp16<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 启用 fp16 混合精度训练</span>
    max_grad_norm<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>
    warmup_ratio<span class="token operator">=</span><span class="token number">0.03</span><span class="token punctuation">,</span>
    lr_scheduler_type<span class="token operator">=</span><span class="token string">"constant"</span><span class="token punctuation">,</span>
    push_to_hub<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    report_to<span class="token operator">=</span><span class="token string">"tensorboard"</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 创建SFTTrainer</span>
trainer <span class="token operator">=</span> SFTTrainer<span class="token punctuation">(</span>
    model<span class="token operator">=</span>model<span class="token punctuation">,</span>
    args<span class="token operator">=</span>args<span class="token punctuation">,</span>
    train_dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>
    peft_config<span class="token operator">=</span>peft_config<span class="token punctuation">,</span>
    tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 开始训练</span>
trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
trainer<span class="token punctuation">.</span>save_model<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 清理内存</span>
<span class="token keyword">del</span> model
<span class="token keyword">del</span> trainer
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>empty_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥测试"><a href="#🔥测试" class="headerlink" title="🔥测试"></a>🔥测试</h1><ul>
<li>训练完成后就可以进行问答，通过以下脚本实现，测试时为了使得模型稳定生成结果，可以将温度值<code>temperature</code>调小一些。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline

<span class="token comment" spellcheck="true"># 加载模型</span>
pipe <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"text-generation"</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">"微调后的模型文件夹"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 提供输入</span>
input_text <span class="token operator">=</span> <span class="token string">"为什么我的银行卡在高压锅里煮了一晚上，还是冻结状态？"</span>

<span class="token comment" spellcheck="true"># 调整生成参数</span>
output <span class="token operator">=</span> pipe<span class="token punctuation">(</span>
    input_text<span class="token punctuation">,</span>
    max_length<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 增加生成的最大长度</span>
    num_return_sequences<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 生成多个序列</span>
    temperature<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2025/02/06/%E5%A4%A7%E6%A8%A1%E5%9E%8BSFT%E5%BE%AE%E8%B0%83%EF%BC%88LoRA%EF%BC%89%E6%96%B9%E6%A1%88/%E6%B5%8B%E8%AF%95.png" alt="测试结果"></p>
<ul>
<li>可以看到模型是可以应对弱智吧的问题。</li>
</ul>
<h1 id="🔥总结"><a href="#🔥总结" class="headerlink" title="🔥总结"></a>🔥总结</h1><p>通过该方案可以比较容易地上手微调，但是微调本身还是很吃算力的，即便是这种参数高效微调对个人电脑也相当慢，效果也不一定好，像传统深度学习训练一样，也需要很多调整。所以只是用于尝试和体验微调过程，丰富相关经验，增强知识的理解。</p>
]]></content>
      <categories>
        <category>教程</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>Python</tag>
        <tag>SFT</tag>
        <tag>LORA</tag>
        <tag>PEFT</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型及RAG架构的本地部署</title>
    <url>/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>本次在本地电脑部署离线的大模型和RAG架构，并进行初步的功能测试，以简单地入门大模型及RAG架构。</p>
<h1 id="🔥大模型部署"><a href="#🔥大模型部署" class="headerlink" title="🔥大模型部署"></a>🔥大模型部署</h1><ul>
<li>这次部署大模型使用的是<a href="https://ollama.com/">Ollama</a>，它一个开源的LLM提供商，部署简便很适合入门使用。<span id="more"></span></li>
<li>进入官网直接选择对应系统下载并安装（这个应该只能安装在C盘）。</li>
<li>然后在<strong>系统变量</strong>里面添加OLLAMA_MODELS环境变量，值设置为你希望模型存储的路径，否则会直接下到C盘，然后在任务管理器关闭ollama的后台进程。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/LLM%EF%BC%88%E9%80%9A%E4%B9%89%EF%BC%89.jpg" alt="通义千问"></li>
<li>在cmd中输入<code>ollama run qwen2.5</code>，ollama就会下载千问2.5的模型（这里没有设置模型规模，默认下载7B的版本，大概5GB左右），要选择模型规模可以在ollama官网的model里面选（如上图），下载就可以赋值右边的指令。</li>
<li>下载完成后就可以直接在cmd界面发问题进行对话了，不是很吃性能，CPU就能跑，到这里大模型就算部署了。</li>
</ul>
<h1 id="🔥嵌入模型下载"><a href="#🔥嵌入模型下载" class="headerlink" title="🔥嵌入模型下载"></a>🔥嵌入模型下载</h1><ul>
<li>同样在OLLAMA上有提供嵌入模型，就是将本地知识库内容转换为向量，类似transformer架构的embedding层的功能。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B.png" alt="嵌入模型"></li>
<li>这次选择上图的模型，还是用<code>ollama run</code>指令下载，这个模型显然是不能对话的，先下好备用。</li>
</ul>
<h1 id="🔥RAG架构部署"><a href="#🔥RAG架构部署" class="headerlink" title="🔥RAG架构部署"></a>🔥RAG架构部署</h1><ul>
<li>RAG架构简单来说就是结合LLM的搜索引擎，具体详见<a href="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" title="大模型基础知识">大模型基础知识</a>。</li>
<li>本次部署RAG用到的是<a href="https://anythingllm.com/">AnythingLLM</a>。</li>
<li>也是直接到官网下对应安装包安装，可以选择安装路径。</li>
</ul>
<h2 id="首选项设置"><a href="#首选项设置" class="headerlink" title="首选项设置"></a>首选项设置</h2><p><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2.jpg" alt="初始界面"></p>
<ul>
<li>刚开始进入要命名一个新的工作区，然后选择想要用的LLM、嵌入模型、向量库，都可以先默认，然后就会创建工作区域，界面如上，和一般的大语言对话网站结构一样。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/LLM%E9%A6%96%E9%80%89%E9%A1%B9.jpg" alt="LLM首选项"></li>
<li>然后点击左下方的设置（扳手），先在‘外观’设置一下语言，然后选择LLM首选项，如上图，选择OLLAMA作为LLM提供商，然后就会显示已有的本地模型，选择就行了。那样每次创建新的工作区就会先选它。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B%E9%A6%96%E9%80%89%E9%A1%B9.jpg" alt="嵌入模型首选项"></li>
<li>然后就是选择嵌入模型，一样的操作。</li>
<li>向量库这次还是用默认的，所以先不设置。</li>
</ul>
<h2 id="工作区设置"><a href="#工作区设置" class="headerlink" title="工作区设置"></a>工作区设置</h2><p><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%B7%A5%E4%BD%9C%E5%8C%BALLM%E8%AE%BE%E7%BD%AE.jpg" alt="工作区LLM设置"></p>
<ul>
<li>在工作区右边的齿轮可以进行工作区的设置，首先是LLM的设置，可以选择不同于首选项的LLM，这里选择之前下载的千问2.5模型。</li>
<li>下面的选项还可以选择是聊天还是仅检索（查询），然后设置模型可以依据的历史对话数，以及设置提示prompt。最后在底下有一个更新工作区要记得点击才能保存设置。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%90%91%E9%87%8F%E5%BA%93%E8%AE%BE%E7%BD%AE.jpg" alt="向量库设置"></li>
<li>然后设置向量库，如上图，可以选择每次给大模型多少片段让它生成回答，还有就是选择的文本片段与聊天的相似度最低阈值是多少。</li>
</ul>
<h2 id="知识库构建"><a href="#知识库构建" class="headerlink" title="知识库构建"></a>知识库构建</h2><p><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E7%9F%A5%E8%AF%86%E5%BA%93%E8%AE%BE%E7%BD%AE.jpg" alt="知识库设置"></p>
<ul>
<li>在对应的工作区旁边可以上传文档到知识库，可以复制网页到左下方让它爬取（fetch website），或者直接上传文件，然后移动到右边，左下角会出现保存按钮，点击就可以使嵌入模型开始工作，转换为对应的向量存到数据库了。</li>
<li>注意：如果要切换嵌入模型，所有工作区的知识库就得重新导入文件，再重新进行嵌入。</li>
</ul>
<h1 id="🔥基本功能测试"><a href="#🔥基本功能测试" class="headerlink" title="🔥基本功能测试"></a>🔥基本功能测试</h1><p><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%80%9F%E5%8A%A9%E7%9F%A5%E8%AF%86%E5%BA%93%E5%9B%9E%E7%AD%94.png" alt="借助知识库回答"></p>
<ul>
<li>之前在知识库传了一个论文，然后现在让它总结内容，如上图，可以看到能够正常返回和论文相关的内容。说明RAG的所有东西都是构建成功的。</li>
<li>不过总结的算不上全面，这些就和大量需要调整的内容和参数有关，包括但不限于之前提及的——LLM选择、LLM规模、嵌入模型选择、向量库选择、文本形式、嵌入token大小、相似度阈值等等。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E8%B0%83%E8%AF%95%E5%90%8E%E6%95%88%E6%9E%9C.png" alt="调试后效果"></li>
<li><strong>后续调试</strong>：之后我下载了32B参数的千问模型，变化不算大。然后文本嵌入时减小了文本的长度，从8k调到了4k，然后把word文档改为pdf后重新问该问题，发现能够相当完整地概括文章内容了，并且细问其中某个方面时也能够解答。说明嵌入后的向量不应该太长，模型可以适当增大，当然这会以时间开销为代价。</li>
</ul>
<h1 id="🔥API调试"><a href="#🔥API调试" class="headerlink" title="🔥API调试"></a>🔥API调试</h1><ul>
<li>本地部署大模型和RAG最重要的还是能不能用API直接访问，这样就可以把它集成到自己的网站、应用、程序中。无论是Ollama还是anythingllm都提供了API接口。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%88%9B%E5%BB%BAAPI_KEY.jpg" alt="创建API KEY"></li>
<li>在之前的总设置界面中可以在左边找到API秘钥选项，进入后创建新的秘钥，生成了API KEY，然后复制它（退出来刷新界面或者重启软件也能再看到）。</li>
</ul>
<h2 id="API文档调试"><a href="#API文档调试" class="headerlink" title="API文档调试"></a>API文档调试</h2><ul>
<li>然后点击上图的文档链接，就可以进入一个软件提供的小测试环境，里面有各种API接口，包括LLM的接口、嵌入模型的接口、向量库的接口等等。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/%E5%A1%AB%E5%85%A5API.jpg" alt="填入API"></li>
<li>在上方输入API KEY进行认证。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/API%E6%96%87%E6%A1%A3%E6%B5%8B%E8%AF%95.jpg" alt="API文档测试"></li>
<li>如上图的步骤，选择<code>/v1/workspace/&#123;slug&#125;/chat</code>这个API，就可以开始调试，slug填入工作区的名字（全改小写），然后设置发送数据。<code>message</code>是发送的问题，<code>mode</code>部分应当只保留chat或者query之一，后面两个可以暂时不用。<br><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/API%E6%96%87%E6%A1%A3%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C%E7%A4%BA%E6%84%8F.jpg" alt="API文档调试结果示意"></li>
<li>设置好后就可以在底下点击execute按钮进行调试，如果返回了200及其回答等内容，说明API接口没问题。</li>
<li>记住这个<code>Request URL</code>，后面要用到。</li>
</ul>
<h2 id="Python脚本调试"><a href="#Python脚本调试" class="headerlink" title="Python脚本调试"></a>Python脚本调试</h2><ul>
<li>然后就可以用python脚本进行调试了，如下，输入好三个值，设置好问题，就可以调试了。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment" spellcheck="true"># 替换为你的API密钥、工作区ID和API端点</span>
API_KEY <span class="token operator">=</span> <span class="token string">'你的API_KEY'</span>
WORKSPACE_ID <span class="token operator">=</span> <span class="token string">'你的工作区名称'</span>
API_ENDPOINT <span class="token operator">=</span> <span class="token string">'刚才提到的Request URL'</span>

<span class="token comment" spellcheck="true"># 设置请求头，通常需要包含认证信息</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'Authorization'</span><span class="token punctuation">:</span> f<span class="token string">'Bearer {API_KEY}'</span><span class="token punctuation">,</span>
    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># 构建请求数据，这里以发送一个简单的聊天消息为例</span>
payload <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"你好，你是谁"</span><span class="token punctuation">,</span>
  <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"chat"</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true"># 发送POST请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>API_ENDPOINT<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> json<span class="token operator">=</span>payload<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 检查响应状态码</span>
<span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 请求成功，处理响应数据</span>
    chat_response <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"聊天响应："</span><span class="token punctuation">,</span> chat_response<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 请求失败，打印错误信息</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请求失败，状态码："</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误信息："</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2025/01/04/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%8F%8ARAG%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/python%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.jpg" alt="python脚本测试结果"></p>
<ul>
<li>如上图，返回了json数据，textResponse是大模型的回答，sources是查找到的文本（当然测试问题很简单它肯定找不到符合的内容了），可以用函数专门提取对应的内容进行想要的处理。</li>
<li>至此就实现了API调用功能。</li>
</ul>
<h1 id="🔥总结和展望"><a href="#🔥总结和展望" class="headerlink" title="🔥总结和展望"></a>🔥总结和展望</h1><ul>
<li>该方案基本功能都实现了并做了初步的调试，通过本次尝试，我对LLM部署和RAG框架构建有了初步的认识，市面上的免费方案确实已经足够方便又快捷。</li>
<li>后续可以对各种参数和选择进行修改以调出更好的效果；或者尝试在树莓派等边缘设备的部署效果；以及尝试在具体大小项目中使用该LLM或者RAG。</li>
<li>当然，这个方案足够简便的同时自由度是有限的，要想有更细致的参数可调可以选择hugging face社区的一些方案来搭建RAG、微调模型，以进行更深入地学习。</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>Python</tag>
        <tag>RAG</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DQN的机器人自动走迷宫（2）</title>
    <url>/2025/01/01/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://github.com/LegendLeoChen/LeoMazeRobot">github仓库</a><br>需要先阅读本文所基于的上一个工作：<a href="/2024/09/26/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/" title="基于DQN的机器人自动走迷宫">基于DQN的机器人自动走迷宫</a></p>
<ul>
<li>上次使用已有的库完成走迷宫任务的方案，需要通过获取全图视野来生成完美轨迹样本来进行训练，但是效果也是立竿见影。</li>
<li>但是很多时候没有办法把获取这样的完美样本，需要智能体从起点开始完全自主摸索获取轨迹样本，然后训练，所以本文尝试不使用全图视野获取来训练。<span id="more"></span></li>
<li>注意：整体的DQN算法机制和上一篇是一样的，只是有很多改进用来适应没有完美样本的情况，具体实现方法也不一样。</li>
</ul>
<h1 id="🔥实现"><a href="#🔥实现" class="headerlink" title="🔥实现"></a>🔥实现</h1><p>本次通过PyQT5搭建可视化界面显示迷宫，然后手动实现了迷宫环境、智能体、训练函数等全方面内容。并不会展示所有代码，详见github仓库。</p>
<h2 id="迷宫环境及奖励机制"><a href="#迷宫环境及奖励机制" class="headerlink" title="迷宫环境及奖励机制"></a>迷宫环境及奖励机制</h2><ul>
<li>首先加载迷宫，迷宫本身是用二维矩阵表示的，存于txt当中，0表示可以走的路，1表示障碍物，2表示起点。</li>
<li>状态空间是xy坐标，也就是2个，动作空间就是上下左右4个。</li>
<li>奖励机制：<ul>
<li>首先就是基本的移动操作判断，撞墙是会发生的，暂时不采取直接筛选非撞墙方向的方案。</li>
<li>接着是探索奖励，采用了寻访计数，用二维数组<code>self.explored</code>记录到达地图所有位置的次数，到达新位置给一些奖励，重复到达给惩罚，注意这种方法相当于把撞墙检测和反复横跳的情况统一起来，防止出现智能体为了不撞墙而反复横跳保持局部最优的问题，使之能够尽可能多探索。</li>
<li>然后检测完终点后，到达终点给予大额奖励，反之给予小的常规惩罚。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MazeEnv</span><span class="token punctuation">(</span>gym<span class="token punctuation">.</span>Env<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>MazeEnv<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maze <span class="token operator">=</span> utils<span class="token punctuation">.</span>load_map<span class="token punctuation">(</span><span class="token string">'map.txt'</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 加载迷宫地图</span>
        self<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true"># 起点位置</span>
        self<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 终点位置</span>
        self<span class="token punctuation">.</span>agent_position <span class="token operator">=</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>start<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 当前智能体位置</span>
        self<span class="token punctuation">.</span>action_space <span class="token operator">=</span> gym<span class="token punctuation">.</span>spaces<span class="token punctuation">.</span>Discrete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 动作空间 上下左右 4个动作</span>
        self<span class="token punctuation">.</span>observation_space <span class="token operator">=</span> gym<span class="token punctuation">.</span>spaces<span class="token punctuation">.</span>Box<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> high<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 状态空间 xy坐标 2</span>
        self<span class="token punctuation">.</span>explored <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 访问计数（到过的位置就+1）</span>

    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    <span class="token comment" spellcheck="true"># 重置智能体位置、访问计数清零</span>
        self<span class="token punctuation">.</span>agent_position <span class="token operator">=</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>start<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>explored <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_get_observation<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>                             <span class="token comment" spellcheck="true"># 动作并获取回报</span>
        col<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>agent_position<span class="token punctuation">]</span>
        reward <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token triple-quoted-string string">''' 移动操作 '''</span>
        <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 向上</span>
            self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 向下</span>
            self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 向左</span>
            self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> action <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 向右</span>
            self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token triple-quoted-string string">''' 探索奖励 '''</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>explored<span class="token punctuation">[</span>self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 到新位置给小奖励</span>
            reward <span class="token operator">+=</span> <span class="token number">20.0</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true"># 重复到达给惩罚</span>
            reward <span class="token operator">-=</span> <span class="token number">10.0</span> <span class="token operator">+</span> <span class="token number">5.0</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>explored<span class="token punctuation">[</span>self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>explored<span class="token punctuation">[</span>self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>agent_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true"># 寻访计数</span>
        <span class="token triple-quoted-string string">''' 终点检测 '''</span>
        done <span class="token operator">=</span> tuple<span class="token punctuation">(</span>self<span class="token punctuation">.</span>agent_position<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>end
        <span class="token triple-quoted-string string">''' 常规奖励 '''</span>
        <span class="token keyword">if</span> done<span class="token punctuation">:</span>
            reward <span class="token operator">+=</span> <span class="token number">20000</span>         <span class="token comment" spellcheck="true"># 到达终点给予大量正奖励</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            reward <span class="token operator">-=</span> <span class="token number">5.0</span>           <span class="token comment" spellcheck="true"># 基础的每步惩罚，鼓励尽快找到终点</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_get_observation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Q-网络"><a href="#Q-网络" class="headerlink" title="Q 网络"></a>Q 网络</h2><ul>
<li>结构很简单，就是多层全连接网络。输入状态空间，输出动作空间。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    self<span class="token punctuation">.</span>input_hidden <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>state_size<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>final_fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> action_size<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="智能体"><a href="#智能体" class="headerlink" title="智能体"></a>智能体</h2><ul>
<li>首先是各种超参数，注释中有说明，要调主要还是探索率衰减、学习率为主。</li>
<li>探索率衰减值得足够接近1，毕竟每走一步都要衰减，不能衰减太快。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DQNAgent</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state_size<span class="token punctuation">,</span> action_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>state_size <span class="token operator">=</span> state_size
        self<span class="token punctuation">.</span>action_size <span class="token operator">=</span> action_size
        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 经验回放池</span>
        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> <span class="token number">0.90</span>                   <span class="token comment" spellcheck="true"># 折扣因子</span>
        self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token comment" spellcheck="true"># 探索率</span>
        self<span class="token punctuation">.</span>epsilon_min <span class="token operator">=</span> <span class="token number">0.1</span>              <span class="token comment" spellcheck="true"># 最小探索率</span>
        self<span class="token punctuation">.</span>epsilon_decay <span class="token operator">=</span> <span class="token number">0.9995</span>         <span class="token comment" spellcheck="true"># 探索率衰减</span>
        self<span class="token punctuation">.</span>learning_rate <span class="token operator">=</span> <span class="token number">0.002</span>          <span class="token comment" spellcheck="true"># 网络的学习率</span>
        self<span class="token punctuation">.</span>model <span class="token operator">=</span> DQN<span class="token punctuation">(</span>state_size<span class="token punctuation">,</span> action_size<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Q网络</span>
        self<span class="token punctuation">.</span>target_model <span class="token operator">=</span> DQN<span class="token punctuation">(</span>state_size<span class="token punctuation">,</span> action_size<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 目标网络</span>
        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>self<span class="token punctuation">.</span>learning_rate<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>                      <span class="token comment" spellcheck="true"># 计数，用于更新目标网络</span>
        self<span class="token punctuation">.</span>update_rate <span class="token operator">=</span> <span class="token number">10</span>               <span class="token comment" spellcheck="true"># 更新目标网络频率</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>然后是回放池用的收集数据的函数，就是把状态、动作、奖励、是否结束、下一状态都保存起来。</li>
<li>以及选取动作的ε-贪婪算法，由于测试环节是不需要ε的，所以可以选择是否使用ε。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">remember</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 新的数据加入经验回放池</span>
        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">act</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                         <span class="token comment" spellcheck="true"># ε-贪婪算法选取动作</span>
        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>epsilon <span class="token operator">and</span> epsilon<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机</span>
            <span class="token keyword">return</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action_size<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
        state <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            q_values <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>state<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 贪婪</span>
        <span class="token keyword">return</span> q_values<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>然后是学习，也就是训练的<strong>核心部分</strong>，首先从回放池采batch数据，然后变一下形状等，就可以前向传播、计算Q值，然后求得损失反向传播等操作和深度学习常规流程就一样了。</li>
<li>最后还有注意更新目标网络，每隔一段时间就复制一次参数到目标网络。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">replay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 训练学习</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">)</span> <span class="token operator">&lt;</span> batch_size<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token triple-quoted-string string">''' 采样 + 数据处理 '''</span>
        minibatch <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>
        states<span class="token punctuation">,</span> next_states<span class="token punctuation">,</span> rewards<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> dones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done <span class="token keyword">in</span> minibatch<span class="token punctuation">:</span>
            states<span class="token punctuation">.</span>append<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            next_states<span class="token punctuation">.</span>append<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>next_state<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            rewards<span class="token punctuation">.</span>append<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span>reward<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            actions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            dones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span>done<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        states <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>states<span class="token punctuation">)</span>
        next_states <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>next_states<span class="token punctuation">)</span>
        rewards <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>rewards<span class="token punctuation">)</span>
        actions <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>actions<span class="token punctuation">)</span>
        dones <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>dones<span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">''' 前向传播 + Q值及其目标值计算 '''</span>
        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
        Q_expect <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> actions<span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">)</span>
        Q_targets <span class="token operator">=</span> rewards <span class="token operator">+</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> self<span class="token punctuation">.</span>target_model<span class="token punctuation">(</span>next_states<span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> dones<span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">''' 反向传播 + 参数更新 '''</span>
        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 梯度清零</span>
        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>criterion<span class="token punctuation">(</span>Q_expect<span class="token punctuation">,</span> Q_targets<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 损失</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># 反向传播</span>
        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 参数更新</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">%</span> self<span class="token punctuation">.</span>update_rate <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 目标网络参数更新</span>
            self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>epsilon <span class="token operator">></span> self<span class="token punctuation">.</span>epsilon_min<span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># epsilon衰减</span>
            self<span class="token punctuation">.</span>epsilon <span class="token operator">*=</span> self<span class="token punctuation">.</span>epsilon_decay
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="UI界面"><a href="#UI界面" class="headerlink" title="UI界面"></a>UI界面</h2><ul>
<li>用PyQT5实现，就是实时显示绘制迷宫，然后显示智能体的位置。这方面是专门的知识，以下展示部分函数。</li>
<li><code>replace_position</code>：更新智能体位置，要抹除迷宫中智能体之前的位置。</li>
<li><code>drawLines</code>：绘制迷宫、终点、智能体。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">replace_position</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list1<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 找到迷宫中智能体的位置</span>
        pos1 <span class="token operator">=</span> None
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
                    pos1 <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                    <span class="token keyword">break</span>
            <span class="token keyword">if</span> pos1<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        list1<span class="token punctuation">[</span>pos1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment" spellcheck="true"># 抹除旧的智能体位置</span>
        list1<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>       <span class="token comment" spellcheck="true"># 新的智能体位置</span>
        <span class="token keyword">return</span> list1
    <span class="token keyword">def</span> <span class="token function">drawLines</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> maze<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 具体绘制</span>
        cell_size <span class="token operator">=</span> <span class="token number">60</span>                      <span class="token comment" spellcheck="true"># 每个格子的宽和高</span>
        <span class="token comment" spellcheck="true"># 终点</span>
        qp<span class="token punctuation">.</span>setPen<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>NoPen<span class="token punctuation">)</span>
        qp<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>QBrush<span class="token punctuation">(</span>QColor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SolidPattern<span class="token punctuation">)</span><span class="token punctuation">)</span>
        qp<span class="token punctuation">.</span>drawRect<span class="token punctuation">(</span>int<span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> cell_size<span class="token punctuation">,</span> cell_size<span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">''' 遍历迷宫矩阵 '''</span>
        <span class="token keyword">for</span> j<span class="token punctuation">,</span> row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i<span class="token punctuation">,</span> cell <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> cell <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 墙体绘制，实心线</span>
                    <span class="token keyword">if</span> j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        <span class="token keyword">continue</span>
                    <span class="token keyword">elif</span> j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 横墙</span>
                        qp<span class="token punctuation">.</span>setPen<span class="token punctuation">(</span>QPen<span class="token punctuation">(</span>QColor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        qp<span class="token punctuation">.</span>drawLine<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>j <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>j <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">elif</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 竖墙</span>
                        qp<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>QBrush<span class="token punctuation">(</span>QColor<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SolidPattern<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        qp<span class="token punctuation">.</span>drawLine<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>j <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>j <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">elif</span> cell <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 智能体，实心圆形</span>
                    qp<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>QBrush<span class="token punctuation">(</span>QColor<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>SolidPattern<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    qp<span class="token punctuation">.</span>drawEllipse<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> cell_size<span class="token punctuation">)</span><span class="token punctuation">,</span> cell_size<span class="token punctuation">,</span> cell_size<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="训练主函数"><a href="#训练主函数" class="headerlink" title="训练主函数"></a>训练主函数</h2><ul>
<li>前面主要是参数设置、定义对象、设置一些记录用的变量。</li>
<li>然后迭代时，将迭代数<code>episodes </code>分为若干波<code>rounds</code>方便进度条一波一波地显示。</li>
<li>每一代都让智能体最多走30格，因为当前设置的目的地走7步正常就能到了。</li>
<li>每一代<strong>核心流程</strong>就是动作（<code>act</code>函数）、获取回报（<code>step</code>函数）、存入经验池（<code>remember</code>函数）、策略网络学习（<code>replay</code>函数），中间保持UI的更新、进度条的更新还有一些结果的记录就行了。</li>
<li>每代训练完都进行<strong>测试</strong>，看看能不能在最少的步数到达目的地，成功则记录次数，当次数到达足够多就可以停止，绘制平均奖励曲线，如果奖励曲线收敛，则可以比较有把握地认为任务收敛。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> next_state
    env <span class="token operator">=</span> MazeEnv<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 定义迷宫环境</span>
    state_size <span class="token operator">=</span> np<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 状态空间，xy坐标，即2</span>
    action_size <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n                    <span class="token comment" spellcheck="true"># 动作空间，上下左右，即4</span>
    agent <span class="token operator">=</span> DQNAgent<span class="token punctuation">(</span>state_size<span class="token punctuation">,</span> action_size<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 定义智能体</span>
    batch_size <span class="token operator">=</span> <span class="token number">64</span>         <span class="token comment" spellcheck="true"># 批次大小</span>
    episodes <span class="token operator">=</span> <span class="token number">1000</span>         <span class="token comment" spellcheck="true"># 总迭代数</span>
    rounds <span class="token operator">=</span> <span class="token number">20</span>             <span class="token comment" spellcheck="true"># 迭代数平均分为若干波</span>
    epoch <span class="token operator">=</span> <span class="token number">0</span>               <span class="token comment" spellcheck="true"># 记录当前迭代数</span>
    return_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 记录每代回报</span>
    success <span class="token operator">=</span> <span class="token number">0</span>             <span class="token comment" spellcheck="true"># 成功次数（训练）</span>
    succ_test <span class="token operator">=</span> <span class="token number">0</span>           <span class="token comment" spellcheck="true"># 成功次数（测试）</span>

    <span class="token triple-quoted-string string">''' 迭代次数分为 rounds 波统计 '''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rounds<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>int<span class="token punctuation">(</span>episodes <span class="token operator">/</span> rounds<span class="token punctuation">)</span><span class="token punctuation">,</span> desc<span class="token operator">=</span>f<span class="token string">'波数 {i + 1} / {rounds}'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pbar<span class="token punctuation">:</span>
            <span class="token triple-quoted-string string">''' 每一波（一代代循环） '''</span>
            <span class="token keyword">for</span> e <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>episodes <span class="token operator">/</span> rounds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                epoch <span class="token operator">+=</span> <span class="token number">1</span>
                episode_return <span class="token operator">=</span> <span class="token number">0</span>
                state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token triple-quoted-string string">''' 采样和训练环节  每一代（一步步循环） '''</span>
                <span class="token keyword">for</span> time <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    action <span class="token operator">=</span> agent<span class="token punctuation">.</span>act<span class="token punctuation">(</span>state<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 动作</span>
                    next_state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 回报、下一个状态、是否到达</span>
                    episode_return <span class="token operator">+=</span> reward                            <span class="token comment" spellcheck="true"># 本次迭代总回报</span>
                    pw<span class="token punctuation">.</span>wid3<span class="token punctuation">.</span>update_maze<span class="token punctuation">(</span>next_state<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 更新迷宫UI</span>
                    action_dict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"↑"</span><span class="token punctuation">,</span> <span class="token string">"↓"</span><span class="token punctuation">,</span> <span class="token string">"←"</span><span class="token punctuation">,</span> <span class="token string">"→"</span><span class="token punctuation">]</span>
                    <span class="token comment" spellcheck="true"># print(f'{action_dict[action]}', end="")</span>
                    agent<span class="token punctuation">.</span>remember<span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 更新经验回放池</span>
                    <span class="token keyword">if</span> done<span class="token punctuation">:</span>                                    <span class="token comment" spellcheck="true"># 到达终点，记录成功次数</span>
                        success <span class="token operator">+=</span> <span class="token number">1</span>
                        <span class="token keyword">break</span>
                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>agent<span class="token punctuation">.</span>memory<span class="token punctuation">)</span> <span class="token operator">></span> batch_size<span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 训练</span>
                        agent<span class="token punctuation">.</span>replay<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>

                return_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>episode_return<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 记录每代回报</span>
                <span class="token triple-quoted-string string">''' 测试环节 '''</span>
                state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>
                path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                       <span class="token comment" spellcheck="true"># 单次测试的路径</span>
                <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true"># 最短步数内能否到达终点</span>
                    action <span class="token operator">=</span> agent<span class="token punctuation">.</span>act<span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
                    state<span class="token punctuation">,</span> _<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>
                    <span class="token keyword">if</span> done<span class="token punctuation">:</span>
                        succ_test <span class="token operator">+=</span> <span class="token number">1</span>
                        <span class="token keyword">if</span> succ_test <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>                      <span class="token comment" spellcheck="true"># 累计到达若干次，则结束训练退出</span>
                            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>agent<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'DQN.pth'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 保存权重</span>
                            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>agent<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'DQN-target.pth'</span><span class="token punctuation">)</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"训练完成！成功找到路径！权重已保存。步数：{t}，路径为{path}"</span><span class="token punctuation">)</span>
                            utils<span class="token punctuation">.</span>draw_image<span class="token punctuation">(</span>return_list<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 绘制回报曲线</span>
                            <span class="token keyword">return</span>
                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">)</span>
                <span class="token triple-quoted-string string">''' 更新进度条和UI显示（UI更新开了可能会卡死，所以注释了） '''</span>
                recent_mean <span class="token operator">=</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>return_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 近期回报均值</span>
                <span class="token comment" spellcheck="true"># pw.set_data(r=i + 1, rounds=rounds, epoch=epoch,</span>
                <span class="token comment" spellcheck="true">#             result=recent_mean, success=success, success_test=succ_test)</span>
                pbar<span class="token punctuation">.</span>set_postfix<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'迭代数'</span><span class="token punctuation">:</span> <span class="token string">'%d'</span> <span class="token operator">%</span> epoch<span class="token punctuation">,</span> <span class="token string">'平均回报'</span><span class="token punctuation">:</span> <span class="token string">'%d'</span> <span class="token operator">%</span> recent_mean<span class="token punctuation">,</span>
                                  <span class="token string">'训练成功次数'</span><span class="token punctuation">:</span> <span class="token string">'%d'</span> <span class="token operator">%</span> success<span class="token punctuation">,</span> <span class="token string">'测试成功次数'</span><span class="token punctuation">:</span> <span class="token string">'%d'</span> <span class="token operator">%</span> succ_test<span class="token punctuation">}</span><span class="token punctuation">)</span>
                pbar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"训练结束，但未找到路径。"</span><span class="token punctuation">)</span>
    utils<span class="token punctuation">.</span>draw_image<span class="token punctuation">(</span>return_list<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 绘制回报曲线</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥效果"><a href="#🔥效果" class="headerlink" title="🔥效果"></a>🔥效果</h1><ul>
<li>训练过程（最终完成收敛的情况）演示：<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"/2025/01/01/基于DQN的机器人自动走迷宫（2）/训练完成.mp4","pic":"训练完成.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>
<li>训练结果，这次训练明显有很不错的收敛。<br><img src="/2025/01/01/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB%EF%BC%882%EF%BC%89/%E8%AE%AD%E7%BB%83%E5%AE%8C%E6%88%90.jpg" alt="训练结果"></li>
</ul>
<h1 id="🔥总结和思考"><a href="#🔥总结和思考" class="headerlink" title="🔥总结和思考"></a>🔥总结和思考</h1><ul>
<li>DQN在不获取全局视野作为训练样本的情况下，纯靠从起点开始移动探索，<strong>很容易不收敛</strong>，需要对奖励模型、超参数等做优化。</li>
<li>在前期ε很大的情况下如果能多碰巧到达终点累积成功样本，会增加收敛的可能性，反之前期很少成功则，大概率不收敛。这也意味着在终点比较远或者地图大且复杂时很难收敛，或者至少时间成本会很高。展示的结果算是比较理想的情况，虽然不算少见但是不能像训练纯深度学习那样稳健。</li>
<li>对于<strong>奖励规则</strong>，应该尽可能引导智能体不去陷入撞墙、反复横跳等局部最优，所以应该对这些情况给予惩罚，当前本项目用了寻访计数来存储已经到过的位置，用来奖励新的探索并惩罚到旧的位置，效果还是有提升的。而奖励规则设计本身还是挺靠想象、主观经验感受的。</li>
<li><strong>经验回放池</strong>使用队列存储，而大部分的样本都是不成功的，好的样本终究会出列，所以经验回访池里面的样本中保持的正样本量太少，抽取batch时不容易抽到，这也是收敛速度低迷的原因，所以后续还可以改进机制，尽可能多存成功的样本。</li>
<li>所以<strong>是否能获取全局视野</strong>，在训练开始时就能获取很好的样本至关重要，这可能与实际应用场景的要求有关，能获取应该尽量获取。</li>
<li>再有就是可能DQN本身还是优先的，可以用更复杂的改进版本或者Actor-Critic等框架来提升效果。</li>
<li>本工作算是对以DQN为代表的<strong>离散任务</strong>的强化学习的一个尝试，能够初步地全面地认识强化学习算法。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
        <tag>神经网络</tag>
        <tag>DQN</tag>
        <tag>PyQT5</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型基础知识</title>
    <url>/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="🔥大语言模型（LLMs）是什么"><a href="#🔥大语言模型（LLMs）是什么" class="headerlink" title="🔥大语言模型（LLMs）是什么"></a>🔥大语言模型（LLMs）是什么</h1><p>大模型：一般指1亿以上参数的模型，但是这个标准一直在升级，目前万亿参数以上的模型 (eg: MinMax abab6.5)也有了。大语言模型(Large Language Models，LLMs) 是针对语言的大模型。<br>大语言模型的关键特点包括:<span id="more"></span></p>
<ol>
<li><strong>大规模参数</strong>：LLMs拥有大量参数(如GPT-3的175B或PaLM的540B),参数数量越多，模型对语言的捕捉能力越强，可以更好地理解上下文和生成流畅的语言。</li>
<li><strong>多任务处理能力</strong>：经过训练后，LMS具备在多种语言任务上表现良好的能力，例如文本摘要、情感分析、机器翻译等。这是因为它们学会了在大数据集上归纳出各种语言模式和规律。</li>
<li><strong>上下文理解</strong>：LLM5可以根据上下文生成有逻辑和连贯的回应，这使得它们特别适合对话和内容创作任务。模型可以“记住”一段对话中的重要细节，并在后续对话中保持一致性。</li>
<li><strong>自监督学习</strong>：大语言模型主要依赖自监督学习，使用未标注的数据进行训练，通过预测下一个词、填补空白或匹配句子等方式来学习语言结构。</li>
<li><strong>通用性和可扩展性</strong>：LLMs可以迁移到多种任务和领域，经过少量微调就能在专门的任务(如医学文本分析或法律文件摘要)中发挥作用。</li>
</ol>
<p>尽管大语言模型在许多任务上表现出色，但它们也有一些局限性，比如生成错误信息、偏见问题以及需要高昂的计算资源。</p>
<h1 id="🔥大语言模型按预训练任务分类："><a href="#🔥大语言模型按预训练任务分类：" class="headerlink" title="🔥大语言模型按预训练任务分类："></a>🔥大语言模型按预训练任务分类：</h1><ul>
<li>自回归语言模型：GPT为代表，仅通过前文预测下一个词，适合生成任务。</li>
<li>自编码语言模型：BERT为代表，通过掩码预测被遮挡的词，适合理解和任务分类。</li>
<li>序列到序列语言模型：如T5、BART等，既可以生成文本也可以完成理解任务，在机器翻译、文本生成场景中有广泛应用。</li>
</ul>
<h1 id="🔥主流的LLMs开源模型体系"><a href="#🔥主流的LLMs开源模型体系" class="headerlink" title="🔥主流的LLMs开源模型体系"></a>🔥主流的LLMs开源模型体系</h1><p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%B8%BB%E6%B5%81LLMs%E5%BC%80%E6%BA%90%E6%A8%A1%E5%9E%8B%E4%BD%93%E7%B3%BB.jpg" alt="主流LLMs开源模型体系"></p>
<ul>
<li>Encoder-Decoder：<ul>
<li>经典结构，编码器端用<strong>双向自注意力</strong>进行编码，在解码器用<strong>交叉注意力</strong>与<strong>单向注意力掩码</strong>机制，通过<strong>自回归</strong>方式进行生成。编码器内，前面的token也能知道后面的token，而解码器中token不能知道其前面的token。</li>
<li>适用于偏理解的NLP任务。</li>
<li>长文本生成任务差，训练效率低。</li>
</ul>
</li>
<li>Causal Decoder：<ul>
<li>GPT为代表，使用<strong>单向注意力掩码</strong>，每个token只能看到前面的token和本身，输入输出只有解码器以<strong>相同方式</strong>处理。</li>
<li>适用于文本生成任务。</li>
<li>训练效率高，zero-shot能力强，具有涌现能力。</li>
</ul>
</li>
<li>Prefix Decoder：<ul>
<li>GLM为代表，参考编解码器架构，前缀解码器对输入进行<strong>双向注意力</strong>编码，对输出则使用<strong>单向注意力掩码</strong>（token只知道前面的token）进行自回归预测。</li>
<li>适用于文本生成任务。</li>
</ul>
</li>
</ul>
<h1 id="🔥LLMs常见的预训练任务"><a href="#🔥LLMs常见的预训练任务" class="headerlink" title="🔥LLMs常见的预训练任务"></a>🔥LLMs常见的预训练任务</h1><ul>
<li>语言建模（LM）：<ul>
<li>根据给定序列<strong>预测下一个词元</strong>，使用似然函数进行优化。可以视为一种多任务学习。</li>
<li>比如在“这部电影剧情饱满，演员表演也很棒，非常好看”的预测中，“好看”就是模型<strong>对情感进行分析</strong>；对于“小明有三块糖，给了小红两块，还剩下一块”，“一块”就是<strong>对数学算术进行学习</strong>。这样的例子还有很多。</li>
<li>训练效率：Prefix Decoder &lt; Causal Decoder，后者在所有token上计算损失，前者仅在输出上算损失。</li>
</ul>
</li>
<li>去噪自编码（DAE）：<ul>
<li>在BERT中是经典的一个方法，对输入文本进行一系列<strong>随机替换</strong>或<strong>删除</strong>操作，形成“损坏”的文本，模型就需要恢复出被替换或删除的词元片段。</li>
<li>比语言建模更复杂，需要额外的优化策略，如替换词元的策略、替换片段长度、替换的比例等，会影响训练效果。</li>
</ul>
</li>
<li>混合去噪器（MoD）：<ul>
<li>结合语言建模和去噪自编码，把两者视为不同类型的去噪任务，进行统一建模。</li>
</ul>
</li>
</ul>
<h1 id="🔥LLMs的涌现能力与scaling-law"><a href="#🔥LLMs的涌现能力与scaling-law" class="headerlink" title="🔥LLMs的涌现能力与scaling law"></a>🔥LLMs的涌现能力与scaling law</h1><p>涌现能力：当一个复杂系统由很多微小个体构成，这些微小的个体凑在一起，相互作用，当数量足够多时，就可以在宏观层面展现出微观个体无法解释的特殊现象，类似“量变引起质变”。<br><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%B6%8C%E7%8E%B0%E7%8E%B0%E8%B1%A1%E4%B8%8Escaling_law%E7%8E%B0%E8%B1%A1.jpg" alt="涌现现象与scaling law现象"><br>为什么LLMs会有涌现能力：</p>
<ul>
<li><strong>任务评价指标不够平滑</strong>，如上图左，就可以对于精确匹配任务（输出答案和真实答案需要完全一致）的严格要求，大模型就容易出现涌现现象，分数随着参量突然猛增。像右图一样使用多选题进行训练就可以避免这种情况，训练分数逐步上涨。</li>
<li><strong>复杂任务和子任务</strong>，一个最终任务比较复杂，而它又由多个符合scaling law的子任务组成，最终任务体现为涌现。就像下国际象棋，需要多个合法且正确的移动才能完成“将死”对方的最终任务。</li>
</ul>
<h2 id="✨OpenAI对于scaling-law的观点"><a href="#✨OpenAI对于scaling-law的观点" class="headerlink" title="✨OpenAI对于scaling law的观点"></a>✨OpenAI对于scaling law的观点</h2><ul>
<li>scaling law：用计算量、数据集规模和模型规模，来预测模型最终能力。</li>
<li>当计算量、数据集规模、模型规模（参数量）三者中任意两个固定时，剩下的那个因素随指数增长，loss会线性下降。所以为了获得最佳性能，应该同时扩大三者。</li>
<li>三者的影响程度是 计算量&gt;参数量&gt;&gt;数据集规模。</li>
<li>固定计算预算下训练时，最佳性能可以通过训练参数量非常大的模型并在远离收敛前停止（早停）实现。更大的模型在样本效率方面更好，能以更少的优化步骤和使用更少数据量达到相同水平，<strong>实际应用应优先考虑大的模型</strong>。</li>
</ul>
<h2 id="✨DeepMind对于scaling-law的观点"><a href="#✨DeepMind对于scaling-law的观点" class="headerlink" title="✨DeepMind对于scaling law的观点"></a>✨DeepMind对于scaling law的观点</h2><ul>
<li>该团队认为模型大小和训练数据量都应该<strong>按相等的比例扩展</strong>。</li>
</ul>
<ol>
<li>给定FLOP预算（算力），损失函数有明显低谷值，即数据量和模型规模的选择<strong>有一个最优解</strong>。</li>
<li>计算成本最优的情况下（第1点），模型大小和训练数据量应等比值地缩放。</li>
<li>大模型训练应该更关注数据集扩展，数据高质量时，更大数据集的好处才能体现。</li>
</ol>
<h1 id="🔥幻觉"><a href="#🔥幻觉" class="headerlink" title="🔥幻觉"></a>🔥幻觉</h1><p>即一本正经地胡说八道，不符合一致性（符合用户问题要求）和真实性（符合世界知识）。</p>
<h2 id="✨为什么有幻觉"><a href="#✨为什么有幻觉" class="headerlink" title="✨为什么有幻觉"></a>✨为什么有幻觉</h2><ol>
<li>数据角度：训练数据可信度有问题，或者过多重复信息会导致模型有偏见，从而导致幻觉。</li>
<li>模型角度：<ul>
<li>模型结构，比较弱的主干会导致幻觉，LLMs一般不存在该问题。</li>
<li>解码算法，如果使用不确定性高的采样算法（更容易生成多样化文本），可能会诱导LLMs出现幻觉。</li>
<li>暴露偏差：训练和测试阶段不匹配，特别是生成长文本回复的时候。</li>
<li>参数知识：LLMs在预训练阶段记忆了错误的知识，导致幻觉。</li>
</ul>
</li>
</ol>
<h2 id="✨如何评估幻觉"><a href="#✨如何评估幻觉" class="headerlink" title="✨如何评估幻觉"></a>✨如何评估幻觉</h2><p>分为基于参考的评估和无参考的评估。</p>
<ol>
<li><strong>基于参考文本</strong>：<ul>
<li>使用参考文本或原始信息进行对比，常用指标包括ROUGE、BLEU等。</li>
<li>适用于标准化生成任务，但对于参考答案不唯一的情况灵活性就受限。</li>
</ul>
</li>
<li><strong>无参考</strong>：<ul>
<li>不使用参考答案。</li>
<li>基于信息抽取（IE）：将生成内容转为结构化知识，也就是转为三元组之类的形式后给专门的模型去评估准确性。</li>
<li>基于问答（QA）：使用问题生成模型生成QA对，然后让被测模型回答这些问题，比较两个答案即可判断。</li>
<li>基于自然语言推理（NLI）：判断生成内容是否与源信息有蕴含关系。</li>
<li>基于事实性分类指标：通过人工标注或构造包含幻觉和真实信息的数据集，训练分类模型检测LLMs生成的文本是否符合事实。</li>
<li>人工评估：最准，但最贵。</li>
</ul>
</li>
</ol>
<h2 id="✨如何缓解幻觉"><a href="#✨如何缓解幻觉" class="headerlink" title="✨如何缓解幻觉"></a>✨如何缓解幻觉</h2><ol>
<li><strong>构建高质量数据集</strong>：人工标注、自动筛选等方法。</li>
<li>模型层面：<strong>模型结构</strong>上编码更多信息、减少生成随机性、检索增强（引入外部源，联网等）；<strong>训练方式</strong>上可控文本生成、提前规划内容框架、强化学习、多任务学习、后处理等都可以抑制幻觉。</li>
</ol>
<h1 id="🔥RAG"><a href="#🔥RAG" class="headerlink" title="🔥RAG"></a>🔥RAG</h1><h2 id="✨RAG介绍"><a href="#✨RAG介绍" class="headerlink" title="✨RAG介绍"></a>✨RAG介绍</h2><p>RAG（Retrieval Augmented Generation）：作用类似搜索引擎，找到用户提问最相关的知识或对话历史，结合原始提问，创造丰富的prompt，指导模型生成准确输出。本质上是情境学习。</p>
<ul>
<li>通俗来说：<strong>RAG（检索增强生成）&#x3D; 检索技术 + LLM提示</strong></li>
<li>RAG的特点：<ol>
<li>依赖大语言模型强化信息检索和输出：单独使用RAG能力会受限，它依赖LLM来进行检索和生成。</li>
<li>与外部数据有效集成：很好地接入和利用外部数据库的资源，弥补大模型对于某个专业领域知识的不足。</li>
<li>数据隐私和安全保障：可以使用私有数据库与模型链接。</li>
<li>表现效果受多方面因素影响而异：如LLM性能、接入数据质量、检索系统本身等。</li>
</ol>
</li>
</ul>
<p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/RAG%E6%A1%86%E6%9E%B6.jpg" alt="RAG框架"></p>
<ul>
<li>RAG分为五个基本流程：知识文档准备，嵌入模型，向量数据库，查询检索，生成回答。</li>
<li>先将文本以文本块的形式输入<strong>嵌入模型</strong>（类似嵌入层的功能），嵌入模型会生成向量形式的数据库。</li>
<li>使用时，用户访问RAG，用户的问题被嵌入模型转为向量，系统从向量数据库检索相似信息，信息和用户向量结合成一个prompt提示输出给<strong>大模型</strong>再生成回答，回答也能被作为历史记录到记忆库。</li>
<li>可以看到RAG其实就是以大模型为核心的强化版搜索引擎，相当于有一个秘书为你管理对应的知识。也可以看到如果RAG没有大模型也是能搜索信息并返回的，但是少了大模型的理解整合，效果势必是有限的。</li>
</ul>
<h2 id="✨评价RAG的好坏"><a href="#✨评价RAG的好坏" class="headerlink" title="✨评价RAG的好坏"></a>✨评价RAG的好坏</h2><ol>
<li>检索环节的评估：<ul>
<li>MRR平均倒数排名：常用于衡量搜索引擎、推荐系统等根据查询返回多个结果中的相关性。MRR值越高就越好，说明最相关的结果最有可能出现在更前的位置，反之亦然。</li>
<li>Hits Rate命中率：前k项中包含正确信息项的比例。</li>
<li>NDCG：DCG的思想，即高关联度结果比一般关联度结果更影响最终指标得分，且高关联度结果排序越靠前，指标越高。</li>
</ul>
</li>
<li>生成环节的评估：<ul>
<li>非量化：相关性、完整性、正确性</li>
<li>量化 Rouge-L：用于评价文本生成质量的指标，常用于自动摘要、机器翻译、文本生成等任务。底层原理是通过<strong>最长公共子序列</strong>来计算生成文本和参考文本的相似性（参考文本来自于专家人工编写），通过统计二者重叠基本单元数（n元语法、词序列等）来评估效果。</li>
</ul>
</li>
</ol>
<h2 id="✨RAG的优化策略"><a href="#✨RAG的优化策略" class="headerlink" title="✨RAG的优化策略"></a>✨RAG的优化策略</h2><h3 id="知识文档准备阶段"><a href="#知识文档准备阶段" class="headerlink" title="知识文档准备阶段"></a>知识文档准备阶段</h3><ol>
<li>数据清洗：<ul>
<li>基本文本清理：格式规范、去除特殊字符、去除冗余信息。</li>
<li>实体解析：消除实体和术语的歧义以实现一致引用。如将“LLM”、“大语言模型”等标准化为统一术语。</li>
<li>文档划分：合理划分不同主题文档，如果人类不能很好判断那个文档可能与问题相关，那么系统也做不到。</li>
<li>数据增强：同义词、解释语句的增加来增强多样性。</li>
<li>用户反馈循环：基于用户反馈更新数据库，标记真实性。</li>
<li>时间敏感数据：常更新的数据，要删除或更新过期内容。</li>
</ul>
</li>
<li>分块处理：<ul>
<li>方块方法：<ul>
<li>固定大小块：简单直接，计算资源要求低；</li>
<li>按内容分块：按标点符号等分割，可以调NLTK等库；</li>
<li>递归分块：大多数情况<strong>推荐</strong>，由大到小递归地分割，直到子块大小合适；</li>
<li>从小到大分块：大小分块都保留并分级，存储空间大；</li>
<li>特殊结构分块：可以根据结构化内容专门分割（如Markdown、Latex、编程语言等文件）。</li>
</ul>
</li>
<li>分块大小：<ul>
<li>不同嵌入模型有其最佳的分块大小。</li>
<li>长文本（如书籍）适合大分块，短文本（如媒体帖子）适合小分块。</li>
<li>用户通常查询内容长且复杂就适合大分块，反之亦然。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="嵌入模型阶段"><a href="#嵌入模型阶段" class="headerlink" title="嵌入模型阶段"></a>嵌入模型阶段</h3><ul>
<li>嵌入模型：<ul>
<li>word2vec：基于词向量，将文本转化为向量表示，常用于文本分类、文本聚类等任务，但是没法理解一词多义，词向量完全静态。</li>
<li>BERT：一个词在不同语境下会有不同的词向量表示。</li>
<li>推荐hugging face推出的嵌入模型排行榜MTEB，直接拿合适的用比较好，微调太费劲。</li>
</ul>
</li>
</ul>
<h3 id="向量数据库阶段"><a href="#向量数据库阶段" class="headerlink" title="向量数据库阶段"></a>向量数据库阶段</h3><ul>
<li>元数据：某些向量数据库支持将向量与<strong>元数据</strong>关联，元数据就是如日期、标签、章节号等信息，相当于为向量添加tag，能有效提高检索效率。</li>
</ul>
<h3 id="查询索引阶段"><a href="#查询索引阶段" class="headerlink" title="查询索引阶段"></a>查询索引阶段</h3><p>1-2都是讲怎么索引，怎么搜索；3讲的是怎么转换查询；4是一些可调的参数；5是进阶的高级策略；6是对结果的排序进行优化。</p>
<ol>
<li>多级索引<ul>
<li>元数据无法区分不同上下文类型的情况下，可以使用多重索引技术。</li>
<li>多重索引技术的核心是将庞大的数据按需求分类，在不同层级中组织，以实现更有效的关理和检索。</li>
<li>需要引入<strong>多级路由机制</strong>，如“最新上映的科幻电影”，RAG就会路由到专门处理热点话题的索引，然后在利用专注于娱乐、影视的索引来生成相关推荐。</li>
</ul>
</li>
<li>索引&#x2F;查询算法<ul>
<li>聚类：将向量点划分区域（簇），查询时只需要查询距离目标向量最接近的簇即可。<br><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%8D%E7%BD%AE%E6%95%8F%E6%84%9F%E5%93%88%E5%B8%8C.jpg" alt="位置敏感哈希"></li>
<li>位置敏感哈希：传统哈希是key和value一一对应，而位置敏感哈希需要增加<strong>输出值碰撞的概率</strong>，哈希值相同的向量被分到同一个<strong>桶（bucket）</strong>当中，越相近的向量越可能被分到同一个桶。搜索时只需要获取目标向量的哈希值（key），找到对应桶进行二次搜索即可。</li>
<li>量化乘积：面对大数据的内存开销问题，希望削减数据的大小，比如在聚类的簇当中，用中心点表示整个簇的所有向量（虽然有区别但是损失可接受）。</li>
<li>分层导航小世界：类似六度分隔理论（认识任何一个陌生人最多经过6个人），构建一个图存储向量，查询时从某个点开始，查找其邻接节点中最接近目标向量的节点，然后对该节点也这么做，直到某节点周围节点不存在比它更接近目标的时候，就是我们要找的向量。</li>
</ul>
</li>
<li>查询转换<br>  也就是通过<strong>重写查询措辞</strong>来提升召回效果。<ul>
<li>结合历史对话进行重新表述：直接用LLM重新表述，或将历史对话信息和用户提问一起个LLM重新表述。</li>
<li>假设文档嵌入：让LLM在没有外部数据库的情况下对用户信息进行<strong>假设性回复</strong>，将该回复和提问一同用于检索。</li>
<li>退后提示：查询信息太复杂或者太宽泛，可以抽象为一个更简单的问题，然后和原始问题一起用于检索。</li>
<li>多查询检索&#x2F;多路召回：使用LLM生成多个搜索查询，适用于一个大问题蕴含多个子问题。</li>
</ul>
</li>
<li>检索参数<br>  可以根据向量库数据设置<strong>优化检索参数</strong>，也就是调参了。<ul>
<li>稀疏和稠密搜索权重：稠密搜索是用向量搜索，稀疏搜索是通过字符串关键字匹配进行搜索（稀有词通常作为关键词），通过<strong>设置权重</strong>结合两者搜索得分来返回检索内容。</li>
<li>结果数量topK：提供k个检索结果，确保覆盖用户查询要求的各个方面。</li>
<li>相似度度量：计算两个向量相似度（欧式距离、Jaccard距离、余弦相似度等），<strong>余弦相似度</strong>不受向量长度影响，比较好。</li>
</ul>
</li>
<li>高级检索策略<ul>
<li>上下文压缩：对<strong>长文档</strong>内容进行压缩，或者对返回结果过滤。</li>
<li>句子窗口搜索：将搜索到的<strong>太短分块</strong>周围的分块一并作为上下文给LLM，增强LLM理解。</li>
<li>父文档搜索：主文档分割为更短的子文档，用户问题会先匹配子文档，在将子文档的父文档和用户提问一起发给LLM。</li>
<li>自动合并：比父文档搜索更复杂，就是可以分成<strong>三层树状结</strong>构，搜索是匹配叶子结点，当某个父节点的多数叶子节点都匹配查询内容时就返回该父节点。</li>
<li>多向量检索：向量库存储信息格式是多向量而非单向量，<strong>额外包括</strong>了文档摘要、用户可能的问题等不同方面信息辅助检索。</li>
<li>多代理检索：结合之前提到的所有优化策略中的某几种，比如同时使用多向量检索和多级检索。</li>
<li>self-RAG：自反思搜索增强，通过检索评分和<strong>反思评分</strong>来提升质量。分为检索、生成、批评三个流程：<ul>
<li>先用检索评分来评估用户问题是否需要检索，若需要，LLM会调用检索模块查文档；</li>
<li>LLM接着分别为每个检索到的块生成答案；</li>
<li>再为每个答案生成反思评分评估检索到的文档是否相关；</li>
<li>最后将评分高的文档作为结果一并交给LLM进行生成。</li>
</ul>
</li>
</ul>
</li>
<li>重排模型<br>  通过对初始检索结果进行深入相关性评估和排序，确保展示给用户的结果更符合其意图。比如对于“最新科幻电影”的查询，可能返回科幻电影历史、最佳科幻电影、最新科幻电影等多种结果，模型需要对此分析并排序，把最新科幻电影放在前面。<ul>
<li><strong>RAG系统都应该尝试重排模型这个方法。</strong></li>
</ul>
</li>
</ol>
<h3 id="生成回答阶段"><a href="#生成回答阶段" class="headerlink" title="生成回答阶段"></a>生成回答阶段</h3><ol>
<li>提示词<ul>
<li>改变提示词形式可以有效影响模型对不同类型问题的接受程度和回答方式。</li>
<li>为减少幻觉和主观回答的可能性，<strong>RAG系统提示词中会强调回答仅基于搜索结果</strong></li>
<li>可以使用few-shot方法，也就是添加回答样例。</li>
<li>可以根据场景需要让模型的回答可以适当有主观成分和理解。</li>
</ul>
</li>
<li>大语言模型<ul>
<li>根据自己需求选择LLM，可以使用LangChain等常用开发框架来搭建RAG系统，它们提供了很好的debug工具。</li>
</ul>
</li>
</ol>
<h1 id="🔥知识蒸馏"><a href="#🔥知识蒸馏" class="headerlink" title="🔥知识蒸馏"></a>🔥知识蒸馏</h1><p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F.jpg" alt="知识蒸馏"><br>把大的教师模型的知识萃取出来，浓缩到一个小的学生模型。也就是<strong>用大模型教会小模型</strong>，实现轻量化。</p>
<h2 id="✨为什么进行知识蒸馏"><a href="#✨为什么进行知识蒸馏" class="headerlink" title="✨为什么进行知识蒸馏"></a>✨为什么进行知识蒸馏</h2><ul>
<li>提升模型精度：对某规模模型A不满意，可以训练精度更高的模型B，然后让这个模型B去训练原来这个小一点的A模型。</li>
<li>降低模型时延，压缩参数：对A模型时延不满意，可以找到时延更低参数更小的B模型，然后训练应该高精度的C模型对B模型进行知识蒸馏，使得B模型接近A。</li>
<li>标签之间的域迁移：用猫狗的数据集训练了教师模型A，使用水果训练了教师模型B，可以用俩模型同时蒸馏出一个同时识别猫狗和水果的模型。</li>
</ul>
<h2 id="✨传统知识蒸馏方法"><a href="#✨传统知识蒸馏方法" class="headerlink" title="✨传统知识蒸馏方法"></a>✨传统知识蒸馏方法</h2><p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%A0%E7%BB%9F%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F%E6%96%B9%E6%B3%95.jpg" alt="传统知识蒸馏方法"></p>
<ol>
<li>基于<strong>反馈</strong>的知识蒸馏：<ul>
<li>关注教师模型最后一层的输出logits经过softmax之后，用作学生模型的标签，计算学生模型损失。</li>
<li>目标就是让学生模型输出的logits尽可能接近教师模型。</li>
</ul>
</li>
<li>基于<strong>特征</strong>的知识蒸馏：<ul>
<li>教师模型中间层的特征都用来作为监督标签训练学生模型。</li>
<li>这种方法中间层能够提供更丰富的信息，有助于更好地进行知识迁移。</li>
<li>难点就是消除架构不一致、目标层自动化选择等。</li>
</ul>
</li>
</ol>
<h2 id="✨大语言模型知识蒸馏方法"><a href="#✨大语言模型知识蒸馏方法" class="headerlink" title="✨大语言模型知识蒸馏方法"></a>✨大语言模型知识蒸馏方法</h2><p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E8%92%B8%E9%A6%8F.jpg" alt="大语言模型知识蒸馏"></p>
<ul>
<li>就大模型权重是否可以获得分为<strong>白盒模型蒸馏</strong>和<strong>黑盒模型蒸馏</strong>，黑盒只能使用输出信息来训练小模型，而白盒可以获得模型权重来训练。</li>
<li>如图，基本流程从1-4就是通过指示大模型来获取种子知识（知识源），然后大模型生成知识给小模型训练。</li>
<li>图片上边可以看到，教师模型由多模态、代理、NLP等技能，可以用于各种领域（法律、医药、科学等）。</li>
<li>下方展示了教师模型如何利用数据进行驱动训练学生模型，包括生成标签、数据扩充、生数据处理、提取特征、反馈学生模型输出、学生模型自蒸馏等。</li>
<li>右边是蒸馏手段：<ul>
<li>教师模型监督微调学生模型。</li>
<li>教师模型输出指导学生模型的输出（提升相似性）。</li>
<li>强化学习：教师模型评估学生模型的输出反馈给学生模型。</li>
<li>排序优化：教师模型为学生模型多个输出进行排序，让学生模型知道什么是更好的输出。</li>
</ul>
</li>
</ul>
<h2 id="✨模型量化"><a href="#✨模型量化" class="headerlink" title="✨模型量化"></a>✨模型量化</h2><ul>
<li>目标是<strong>减小模型的存储需求和计算复杂度</strong>，就是可以在资源有限的设备上高效运行。</li>
<li>主要方式：<ul>
<li>更小的数据类型：32位FP转为16位FP、8位整数等。</li>
<li>模型压缩：霍夫曼编码（贪心算法，为频率高的符号编码更短）等算法。</li>
</ul>
</li>
<li>模型量化优势：减少存储空间、降低内存占用、加速推理。</li>
<li>挑战：精度损失、权衡效率和精度（性能不能太低）。</li>
</ul>
<h1 id="🔥模型压缩和加速的方法"><a href="#🔥模型压缩和加速的方法" class="headerlink" title="🔥模型压缩和加速的方法"></a>🔥模型压缩和加速的方法</h1><ol>
<li><strong>知识蒸馏</strong>：教师模型指导学生模型训练，提升小模型泛化能力和推理速度。</li>
<li><strong>参数剪枝</strong>：通过分析参数对性能的贡献，删除模型中冗余或贡献低的参数，以减少存储需求。</li>
<li><strong>网络剪枝</strong>：对神经网络删除冗余的神经元。</li>
<li><strong>蒸馏对抗网络</strong>：结合蒸馏和对抗训练方法，生成扰动样本，提升稳健性和抗干扰能力。</li>
<li><strong>层次化剪枝</strong>：针对每层对整体性能的影响，而设置不同的剪枝策略。</li>
<li><strong>低秩分解</strong>：将较大权重矩阵分解成几个小矩阵，减少参数量和计算开销，全连接层和卷积层常用。</li>
<li><strong>卷积分解</strong>：复杂卷积分解为简单的计算模块（深度可分离卷积），提升推理速度。</li>
</ol>
<h1 id="🔥微调"><a href="#🔥微调" class="headerlink" title="🔥微调"></a>🔥微调</h1><ul>
<li>大模型训练分为预训练、有监督微调、奖励建模、强化学习四个阶段。其中奖励模型是通过创建一个奖励模型评估生成结果的质量。</li>
<li>微调的目的是在预训练模型基础上针对特定任务进行优化模型性能。</li>
</ul>
<h2 id="✨什么时候微调"><a href="#✨什么时候微调" class="headerlink" title="✨什么时候微调"></a>✨什么时候微调</h2><ol>
<li>任务复杂度高，情境学习（仅使用prompt帮助模型理解）效果不足。</li>
<li>零样本（zero-shot）和少样本（few-shot）推理不佳。</li>
<li>领域或任务需求要求高度专业化，如法律、医学、工程等。</li>
<li>输出结果不符合用户要求，风格、格式不匹配，或者有个性化需求。</li>
</ol>
<h2 id="✨微调的方法"><a href="#✨微调的方法" class="headerlink" title="✨微调的方法"></a>✨微调的方法</h2><ul>
<li>针对<strong>参数</strong>，微调分为全量微调（FFT，调所有参数）和参数高效微调（PEFT，调少量或额外参数）。</li>
<li>全量微调会损失多样性，导致灾难性遗忘，所以通常LLM领域研究的都是参数高效微调。</li>
<li><strong>策略</strong>方面，分为有监督微调（SFT）和基于人类反馈的强化学习（RLHF），都可以用于全量或者参数高效微调。<ul>
<li>SFT：适用于有大量高质量标注数据集的场景，相当于有标准答案复习。主要用到调超参数、迁移学习、多任务学习、少样本学习、任务特定微调等。</li>
<li>RLHF：需要模型输出符合人类主观判断的结果，相当于在厨师指导下做菜。主要用到奖励建模、邻近策略优化PPO、比较排名、偏好学习、参数高效微调等，大部分方法都是基于人类主观设定。</li>
</ul>
</li>
</ul>
<p><strong>接下来主要介绍参数高效微调方法</strong></p>
<ul>
<li>主流分为Adapter、Prefix和LoRA三大类。</li>
<li>这些参数高效微调方法核心思想大部分都是<strong>为模型额外添加参数</strong>，相当于让没有兵种的士兵拿上武器成为特定兵种。</li>
</ul>
<p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%8F%82%E6%95%B0%E9%AB%98%E6%95%88%E5%BE%AE%E8%B0%83.jpg" alt="参数高效微调"></p>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>通过在预训练模型的各个多头注意力层之间添加一个Adapter层（适配器），只需要训练这个Adapter就行。</p>
<ul>
<li>每增加新的下游任务，就多一个adapter模块，其<strong>参数量很少</strong>，但是效果可以媲美全量微调（Fine-Tuning），又避免灾难性遗忘。</li>
<li>adapter fusion：通过将适配器训练分为知识提取和知识组合两个部分，解决遗忘和不稳定问题。</li>
<li>adapter drop：较低的transformer层删除可变数量的adapter来提升推理速度。</li>
</ul>
<h3 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h3><p>在QKV计算里面加参数，即为模型的输入<strong>添加k个额外的标记</strong>，训练这些额外的前缀参数就可以。<br><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Prefix_Tuning.jpg" alt="Prefix Tuning"></p>
<ul>
<li><strong>Prefix Tuning</strong>：如上图，对输入token之前构造和任务相关的虚拟tokens作为prefix，训练时只更新前缀部分，其他参数固定。<ul>
<li>该方法与Fine-Tuning效果比肩。</li>
</ul>
</li>
</ul>
<p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Prompt_Tuning.jpg" alt="Prompt Tuning"></p>
<ul>
<li><strong>Prompt Tuning</strong>：简化prefix tuning，对每个任务定义对应的离散化prompt，然后拼接到数据作为输入，这样可以让预训练模型做混合任务推理。<ul>
<li>该方法仅在输入层添加参数，而不用像prefix tuning那样每层都添加参数。</li>
<li>相较于prefix tuning，训练效率高，适合分类任务，在大尺寸模型与Fine-Tuning比肩。</li>
</ul>
</li>
</ul>
<p><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/P-Tuning.jpg" alt="P-Tuning"></p>
<ul>
<li><p><strong>P-Tuning</strong>：设计连续可微的虚拟token，即把prompt转化为可学习的embedding层，也是仅输入层加。</p>
<ul>
<li>虚拟token插入位置可以不一定是前缀，该方法在大尺寸模型与Fine-Tuning比肩。</li>
</ul>
</li>
<li><p><strong>P-Tuning V2</strong>：基于prompt Tuning、P-Tuning改进，每层都加Prompt tokens，提升了可学习参数量，为更深层的网络带来影响。</p>
<ul>
<li>不同任务prompt长度可以不一样，该方法能够在大、小尺寸模型都能与Fine-Tuning比肩。</li>
</ul>
</li>
</ul>
<h3 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h3><p>在多头矩阵运算上添加LoRA矩阵，学习<strong>小参数的低秩矩阵</strong>来近似模型权重矩阵w的参数更新，微调时只需要更新该矩阵来代替原参数矩阵更新。<br><img src="/2024/12/27/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/LoRA%E5%BE%AE%E8%B0%83.jpg" alt="LoRA微调"></p>
<ul>
<li>如上图，可能在所示的transformer基本结构的<strong>两个位置</strong>添加LoRA模块进行<strong>前馈旁路</strong>输入。</li>
<li><strong>核心</strong>：LoRA结构为图中右边所示，权重更新用<code>W=W0+ΔW</code>表示，将权重矩阵变化量ΔW分解为低秩矩阵A（降维）、B（升维）来近似更新参数矩阵W，微调时W0不更新，仅和A、B分支输出进行合并。<blockquote>
<p>低秩代表用更少的参数就可以表示矩阵，秩少参数就少。 </p>
</blockquote>
</li>
<li>该方法相当于用更小的参数量进行更新，真正使用时LoRA结构也会被整合到模型，<strong>减少训练计算开销并且不增加实时推理开销</strong>。</li>
<li><strong>初始化</strong>：降维矩阵A用<strong>高斯分布</strong>初始化以添加随机性，升维矩阵B<strong>初始化为0</strong>，在训练开始时不影响输出。两者初始化方式理论上可以对调，如果都随机初始化会不稳定，都初始为0就收敛太慢了。</li>
<li><strong>可插拔任务切换</strong>：不同任务训练不同的A、B，随时可以切换。</li>
<li>LoRA可以作用在Q、K、V，并且同时作用效果好于单独作用。</li>
<li><strong>在已有LoRA上训练新任务</strong>：任务相似则直接当前LoRA模型上训练；任务不同但相关，可以把当前的LoRA融入基础模型，然后训练新的LoRA；任务完全不同就从原有基础模型开始训练，抛弃现有LoRA参数。</li>
<li><strong>避免过拟合</strong>：减小秩的值、增加数据集大小、增加优化器衰减权重（weight decay）、增加LoRA模块的dropout值，其实很多都是深度学习中用到的常见手段。</li>
<li>变体：<ul>
<li>AdaLoRA：根据重要性评分（一种损失）来动态地分配参数预算给权重矩阵，重要的增量矩阵分配高秩（更多参数），不重要的给低秩防止过拟合。</li>
<li>QLoRA：更轻量的LoRA，4位量化LLM，然后用LoRA方法对量化后的LLM进行微调，这样节约33%GPU内存，但是增加39%训练时间（量化压缩需要时间计算）。</li>
</ul>
</li>
</ul>
<h2 id="✨多轮对话如何微调"><a href="#✨多轮对话如何微调" class="headerlink" title="✨多轮对话如何微调"></a>✨多轮对话如何微调</h2><ol>
<li>数据准备：收集和创建适用于多轮对话的数据集<ul>
<li>方法：收集现有数据集、创建自定义数据集（专业性或特定需求）、数据清洗和预处理。</li>
<li>注意：上下文信息要有，数据要有多样性（话题、风格、情感等）。</li>
</ul>
</li>
<li>构建输入输出格式：将原始对话转为合适模型训练的格式<ul>
<li>方法：输入方面将<strong>已有对话拼成序列</strong>（如下），输出就是本轮要生成的内容。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span>用户<span class="token punctuation">]</span> 你好！
<span class="token punctuation">[</span>机器人<span class="token punctuation">]</span> 你好，请问有什么可以帮您的吗？
<span class="token punctuation">[</span>用户<span class="token punctuation">]</span> 我想预定一张去北京的火车票。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>模型选择：<ul>
<li>常用：DialoGPT、Llama、BERT。</li>
<li>考虑：任务类型、模型大小、预训练数据量。</li>
</ul>
</li>
<li>微调模型：<ul>
<li>流程：初始化参数、定义损失函数、反向传播和参数更新、重复迭代，就是常规深度学习的流程。</li>
<li>注意：学习率设定、梯度剪裁等。</li>
</ul>
</li>
<li>超参数调优：优化模型的训练过程，提升性能<ul>
<li>可调参数：学习率、批次大小、训练轮数、权重衰减等。</li>
<li>常见方法：网格搜索（参数范围内遍历所有组合）、随机搜索（随机采样组合）、贝叶斯优化（贝叶斯理论智能搜索）。</li>
<li>评估：验证集表现、早停。</li>
</ul>
</li>
<li>评估（验证）和测试：评估分为<strong>自动和人工评估</strong>。<ul>
<li>自动评估：BLEU、ROUGE、Perplexity（困惑度）、Distinct-N（评估回复多样性）。</li>
<li>人工评估：流畅性、相关性、连贯性、信息性。</li>
<li>错误分析：看哪一类对话表现差、深入分析错误案例。</li>
</ul>
</li>
<li>特定技巧：<ul>
<li>对话策略：策略建模（让模型何时提供信息、引导对话等）、强化学习。</li>
<li>数据增强：同义替换、随机插入或删除、翻译回译（翻译回去）。</li>
<li>情感和个性化建模：标注情感、为模型设定人格。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2+ardupilot+mavros无人机仿真初步</title>
    <url>/2024/11/16/ROS2-ardupilot-mavros%E6%97%A0%E4%BA%BA%E6%9C%BA%E4%BB%BF%E7%9C%9F%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<p>技术：ROS2(humble) + Ardupilot + mavros + gazebo11</p>
<ul>
<li><p>ArduPilot 是一个功能丰富且灵活的开源自动驾驶平台，它的广泛适用性和开源特性，使其在无人系统领域得到了广泛应用。<span id="more"></span></p>
</li>
<li><p>Mavros负责ROS2和Ardupilot之间的数据传输，并通过MAVLink协议与Ardupilot进行通信，也就是有了它我们可以在ROS2编写节点控制无人机在gazebo仿真环境下运动。</p>
</li>
<li><p>假设已经有了Ubuntu22.04的ROS2 Humble环境，并且已经装好了gazebo11。</p>
</li>
</ul>
<h1 id="✈️配置Ardupilot环境"><a href="#✈️配置Ardupilot环境" class="headerlink" title="✈️配置Ardupilot环境"></a>✈️配置Ardupilot环境</h1><h2 id="飞控源代码脚本文件搭建编译环境"><a href="#飞控源代码脚本文件搭建编译环境" class="headerlink" title="飞控源代码脚本文件搭建编译环境"></a>飞控源代码脚本文件搭建编译环境</h2><ul>
<li>首先安装git（如果没有），然后克隆Ardupilot仓库（在你需要放置的目录下，我这里就是home目录下），最好使用魔法上网。</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span>
<span class="token function">git</span> clone https://github.com/ArduPilot/ardupilot.git
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>进入到ardupilot目录，然后执行下面的命令，<strong>第二句不能在前面加上sudo或者sh，否则会报错</strong>。遇到[Y&#x2F;N]选择时，<strong>都选y</strong>。</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ardupilot/Tools/environment_install
./install-prereqs-ubuntu.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><strong>安装完成后，重启电脑，让一些环境变量生效</strong></li>
</ul>
<h2 id="编译飞控固件"><a href="#编译飞控固件" class="headerlink" title="编译飞控固件"></a>编译飞控固件</h2><ul>
<li>下列步骤依次是：</li>
</ul>
<ol>
<li>进入飞控源代码的最顶层目录；</li>
<li>切换到一个稳定版（以多旋翼4.2.3为例）；</li>
<li>更新子模块；</li>
<li>指定飞控硬件型号（以Pixhawk2.4.8为例）；</li>
<li>编译飞控固件（多旋翼固件）。</li>
</ol>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ardupilot
<span class="token function">git</span> checkout -b MyCopter-4.2.3 Copter-4.2.3
<span class="token function">git</span> submodule update --init --recursive
./waf configure --board fmuv3
./waf copter
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> Tools/autotest
sim_vehicle.py -v ArduCopter
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>运行如上指令，会弹出这样的界面，就说明装好了。<br><img src="/2024/11/16/ROS2-ardupilot-mavros%E6%97%A0%E4%BA%BA%E6%9C%BA%E4%BB%BF%E7%9C%9F%E5%88%9D%E6%AD%A5/ardupilot%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2.jpg" alt="ardupilot仿真环境启动界面"></p>
<h1 id="✈️下载编译ardupilot-gazebo"><a href="#✈️下载编译ardupilot-gazebo" class="headerlink" title="✈️下载编译ardupilot_gazebo"></a>✈️下载编译ardupilot_gazebo</h1><ul>
<li>回到home目录，运行如下指令</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/SwiftGust/ardupilot_gazebo
<span class="token comment" spellcheck="true">#或者 git clone https://github.com/khancyr/ardupilot_gazebo</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgazebo11-dev
<span class="token function">cd</span> ardupilot_gazebo
<span class="token function">mkdir</span> build
<span class="token function">cd</span> build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span> -j4
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>下一步编辑环境变量并加入以下内容：</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> ~/.bashrc
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /usr/share/gazebo/setup.sh
<span class="token function">export</span> GAZEBO_MODEL_PATH<span class="token operator">=</span>~/ardupilot_gazebo/models:<span class="token variable">${GAZEBO_MODEL_PATH}</span>
<span class="token function">export</span> GAZEBO_MODEL_PATH<span class="token operator">=</span>~/ardupilot_gazebo/models_gazebo:<span class="token variable">${GAZEBO_MODEL_PATH}</span>
<span class="token function">export</span> GAZEBO_RESOURCE_PATH<span class="token operator">=</span>~/ardupilot_gazebo/worlds:<span class="token variable">${GAZEBO_RESOURCE_PATH}</span>
<span class="token function">export</span> GAZEBO_PLUGIN_PATH<span class="token operator">=</span>~/ardupilot_gazebo/build:<span class="token variable">${GAZEBO_PLUGIN_PATH}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>ctrl+O ，回车保存；ctrl+x退出</p>
<h1 id="✈️安装Mavros"><a href="#✈️安装Mavros" class="headerlink" title="✈️安装Mavros"></a>✈️安装Mavros</h1><ul>
<li>运行如下指令安装</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> ros-humble-mavros ros-humble-mavros-extras
<span class="token function">git</span> clone https://gitee.com/MrZhaosx/geographic-lib.git
<span class="token function">cd</span> geographic-lib
<span class="token function">sudo</span> <span class="token function">cp</span> -r geoids gravity magnetic /usr/share/GeographicLib/
<span class="token function">sudo</span> ./install_geographiclib_datasets.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出以下内容就是成功：</p>
<pre><code>GeographicLib geoids dataset egm96-5 already exists, skipping
GeographicLib gravity dataset egm96 already exists, skipping
GeographicLib magnetic dataset emm2015 already exists, skipping
</code></pre>
<ul>
<li>接着复制一个launch文件用于启动mavros，可以放在home目录。</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/launch
<span class="token function">cp</span> /opt/ros/humble/share/mavros/launch/apm.launch ~/launch/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>将launc文件中的内容进行如下更改，从串口改为改为udp模拟输出：</li>
</ul>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fcu_url<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dev/ttyACM0:57600<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
#修改为
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fcu_url<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>udp://127.0.0.1:14551@14555<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="✈️基础节点测试"><a href="#✈️基础节点测试" class="headerlink" title="✈️基础节点测试"></a>✈️基础节点测试</h1><ul>
<li>首先在你习惯的位置创建一个工作空间：</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash">ros2 pkg create offboard_pkg --build-type ament_python --dependencies rclpy mavros geometry_msgs --license Apache-2.0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>先写一个简单的节点看看是否可以获取无人机状态，命名为offboard_node：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rclpy
<span class="token keyword">import</span> rclpy<span class="token punctuation">.</span>logging
<span class="token keyword">from</span> rclpy<span class="token punctuation">.</span>node <span class="token keyword">import</span> Node
<span class="token keyword">from</span> mavros_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> State
<span class="token comment" spellcheck="true"># 全局变量</span>
current_state <span class="token operator">=</span> State<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 无人机状态回调函数</span>
<span class="token keyword">def</span> <span class="token function">state_callback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> current_state
    current_state <span class="token operator">=</span> msg
    <span class="token comment" spellcheck="true">#测试打印</span>
    logger <span class="token operator">=</span> rclpy<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token string">'state_sub'</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'State: isconnected={} (bool), armed={} (bool)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
        current_state<span class="token punctuation">.</span>connected<span class="token punctuation">,</span>
        current_state<span class="token punctuation">.</span>armed<span class="token punctuation">)</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'State: isguided={} (bool), mode={} (string)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
        current_state<span class="token punctuation">.</span>guided<span class="token punctuation">,</span>
        current_state<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    rclpy<span class="token punctuation">.</span>init<span class="token punctuation">(</span>args<span class="token operator">=</span>args<span class="token punctuation">)</span>
    node <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">'offboard_node'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 创建订阅者</span>
    state_sub <span class="token operator">=</span> node<span class="token punctuation">.</span>create_subscription<span class="token punctuation">(</span>State<span class="token punctuation">,</span> <span class="token string">'/mavros/state'</span><span class="token punctuation">,</span> state_callback<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        rclpy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        node<span class="token punctuation">.</span>destroy_node<span class="token punctuation">(</span><span class="token punctuation">)</span>
        rclpy<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>setup.py记得添加该节点：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token string">'console_scripts'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token string">'offboard_node = offboard_pkg.offboard_node:main'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用4个终端分别启动ardupilot、gazebo、mavros、节点</li>
</ul>
<p>ardupilot：</p>
<pre class="line-numbers language-bash"><code class="language-bash">sim_vehicle.py -v ArduCopter -f gazebo-iris  --map --console
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>gazebo，在ardupilot_gazebo底下加载世界world（也不一定得是这个world文件）：</p>
<pre class="line-numbers language-bash"><code class="language-bash">gazebo --verbose worlds/iris_ardupilot.world
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>通过launch文件夹中的launch文件启动mavros：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/launch
ros2 launch apm.launch
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在你的工作目录中启动节点：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> install/setup.bash
ros2 run offboard_pkg offboard_node
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>如果最后这个终端输出如下信息，即为测试成功：</li>
</ul>
<pre><code>[INFO] [1724314101.290484203] [state_sub]: State: isconnected=True (bool), armed=False (bool)
[INFO] [1724314101.291869777] [state_sub]: State: isguided=False (bool), mode=STABILIZE (string)
[INFO] [1724314102.332203155] [state_sub]: State: isconnected=True (bool), armed=False (bool)
[INFO] [1724314102.337817151] [state_sub]: State: isguided=False (bool), mode=STABILIZE (string)
……
</code></pre>
<h1 id="✈️控制无人机运动"><a href="#✈️控制无人机运动" class="headerlink" title="✈️控制无人机运动"></a>✈️控制无人机运动</h1><ul>
<li>我们需要新建一个ROS2节点。这个节点的主要职责是控制无人机安全地起飞到预设的高度，并进行圆周运动。代码的主体结构如下：</li>
</ul>
<ol>
<li>初始化：设置节点名称，声明参数，并创建与无人机状态、起飞、模式设置等相关的服务客户端。</li>
<li>起飞逻辑：通过服务请求，依次进行无人机的解锁（arming）、模式设置、以及起飞命令的发送。</li>
<li>状态回调：实时更新无人机的状态信息。</li>
<li>模式设置：将无人机设置为“GUIDED”模式，以便进行后续的控制指令发送。</li>
<li>起飞命令：发送起飞命令，并等待起飞成功，起飞后控制无人机的按圆周的轨迹进行运动。</li>
</ol>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rclpy
<span class="token keyword">from</span> rclpy<span class="token punctuation">.</span>node <span class="token keyword">import</span> Node
<span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> PoseStamped<span class="token punctuation">,</span> Twist
<span class="token keyword">from</span> mavros_msgs<span class="token punctuation">.</span>srv <span class="token keyword">import</span> SetMode<span class="token punctuation">,</span> CommandBool<span class="token punctuation">,</span> CommandTOL
<span class="token keyword">from</span> mavros_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> State
<span class="token keyword">from</span> std_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Header
<span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Point<span class="token punctuation">,</span> Quaternion
<span class="token keyword">import</span> time
<span class="token keyword">import</span> math

<span class="token keyword">class</span> <span class="token class-name">UAVTakeoffNode</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">'uav_takeoff_node'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>declare_parameter<span class="token punctuation">(</span><span class="token string">'takeoff_height'</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>takeoff_height <span class="token operator">=</span> self<span class="token punctuation">.</span>get_parameter<span class="token punctuation">(</span><span class="token string">'takeoff_height'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_parameter_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>double_value
        self<span class="token punctuation">.</span>current_state <span class="token operator">=</span> State<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>state_sub <span class="token operator">=</span> self<span class="token punctuation">.</span>create_subscription<span class="token punctuation">(</span>State<span class="token punctuation">,</span> <span class="token string">'/mavros/state'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>state_callback<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>arm_client <span class="token operator">=</span> self<span class="token punctuation">.</span>create_client<span class="token punctuation">(</span>CommandBool<span class="token punctuation">,</span> <span class="token string">'/mavros/cmd/arming'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>set_mode_client <span class="token operator">=</span> self<span class="token punctuation">.</span>create_client<span class="token punctuation">(</span>SetMode<span class="token punctuation">,</span> <span class="token string">'/mavros/set_mode'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>takeoff_client <span class="token operator">=</span> self<span class="token punctuation">.</span>create_client<span class="token punctuation">(</span>CommandTOL<span class="token punctuation">,</span> <span class="token string">'/mavros/cmd/takeoff'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>timer <span class="token operator">=</span> self<span class="token punctuation">.</span>create_timer<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>takeoff<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">state_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>current_state <span class="token operator">=</span> msg

    <span class="token keyword">def</span> <span class="token function">takeoff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Requesting to arm the UAV'</span><span class="token punctuation">)</span>
        arm_request <span class="token operator">=</span> CommandBool<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token punctuation">)</span>
        arm_request<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">True</span>
        future <span class="token operator">=</span> self<span class="token punctuation">.</span>arm_client<span class="token punctuation">.</span>call_async<span class="token punctuation">(</span>arm_request<span class="token punctuation">)</span>
        future<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>self<span class="token punctuation">.</span>arm_response_callback<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">arm_response_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> future<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            response <span class="token operator">=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>current_state<span class="token punctuation">.</span>armed<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'UAV arming successful'</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>set_guided_mode<span class="token punctuation">(</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>send_takeoff_cmd<span class="token punctuation">(</span><span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>start_circular_motion<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Start circular motion after takeoff</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'UAV arming failed.'</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Please run this node again.'</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Service call failed %r'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">set_guided_mode</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        set_mode_request <span class="token operator">=</span> SetMode<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token punctuation">)</span>
        set_mode_request<span class="token punctuation">.</span>custom_mode <span class="token operator">=</span> <span class="token string">"GUIDED"</span>
        future <span class="token operator">=</span> self<span class="token punctuation">.</span>set_mode_client<span class="token punctuation">.</span>call_async<span class="token punctuation">(</span>set_mode_request<span class="token punctuation">)</span>
        rclpy<span class="token punctuation">.</span>spin_until_future_complete<span class="token punctuation">(</span>self<span class="token punctuation">,</span> future<span class="token punctuation">)</span>
        <span class="token keyword">if</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode_sent<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Guided mode set successfully'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Failed to set Guided mode'</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">send_takeoff_cmd</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        takeoff_request <span class="token operator">=</span> CommandTOL<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token punctuation">)</span>
        takeoff_request<span class="token punctuation">.</span>altitude <span class="token operator">=</span> self<span class="token punctuation">.</span>takeoff_height
        future <span class="token operator">=</span> self<span class="token punctuation">.</span>takeoff_client<span class="token punctuation">.</span>call_async<span class="token punctuation">(</span>takeoff_request<span class="token punctuation">)</span>
        rclpy<span class="token punctuation">.</span>spin_until_future_complete<span class="token punctuation">(</span>self<span class="token punctuation">,</span> future<span class="token punctuation">)</span>
        <span class="token keyword">if</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>success<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Takeoff cmd send successfully'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Failed to send Takeoff cmd'</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">start_circular_motion</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>get_logger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Starting circular motion'</span><span class="token punctuation">)</span>
        radius <span class="token operator">=</span> <span class="token number">1.0</span>  <span class="token comment" spellcheck="true"># 半径为1.0米</span>
        linear_velocity <span class="token operator">=</span> <span class="token number">1.0</span>  <span class="token comment" spellcheck="true"># 线速度为1.0米/秒</span>
        angular_velocity <span class="token operator">=</span> linear_velocity <span class="token operator">/</span> radius  <span class="token comment" spellcheck="true"># 计算角速度</span>
        takeoff_pose <span class="token operator">=</span> PoseStamped<span class="token punctuation">(</span><span class="token punctuation">)</span>
        takeoff_pose<span class="token punctuation">.</span>header <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token punctuation">)</span>
        takeoff_pose<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> self<span class="token punctuation">.</span>get_clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>
        takeoff_pose<span class="token punctuation">.</span>header<span class="token punctuation">.</span>frame_id <span class="token operator">=</span> <span class="token string">"map"</span>
                
        takeoff_pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position <span class="token operator">=</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> z<span class="token operator">=</span>self<span class="token punctuation">.</span>takeoff_height<span class="token punctuation">)</span>
        takeoff_pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>orientation <span class="token operator">=</span> Quaternion<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
        takeoff_vel <span class="token operator">=</span> Twist<span class="token punctuation">(</span><span class="token punctuation">)</span>
        takeoff_vel<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.0</span>
        takeoff_vel<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.0</span>
        takeoff_vel<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.0</span>
        takeoff_vel<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.0</span>
        takeoff_vel<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.0</span>
        takeoff_vel<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.0</span>


        self<span class="token punctuation">.</span>pose_pub <span class="token operator">=</span> self<span class="token punctuation">.</span>create_publisher<span class="token punctuation">(</span>PoseStamped<span class="token punctuation">,</span> <span class="token string">'/mavros/setpoint_position/local'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>vel_pub <span class="token operator">=</span> self<span class="token punctuation">.</span>create_publisher<span class="token punctuation">(</span>Twist<span class="token punctuation">,</span> <span class="token string">'/mavros/setpoint_velocity/cmd_vel_unstamped'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

        start_time <span class="token operator">=</span> self<span class="token punctuation">.</span>get_clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> rclpy<span class="token punctuation">.</span>ok<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            current_time <span class="token operator">=</span> self<span class="token punctuation">.</span>get_clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time
            circle_x <span class="token operator">=</span> radius <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angular_velocity <span class="token operator">*</span> current_time<span class="token punctuation">.</span>nanoseconds <span class="token operator">*</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span>
            circle_y <span class="token operator">=</span> radius <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angular_velocity <span class="token operator">*</span> current_time<span class="token punctuation">.</span>nanoseconds <span class="token operator">*</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span>
            z <span class="token operator">=</span> self<span class="token punctuation">.</span>takeoff_height

            takeoff_pose<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> self<span class="token punctuation">.</span>get_clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>
            takeoff_pose<span class="token punctuation">.</span>header<span class="token punctuation">.</span>frame_id <span class="token operator">=</span> <span class="token string">'map'</span>
            takeoff_pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position <span class="token operator">=</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span>circle_x<span class="token punctuation">,</span> y<span class="token operator">=</span>circle_y<span class="token punctuation">,</span> z<span class="token operator">=</span>z<span class="token punctuation">)</span>
            takeoff_pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>orientation <span class="token operator">=</span> Quaternion<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>pose_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>takeoff_pose<span class="token punctuation">)</span>

            takeoff_vel<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span>angular_velocity <span class="token operator">*</span> circle_y
            takeoff_vel<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>y <span class="token operator">=</span> angular_velocity <span class="token operator">*</span> circle_x
            takeoff_vel<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.0</span>
            takeoff_vel<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.0</span>
            takeoff_vel<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.0</span>
            takeoff_vel<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z <span class="token operator">=</span> angular_velocity
            self<span class="token punctuation">.</span>vel_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>takeoff_vel<span class="token punctuation">)</span>

            rclpy<span class="token punctuation">.</span>spin_once<span class="token punctuation">(</span>self<span class="token punctuation">,</span> timeout_sec<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待下一个循环</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    rclpy<span class="token punctuation">.</span>init<span class="token punctuation">(</span>args<span class="token operator">=</span>args<span class="token punctuation">)</span>
    node <span class="token operator">=</span> UAVTakeoffNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        rclpy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        node<span class="token punctuation">.</span>destroy_node<span class="token punctuation">(</span><span class="token punctuation">)</span>
        rclpy<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>实现效果如下，刚开始还是没有那么稳定的圆周运动，并且启动节点时常会有可能没成功解锁无人机要多次启动节点。但是至此也算是成功实现了无人机最基本的仿真。<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"/2024/11/16/ROS2-ardupilot-mavros无人机仿真初步/结果.mp4","pic":"结果.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>仿真</category>
        <category>机器人</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ROS2</tag>
        <tag>无人机</tag>
      </tags>
  </entry>
  <entry>
    <title>使用语音识别结合大模型实现命令分类</title>
    <url>/2024/10/07/%E4%BD%BF%E7%94%A8%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%BB%93%E5%90%88%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<ul>
<li>之前用ESP32实现过用百度千帆模型进行大模型对话的功能，这次使用Python实现，并先通过麦克风输入语音，实现语音识别，再通过API调用大模型进行对话，这次让通过提示性内容引导模型输出分类，也就是完成简单的分类任务。<blockquote>
<p>可参考的链接：</p>
<a href="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/" title="ESP32聊天助手——文心一言">ESP32实现的文本对话——基于文心一言</a><span id="more"></span></blockquote>
</li>
</ul>
<h1 id="🔥文本分类"><a href="#🔥文本分类" class="headerlink" title="🔥文本分类"></a>🔥文本分类</h1><p>这部分跟“<a href="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/" title="ESP32聊天助手——文心一言">ESP32实现的文本对话——基于文心一言</a>”这项工作内容一致，只不过这次代码用的Python，所以创建应用、调试API等先行工作就请跳转查看。<br>Python代码如下：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json

<span class="token keyword">def</span> <span class="token function">classify</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 替换为你的实际访问令牌</span>
    access_token <span class="token operator">=</span> <span class="token string">"你的百度令牌"</span>
    url <span class="token operator">=</span> f<span class="token string">"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token={access_token}"</span>
    <span class="token comment" spellcheck="true"># 定义要发送的消息</span>
    payload <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">"messages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>
                <span class="token string">"content"</span><span class="token punctuation">:</span> f<span class="token string">'这是列表[长方体,球体,圆柱]，我向你发送一句话，判断语句和列表哪一项最符合，你只要回答一个数字，这个数字就是这个列表中元素对应的索引，接下来请听话：{words}'</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">"temperature"</span><span class="token punctuation">:</span> <span class="token number">0.95</span><span class="token punctuation">,</span>
        <span class="token string">"top_p"</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>
        <span class="token string">"penalty_score"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string">"enable_system_memory"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token string">"disable_search"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token string">"enable_citation"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token string">"response_format"</span><span class="token punctuation">:</span> <span class="token string">"text"</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 发送POST请求</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 检查响应状态码</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 打印返回的结果</span>
            response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"回答:"</span><span class="token punctuation">,</span> response_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> <span class="token string">'没有返回结果'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"请求失败，状态码: {response.status_code}，错误信息: {response.text}"</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"发生异常: {e}"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    classify<span class="token punctuation">(</span><span class="token string">"给我一个长方体"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里实现了通过令牌调用API，输入一句话并根据提示性语句，让模型仅回答一个数字，作为分类列表“长方体,球体,圆柱”中元素的索引，我们后续可以将输出接到目标检测网络等算法上，让它有目标地识别并输出位置框（本文不介绍）。</p>
<h1 id="🔥语音识别"><a href="#🔥语音识别" class="headerlink" title="🔥语音识别"></a>🔥语音识别</h1><ul>
<li><p>该环节使用讯飞的语音识别（流式版）<a href="https://www.xfyun.cn/services/voicedictation%EF%BC%9A">https://www.xfyun.cn/services/voicedictation：</a><br><img src="/2024/10/07/%E4%BD%BF%E7%94%A8%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%BB%93%E5%90%88%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB/%E8%AE%AF%E9%A3%9E%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E4%B8%BB%E9%A1%B5.jpg" alt="讯飞语音识别主页"></p>
</li>
<li><p>点击<em>免费试用</em>，就可以看到应用界面：<br><img src="/2024/10/07/%E4%BD%BF%E7%94%A8%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%BB%93%E5%90%88%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%BA%94%E7%94%A8%E7%95%8C%E9%9D%A2.jpg" alt="语音识别应用界面"></p>
</li>
<li><p>右上角就是和百度千帆的API一样有ID、Key、Secret，这里就不多赘述了。</p>
</li>
<li><p>在刚才的主页点击<em>技术文档</em>就可以在文档里面找到下载demo的地方，可以根据其示例进行改进：<br><img src="/2024/10/07/%E4%BD%BF%E7%94%A8%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%BB%93%E5%90%88%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB/%E7%A4%BA%E4%BE%8B%E4%B8%8B%E8%BD%BD.jpg" alt="示例下载"></p>
</li>
<li><p>接下来直接展示最后的代码，而非示例：</p>
</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pyaudio
<span class="token keyword">import</span> wave
<span class="token keyword">import</span> websocket
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> hmac
<span class="token keyword">import</span> json
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode
<span class="token keyword">import</span> time
<span class="token keyword">import</span> ssl
<span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>handlers <span class="token keyword">import</span> format_date_time
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">from</span> time <span class="token keyword">import</span> mktime
<span class="token keyword">import</span> _thread <span class="token keyword">as</span> thread
<span class="token keyword">import</span> keyboard  <span class="token comment" spellcheck="true"># 用于捕捉键盘输入</span>

<span class="token keyword">from</span> word_classify <span class="token keyword">import</span> classify

STATUS_FIRST_FRAME <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 第一帧的标识</span>
STATUS_CONTINUE_FRAME <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 中间帧标识</span>
STATUS_LAST_FRAME <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 最后一帧的标识</span>

<span class="token keyword">class</span> <span class="token class-name">Ws_Param</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 初始化</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> APPID<span class="token punctuation">,</span> APIKey<span class="token punctuation">,</span> APISecret<span class="token punctuation">,</span> AudioFile<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>APPID <span class="token operator">=</span> APPID
        self<span class="token punctuation">.</span>APIKey <span class="token operator">=</span> APIKey
        self<span class="token punctuation">.</span>APISecret <span class="token operator">=</span> APISecret
        self<span class="token punctuation">.</span>AudioFile <span class="token operator">=</span> AudioFile

        <span class="token comment" spellcheck="true"># 公共参数(common)</span>
        self<span class="token punctuation">.</span>CommonArgs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"app_id"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>APPID<span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true"># 业务参数(business)，更多个性化参数可在官网查看</span>
        self<span class="token punctuation">.</span>BusinessArgs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"domain"</span><span class="token punctuation">:</span> <span class="token string">"iat"</span><span class="token punctuation">,</span> <span class="token string">"language"</span><span class="token punctuation">:</span> <span class="token string">"zh_cn"</span><span class="token punctuation">,</span> <span class="token string">"accent"</span><span class="token punctuation">:</span> <span class="token string">"mandarin"</span><span class="token punctuation">,</span> <span class="token string">"vinfo"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"vad_eos"</span><span class="token punctuation">:</span><span class="token number">10000</span><span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true"># 生成url</span>
    <span class="token keyword">def</span> <span class="token function">create_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string">'wss://ws-api.xfyun.cn/v2/iat'</span>
        <span class="token comment" spellcheck="true"># 生成RFC1123格式的时间戳</span>
        now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
        date <span class="token operator">=</span> format_date_time<span class="token punctuation">(</span>mktime<span class="token punctuation">(</span>now<span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 拼接字符串</span>
        signature_origin <span class="token operator">=</span> <span class="token string">"host: "</span> <span class="token operator">+</span> <span class="token string">"ws-api.xfyun.cn"</span> <span class="token operator">+</span> <span class="token string">"\n"</span>
        signature_origin <span class="token operator">+=</span> <span class="token string">"date: "</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">"\n"</span>
        signature_origin <span class="token operator">+=</span> <span class="token string">"GET "</span> <span class="token operator">+</span> <span class="token string">"/v2/iat "</span> <span class="token operator">+</span> <span class="token string">"HTTP/1.1"</span>
        <span class="token comment" spellcheck="true"># 进行hmac-sha256进行加密</span>
        signature_sha <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>self<span class="token punctuation">.</span>APISecret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signature_origin<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>
        signature_sha <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>signature_sha<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

        authorization_origin <span class="token operator">=</span> <span class="token string">"api_key=\"%s\", algorithm=\"%s\", headers=\"%s\", signature=\"%s\""</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>APIKey<span class="token punctuation">,</span> <span class="token string">"hmac-sha256"</span><span class="token punctuation">,</span> <span class="token string">"host date request-line"</span><span class="token punctuation">,</span> signature_sha<span class="token punctuation">)</span>
        authorization <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>authorization_origin<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 将请求的鉴权参数组合为字典</span>
        v <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"authorization"</span><span class="token punctuation">:</span> authorization<span class="token punctuation">,</span>
            <span class="token string">"date"</span><span class="token punctuation">:</span> date<span class="token punctuation">,</span>
            <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">"ws-api.xfyun.cn"</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true"># 拼接鉴权参数，生成url</span>
        url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> urlencode<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token keyword">return</span> url

<span class="token comment" spellcheck="true"># 收到websocket消息的处理</span>
<span class="token keyword">def</span> <span class="token function">on_message</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        code <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span>
        sid <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"sid"</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> code <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            errMsg <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sid:%s call error:%s code is:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> errMsg<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"ws"</span><span class="token punctuation">]</span>
            result <span class="token operator">=</span> <span class="token string">""</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>
                <span class="token keyword">for</span> w <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token string">"cw"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    result <span class="token operator">+=</span> w<span class="token punctuation">[</span><span class="token string">"w"</span><span class="token punctuation">]</span>
            <span class="token comment" spellcheck="true"># print("sid:%s call success!,data is:%s" % (sid, json.dumps(data, ensure_ascii=False)))</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
            classify<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"receive msg,but parse exception:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 收到websocket错误的处理</span>
<span class="token keyword">def</span> <span class="token function">on_error</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"### error:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 收到websocket关闭的处理</span>
<span class="token keyword">def</span> <span class="token function">on_close</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"### closed ###"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 收到websocket连接建立的处理</span>
<span class="token keyword">def</span> <span class="token function">on_open</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        frameSize <span class="token operator">=</span> <span class="token number">8000</span>  <span class="token comment" spellcheck="true"># 每一帧的音频大小</span>
        intervel <span class="token operator">=</span> <span class="token number">0.04</span>  <span class="token comment" spellcheck="true"># 发送音频间隔(单位:s)</span>
        status <span class="token operator">=</span> STATUS_FIRST_FRAME  <span class="token comment" spellcheck="true"># 音频的状态信息，标识音频是第一帧，还是中间帧、最后一帧</span>

        <span class="token keyword">with</span> open<span class="token punctuation">(</span>wsParam<span class="token punctuation">.</span>AudioFile<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                buf <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span>frameSize<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token operator">not</span> buf<span class="token punctuation">:</span>
                    status <span class="token operator">=</span> STATUS_LAST_FRAME
                <span class="token keyword">if</span> status <span class="token operator">==</span> STATUS_FIRST_FRAME<span class="token punctuation">:</span>
                    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"common"</span><span class="token punctuation">:</span> wsParam<span class="token punctuation">.</span>CommonArgs<span class="token punctuation">,</span>
                         <span class="token string">"business"</span><span class="token punctuation">:</span> wsParam<span class="token punctuation">.</span>BusinessArgs<span class="token punctuation">,</span>
                         <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"audio/L16;rate=16000"</span><span class="token punctuation">,</span>
                                  <span class="token string">"audio"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token string">"encoding"</span><span class="token punctuation">:</span> <span class="token string">"raw"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
                    d <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
                    ws<span class="token punctuation">.</span>send<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
                    status <span class="token operator">=</span> STATUS_CONTINUE_FRAME
                <span class="token keyword">elif</span> status <span class="token operator">==</span> STATUS_CONTINUE_FRAME<span class="token punctuation">:</span>
                    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"audio/L16;rate=16000"</span><span class="token punctuation">,</span>
                                  <span class="token string">"audio"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token string">"encoding"</span><span class="token punctuation">:</span> <span class="token string">"raw"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
                    ws<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">elif</span> status <span class="token operator">==</span> STATUS_LAST_FRAME<span class="token punctuation">:</span>
                    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"audio/L16;rate=16000"</span><span class="token punctuation">,</span>
                                  <span class="token string">"audio"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token string">"encoding"</span><span class="token punctuation">:</span> <span class="token string">"raw"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
                    ws<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>intervel<span class="token punctuation">)</span>
        ws<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">record_audio</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    FORMAT <span class="token operator">=</span> pyaudio<span class="token punctuation">.</span>paInt16  <span class="token comment" spellcheck="true"># 16-bit 深度</span>
    CHANNELS <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 单声道</span>
    RATE <span class="token operator">=</span> <span class="token number">16000</span>  <span class="token comment" spellcheck="true"># 采样率16kHz</span>
    CHUNK <span class="token operator">=</span> <span class="token number">1024</span>  <span class="token comment" spellcheck="true"># 每个块的帧数</span>
    frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 初始化pyaudio</span>
    p <span class="token operator">=</span> pyaudio<span class="token punctuation">.</span>PyAudio<span class="token punctuation">(</span><span class="token punctuation">)</span>
    stream <span class="token operator">=</span> p<span class="token punctuation">.</span>open<span class="token punctuation">(</span>format<span class="token operator">=</span>FORMAT<span class="token punctuation">,</span> channels<span class="token operator">=</span>CHANNELS<span class="token punctuation">,</span> rate<span class="token operator">=</span>RATE<span class="token punctuation">,</span> input<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> frames_per_buffer<span class="token operator">=</span>CHUNK<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始录音... 按下 'q' 键停止录音"</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>CHUNK<span class="token punctuation">)</span>
        frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> keyboard<span class="token punctuation">.</span>is_pressed<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 检测 'q' 键</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"录音结束"</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>

    <span class="token comment" spellcheck="true"># 停止并关闭音频流</span>
    stream<span class="token punctuation">.</span>stop_stream<span class="token punctuation">(</span><span class="token punctuation">)</span>
    stream<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 将录音数据保存为WAV文件</span>
    <span class="token keyword">with</span> wave<span class="token punctuation">.</span>open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>
        wf<span class="token punctuation">.</span>setnchannels<span class="token punctuation">(</span>CHANNELS<span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>setsampwidth<span class="token punctuation">(</span>p<span class="token punctuation">.</span>get_sample_size<span class="token punctuation">(</span>FORMAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>setframerate<span class="token punctuation">(</span>RATE<span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>writeframes<span class="token punctuation">(</span>b<span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>frames<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    audio_file <span class="token operator">=</span> <span class="token string">"output.wav"</span>  <span class="token comment" spellcheck="true"># 输出音频文件名</span>
    wsParam <span class="token operator">=</span> Ws_Param<span class="token punctuation">(</span>APPID<span class="token operator">=</span><span class="token string">'你的讯飞APPID'</span><span class="token punctuation">,</span> APISecret<span class="token operator">=</span><span class="token string">'你的讯飞APISecret'</span><span class="token punctuation">,</span>
                       APIKey<span class="token operator">=</span><span class="token string">'你的讯飞APIKey'</span><span class="token punctuation">,</span>
                       AudioFile<span class="token operator">=</span>audio_file<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 先录音</span>
    record_audio<span class="token punctuation">(</span>audio_file<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 创建WebSocket连接并发送音频</span>
    websocket<span class="token punctuation">.</span>enableTrace<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    wsUrl <span class="token operator">=</span> wsParam<span class="token punctuation">.</span>create_url<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ws <span class="token operator">=</span> websocket<span class="token punctuation">.</span>WebSocketApp<span class="token punctuation">(</span>wsUrl<span class="token punctuation">,</span> on_message<span class="token operator">=</span>on_message<span class="token punctuation">,</span> on_error<span class="token operator">=</span>on_error<span class="token punctuation">,</span> on_close<span class="token operator">=</span>on_close<span class="token punctuation">)</span>
    ws<span class="token punctuation">.</span>on_open <span class="token operator">=</span> on_open
    ws<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span>sslopt<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"cert_reqs"</span><span class="token punctuation">:</span> ssl<span class="token punctuation">.</span>CERT_NONE<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>代码大致流程就是：</li>
</ul>
<ol>
<li>运行脚本后直接进入语音输入状态，用户可以通过麦克风说话，说完的话通过pyaudio、wave等库生成符合API要求的语音文件；</li>
<li>生成语音文件后，通过WebSocket连接向讯飞服务器发送请求，并等待服务器返回结果，结果实际上是分词发送来的，可以拼接到<code>result</code>变量中；</li>
<li>接收完全部识别结果后，通过<code>classify</code>函数调用百度千帆的API，对识别结果进行分类，并打印出来。</li>
</ol>
<h1 id="🔥结果"><a href="#🔥结果" class="headerlink" title="🔥结果"></a>🔥结果</h1><ul>
<li>可以看到语言输入被正确识别，并且模型准确返回圆柱所对应的分类索引2<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"/2024/10/07/使用语音识别结合大模型实现命令分类/结果.mov","pic":"结果展示.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>Python</tag>
        <tag>API</tag>
        <tag>语音识别</tag>
      </tags>
  </entry>
  <entry>
    <title>基于图神经网络的金融异常检测</title>
    <url>/2024/09/26/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%87%91%E8%9E%8D%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="🔥概述"><a href="#🔥概述" class="headerlink" title="🔥概述"></a>🔥概述</h1><ul>
<li>本次任务使用图神经网络，以金融中异常检测为例，实现大规模图数据结构的分类预测。本任务基于的数据集DGraph，DGraph 是大规模动态图数据集的集合，由真实金融场景中随着时间演变事件和标签构成。<span id="more"></span></li>
<li>DGraph-Fin 是一个由数百万个节点和边组成的有向无边权的动态图。它代表了Finvolution Group用户之间的社交网络，其中一个节点对应一个Finvolution 用户，从一个用户到另一个用户的边表示该用户将另一个用户视为紧急联系人。 下面是位于dataset&#x2F;DGraphFin目录的DGraphFin数据集的描述:</li>
</ul>
<blockquote>
<p>x:  20维节点特征向量<br>y:  节点对应标签，一共包含四类。其中类1代表欺诈用户而类0代表正常用户(实验中需要进行预测的两类标签)，类2和类3则是背景用户，即无需预测其标签。<br>edge_index:  图数据边集,每条边的形式(id_a,id_b)，其中ids是x中的索引<br>edge_type: 共11种类型的边<br>edge_timestamp: 脱敏后的时间戳<br>train_mask, valid_mask, test_mask: 训练集，验证集和测试集掩码</p>
</blockquote>
<ul>
<li>本预测任务为识别欺诈用户的节点预测任务,只需要将欺诈用户（Class 1）从正常用户（Class 0）中区分出来。需要注意的是，其中测试集中样本对应的label均被标记为-100。</li>
</ul>
<h1 id="🔥图神经网络——SAGE"><a href="#🔥图神经网络——SAGE" class="headerlink" title="🔥图神经网络——SAGE"></a>🔥图神经网络——SAGE</h1><p>本次使用的SAGE主要思想是根据自身节点及其邻居节点的信息，通过某种聚合方式来更新自身节点信息，适用于动态图和大规模图场景。<br>主要特点<br>1.	采样策略：与传统的GNN方法需要在每个节点的所有邻居上进行计算不同，SAGE通过随机采样来选择一定数量的邻居节点，从而降低计算复杂度。<br>2.	聚合函数：SAGE采用多种聚合函数（如均值、LSTM、池化等）来合并邻居节点的信息，这样可以灵活地适应不同的应用场景。<br>3.	可扩展性：由于SAGE不依赖于整个图的结构，可以在训练过程中动态处理新节点和边，具有较强的可扩展性。<br>4.	半监督学习：SAGE支持半监督学习，可以在有标签和无标签的数据上进行训练，有助于提升模型性能。<br>具体流程<br>1.	节点采样：对于每个节点，从其邻居中随机选择一部分进行后续处理。<br>2.	信息聚合：使用选定的聚合函数整合邻居节点的特征信息。<br>3.	节点更新：将聚合后的信息与节点自身的特征结合，更新节点的表示。<br>4.	多层堆叠：通过多层的采样和聚合，逐层更新节点表示，最终得到节点的高维特征向量。</p>
<h1 id="🔥实现"><a href="#🔥实现" class="headerlink" title="🔥实现"></a>🔥实现</h1><p>首先调库</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> utils<span class="token punctuation">.</span>dgraphfin <span class="token keyword">import</span> DGraphFin
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>utils <span class="token keyword">import</span> prepare_folder
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>evaluator <span class="token keyword">import</span> Evaluator

<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn

<span class="token keyword">import</span> torch_geometric<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> T
<span class="token keyword">from</span> torch_geometric<span class="token punctuation">.</span>nn <span class="token keyword">import</span> GATConv<span class="token punctuation">,</span> GCNConv<span class="token punctuation">,</span> SAGEConv
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> torch_geometric<span class="token punctuation">.</span>data <span class="token keyword">import</span> Data
<span class="token keyword">import</span> os

<span class="token comment" spellcheck="true">#设置gpu设备</span>
device <span class="token operator">=</span> <span class="token number">0</span>
device <span class="token operator">=</span> f<span class="token string">'cuda:{device}'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span>
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数据处理与概览"><a href="#数据处理与概览" class="headerlink" title="数据处理与概览"></a>数据处理与概览</h2><p>然后对数据集进行概览，首先读取数据集为DGraphFin模式，注意<code>remove_edge_index=False</code>是为了保留数据当中的边的信息</p>
<pre class="line-numbers language-python"><code class="language-python">path<span class="token operator">=</span><span class="token string">'./datasets/'</span>          <span class="token comment" spellcheck="true"># 数据保存路径</span>
save_dir<span class="token operator">=</span><span class="token string">'./results/'</span>       <span class="token comment" spellcheck="true"># 模型保存路径</span>
dataset_name<span class="token operator">=</span><span class="token string">'DGraph'</span>
dataset <span class="token operator">=</span> DGraphFin<span class="token punctuation">(</span>root<span class="token operator">=</span>path<span class="token punctuation">,</span> name<span class="token operator">=</span>dataset_name<span class="token punctuation">,</span> transform<span class="token operator">=</span>T<span class="token punctuation">.</span>ToSparseTensor<span class="token punctuation">(</span>remove_edge_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
nlabels <span class="token operator">=</span> dataset<span class="token punctuation">.</span>num_classes       <span class="token comment" spellcheck="true"># 分类数2</span>
<span class="token keyword">if</span> dataset_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'DGraph'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    nlabels <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 本实验中仅需预测类0和类1</span>

data <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># data.adj_t = data.adj_t.to_symmetric() # 将有向图转化为无向图</span>

<span class="token keyword">if</span> dataset_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'DGraph'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 归一化</span>
    x <span class="token operator">=</span> data<span class="token punctuation">.</span>x
    x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> x<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    data<span class="token punctuation">.</span>x <span class="token operator">=</span> x
<span class="token keyword">if</span> data<span class="token punctuation">.</span>y<span class="token punctuation">.</span>dim<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
    data<span class="token punctuation">.</span>y <span class="token operator">=</span> data<span class="token punctuation">.</span>y<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

split_idx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'train'</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>train_mask<span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>valid_mask<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">:</span> data<span class="token punctuation">.</span>test_mask<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#划分训练集，验证集</span>

train_idx <span class="token operator">=</span> split_idx<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span>
result_dir <span class="token operator">=</span> prepare_folder<span class="token punctuation">(</span>dataset_name<span class="token punctuation">,</span><span class="token string">'mlp'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#feature</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#label</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">.</span>adj_t<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>预处理后得到数据data &#x3D; dataset[0]，再把数据进行归一化后打印出内容：</p>
<blockquote>
<p>Data(x&#x3D;[3700550,20],edge_index&#x3D;[2,4300999], edge_attr&#x3D;[4300999], y&#x3D;[3700550],train_mask&#x3D;[857899],valid_mask&#x3D;[183862],test_mask&#x3D;[183840], adj_t&#x3D;[3700550, 3700550])</p>
</blockquote>
<p>其中x是输入，20个特征维度，整个图有370多万个节点；430多万条边（edge_index）；edge_attr代表边的类型（有11种关系）；y仅1维度即类别编号；三个mask代表数据集被分为训练、验证、测试三个部分，分别用索引tensor存放；adj_t是邻接矩阵，包含了所有节点的连接情况的稀疏阵。<br>可以看到数据集异常庞大，进行训练对资源的压力也不言而喻。选用SAGE模型也是因为其对于大规模图的学习能力很强的同时又能降低复杂度。</p>
<h2 id="SAGE网络"><a href="#SAGE网络" class="headerlink" title="SAGE网络"></a>SAGE网络</h2><p>使用torch_geometric库当中的SAGEConv实现，其参数为输入特征维度和输出类别维度，很容易使用。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SAGE</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_feats<span class="token punctuation">,</span> h_feats<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>SAGE<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> SAGEConv<span class="token punctuation">(</span>in_feats<span class="token punctuation">,</span> h_feats<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> SAGEConv<span class="token punctuation">(</span>h_feats<span class="token punctuation">,</span> h_feats<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> SAGEConv<span class="token punctuation">(</span>h_feats<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> edge_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        h <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">,</span> edge_index<span class="token punctuation">)</span>
        h <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>
        h <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>h<span class="token punctuation">,</span> edge_index<span class="token punctuation">)</span>
        h <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>
        h <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>h<span class="token punctuation">,</span> edge_index<span class="token punctuation">)</span>
        <span class="token keyword">return</span> h

    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>reset_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2<span class="token punctuation">.</span>reset_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv3<span class="token punctuation">.</span>reset_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>训练步骤和常规的深度学习网络（如MLP、卷积神经网络等）的训练流程上是一致的，但是有以下几点需要注意。</p>
<ul>
<li>最重要的是和x一起输入模型前向传播的既可以是邻接矩阵也可以是边的索引，显然后者数据量更小更合适。</li>
<li>评估采用AUC，即通过对ROC曲线下各部分的面积求和而得。其中ROC曲线的横坐标是伪阳性率FP（也叫假正类率，False Positive Rate），纵坐标是真阳性率TP（真正类率，True Positive Rate）。</li>
<li>计算损失时一定要使用mask去访问训练集部分的节点，否则模型会找到标号为-100的测试集无法计算，而且验证集的节点也不应该被模型学到。</li>
<li>验证时，由于之前前向传播输入了整个图，所以只需要也通过mask访问验证集获得结果即可，此时模型进入评估状态，不会更新参数。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 重置参数</span>
    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 优化器</span>
    scheduler <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler<span class="token punctuation">.</span>ReduceLROnPlateau<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'min'</span><span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> factor<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 交叉熵损失</span>
    min_valid_loss <span class="token operator">=</span> <span class="token number">1e8</span>

    train_mask <span class="token operator">=</span> data<span class="token punctuation">.</span>train_mask            <span class="token comment" spellcheck="true"># 训练数据掩码</span>

    features <span class="token operator">=</span> data<span class="token punctuation">.</span>x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    labels <span class="token operator">=</span> data<span class="token punctuation">.</span>y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    adj <span class="token operator">=</span> data<span class="token punctuation">.</span>adj_t<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 邻接矩阵（可以代替edge输入到模型，模型也会识别）</span>
    edge <span class="token operator">=</span> data<span class="token punctuation">.</span>edge_index<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 边</span>

    eval_metric <span class="token operator">=</span> <span class="token string">'auc'</span>                     <span class="token comment" spellcheck="true"># 使用AUC衡量指标</span>
    evaluator <span class="token operator">=</span> Evaluator<span class="token punctuation">(</span>eval_metric<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 评估器</span>
    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 训练环节</span>
        out <span class="token operator">=</span> model<span class="token punctuation">(</span>features<span class="token punctuation">,</span> edge<span class="token punctuation">)</span>

        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>out<span class="token punctuation">[</span>train_mask<span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span>train_mask<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># Compute accuracy on training/validation/test</span>
        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token comment" spellcheck="true"># 验证环节</span>
            model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
            losses<span class="token punctuation">,</span> eval_results <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                node_id <span class="token operator">=</span> split_idx<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
                <span class="token comment" spellcheck="true"># out = model(features, edge)</span>
                y_pred <span class="token operator">=</span> out<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 分类概率</span>
                losses<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>out<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
                eval_results<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> evaluator<span class="token punctuation">.</span>eval<span class="token punctuation">(</span>labels<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span><span class="token punctuation">,</span> y_pred<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>eval_metric<span class="token punctuation">]</span>

        scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span>losses<span class="token punctuation">[</span><span class="token string">'valid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 学习率下降策略</span>
        train_eval<span class="token punctuation">,</span> valid_eval <span class="token operator">=</span> eval_results<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> eval_results<span class="token punctuation">[</span><span class="token string">'valid'</span><span class="token punctuation">]</span>
        train_loss<span class="token punctuation">,</span> valid_loss <span class="token operator">=</span> losses<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> losses<span class="token punctuation">[</span><span class="token string">'valid'</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> valid_loss <span class="token operator">&lt;</span> min_valid_loss<span class="token punctuation">:</span>
            min_valid_loss <span class="token operator">=</span> valid_loss
            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_dir<span class="token operator">+</span><span class="token string">'/model.pt'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最优模型保存</span>

        <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Epoch: {epoch:02d}, '</span>
                  f<span class="token string">'Loss: {loss:.4f}, '</span>
                  f<span class="token string">'Train: {100 * train_eval:.3f}, '</span> <span class="token comment" spellcheck="true"># 我们将AUC（百分制）</span>
                  f<span class="token string">'Valid: {100 * valid_eval:.3f} '</span><span class="token punctuation">)</span>

model <span class="token operator">=</span> SAGE<span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> nlabels<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
train<span class="token punctuation">(</span>data<span class="token punctuation">,</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>训练过程记录如下图，是纵轴值是AUC*100后的分数，可以看到过拟合状况不算很明显，收敛较为平滑。<br><img src="/2024/09/26/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%87%91%E8%9E%8D%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E8%AE%AD%E7%BB%83%E6%9B%B2%E7%BA%BF.png" alt="训练曲线"></p>
<h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>由于测试系统用的是CPU进行预测，资源相当有限，而题目又要求预测是对每个节点逐个预测，也就是如果有数万个测试节点，就需要调用数万次predict函数，这意味着常规预测下要将整个图的x和边输入到模型数万次，将是相当夸张的时间开销。所以本次测试采用的是在训练完之后调用最优模型，将整个图在设备上提前进行一次推理，得到的结果保存在pt文件当中，上传pt文件：</p>
<pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> SAGE<span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> nlabels<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'./results/model.pt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">,</span> data<span class="token punctuation">.</span>edge_index<span class="token punctuation">)</span>
    y_pred <span class="token operator">=</span> out<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> <span class="token string">'pred_result.pt'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>预测时只要以如下按节点索引访问数据即可，只需要读取一次文件，每次预测节点只要从pred张量中访问对应预测结果即可，将测试速度降低到极致。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> utils<span class="token punctuation">.</span>evaluator <span class="token keyword">import</span> Evaluator
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> torch_geometric<span class="token punctuation">.</span>nn <span class="token keyword">import</span> GATConv<span class="token punctuation">,</span> GCNConv<span class="token punctuation">,</span> SAGEConv

pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'./pred_result.pt'</span><span class="token punctuation">,</span> map_location<span class="token operator">=</span>torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 直接读取一次</span>
<span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>node_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 模型预测时，测试数据已经进行了归一化处理</span>
    y_pred <span class="token operator">=</span> pred<span class="token punctuation">[</span>node_id<span class="token punctuation">]</span>              <span class="token comment" spellcheck="true"># 根据索引快速访问结果</span>
    <span class="token keyword">return</span> y_pred
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试得到0.754的评分，相当可以。<br><img src="/2024/09/26/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%87%91%E8%9E%8D%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果"></p>
<ul>
<li>当然，这里也提供常规预测的方法供参考：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 生成 main.py 时请勾选此 cell</span>
<span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>node_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    加载模型和模型预测
    :param node_id: int, 需要进行预测节点的下标
    :return: tensor, 类0以及类1的概率, torch.size[1,2]
    """</span>
    model <span class="token operator">=</span> SAGE<span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> nlabels<span class="token punctuation">)</span>
    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'./results/model.pt'</span><span class="token punctuation">,</span> map_location<span class="token operator">=</span>torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 模型预测时，测试数据已经进行了归一化处理</span>
    <span class="token comment" spellcheck="true"># -------------------------- 实现模型预测部分的代码 ---------------------------</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
        out <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">,</span> data<span class="token punctuation">.</span>edge_index<span class="token punctuation">)</span>
        y_pred <span class="token operator">=</span> out<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>node_id<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># (N,num_classes)</span>

    <span class="token keyword">return</span> y_pred
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
        <tag>神经网络</tag>
        <tag>图神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DQN的机器人自动走迷宫</title>
    <url>/2024/09/26/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/</url>
    <content><![CDATA[<h1 id="🔥概述"><a href="#🔥概述" class="headerlink" title="🔥概述"></a>🔥概述</h1><ul>
<li>本次任务是使用DQN算法，训练一个机器人自动走迷宫。<br>Maze类会生成如下的随机迷宫<span id="more"></span>
<img src="/2024/09/26/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/%E9%9A%8F%E6%9C%BA%E8%BF%B7%E5%AE%AB.jpg" alt="随机迷宫"><br>Maze类中有许多方法，这次有用到的如下：</li>
</ul>
<ol>
<li>Maze(maze_size&#x3D;size) 来随机生成一个 size * size 大小的迷宫</li>
<li>print() 函数可以输出迷宫的 size 以及画出迷宫图</li>
<li>sense_robot() ：获取机器人在迷宫中目前的位置</li>
<li>move_robot(direction) ：根据输入方向移动默认机器人，若方向不合法则返回错误信息</li>
<li>can_move_actions(position)：获取当前机器人可以移动的方向</li>
</ol>
<h1 id="🔥DQN算法"><a href="#🔥DQN算法" class="headerlink" title="🔥DQN算法"></a>🔥DQN算法</h1><p><img src="/2024/09/26/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/DQN%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6.jpg" alt="DQN算法框架"></p>
<ul>
<li>如图，每次智能体根据当前状态state通过epsilon-贪婪算法选择动作，环境给出奖励reward和下一个状态next_state，得到的s、a、r、s’、done（done表示是否到达终点），将这个五元组数据加入经验回放池。</li>
<li>经验池累积足够多的数据后，再从中随机采样batch_size个数据进行一次训练（一个step），state和next_state分别输入main网络（也是评价网络）和目标网络进行前向传播，得到的输出即Q和Q_target放到公式当中计算MSE损失，然后就是反向传播更新<strong>main网络</strong>的参数。</li>
<li>每进行n个step，就把main网络的权重复制给目标网络，完成更新。</li>
<li>如此往复迭代，main网络就能有效地根据状态输出Q，智能体选取Q值最大的对应的动作，逐步完成走迷宫的任务。</li>
</ul>
<h1 id="🔥实现"><a href="#🔥实现" class="headerlink" title="🔥实现"></a>🔥实现</h1><p>首先是库调用：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> random
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> Maze <span class="token keyword">import</span> Maze
<span class="token keyword">from</span> Runner <span class="token keyword">import</span> Runner
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> QRobot <span class="token keyword">import</span> QRobot
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> collections
<span class="token keyword">import</span> copy

device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="经验回放池"><a href="#经验回放池" class="headerlink" title="经验回放池"></a>经验回放池</h2><p>然后是经验回放池，内置的<code>build_full_view</code>函数相当于金手指，将智能体放在每一个位置进行遍历，然后遍历其各个方向获取五元组，放入经验池，这样做可以使得经验池有很全面的数据集，这样训练的效率更高。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ReplayBuffer</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">''' 经验回放池 '''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>buffer <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span>capacity<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 队列,先进先出</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 将数据加入buffer</span>
        self<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 从buffer中采样数据，数量为batch_size</span>
        transitions <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>
        state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>transitions<span class="token punctuation">)</span>
        <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>next_state<span class="token punctuation">)</span><span class="token punctuation">,</span> done

    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 目前buffer中数据的数量</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">build_full_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maze<span class="token punctuation">:</span> Maze<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 获取视野</span>
        maze_copy <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>maze<span class="token punctuation">)</span>
        maze_size <span class="token operator">=</span> maze_copy<span class="token punctuation">.</span>maze_size
        actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>maze_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>maze_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
                state <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                <span class="token keyword">if</span> state <span class="token operator">==</span> maze_copy<span class="token punctuation">.</span>destination<span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token keyword">for</span> action_index<span class="token punctuation">,</span> action <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    maze_copy<span class="token punctuation">.</span>robot<span class="token punctuation">[</span><span class="token string">"loc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> state
                    reward <span class="token operator">=</span> maze_copy<span class="token punctuation">.</span>move_robot<span class="token punctuation">(</span>action<span class="token punctuation">)</span>
                    next_state <span class="token operator">=</span> maze_copy<span class="token punctuation">.</span>sense_robot<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    is_terminal <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> next_state <span class="token operator">==</span> maze_copy<span class="token punctuation">.</span>destination <span class="token operator">or</span> next_state <span class="token operator">==</span> state <span class="token keyword">else</span> <span class="token number">0</span>
                    self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>state<span class="token punctuation">,</span> action_index<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> is_terminal<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="DQN网络"><a href="#DQN网络" class="headerlink" title="DQN网络"></a>DQN网络</h2><p>然后是DQN网络的实现，很简单，就是很小的MLP</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DQN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">''' 定义Q网络 '''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state_size<span class="token punctuation">,</span> action_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>DQN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>state_size<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> action_size<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="智能体"><a href="#智能体" class="headerlink" title="智能体"></a>智能体</h2><p>然后就是最主要智能体类，这里介绍一下各个函数</p>
<ul>
<li>首先初始化一下用到的参数和对象。首先设定了reward的规则，撞墙和普通移动都有负收益，到达终点的奖励根据地图大小而不同。</li>
<li>折扣因子用于损失函数计算，epsilon用于智能体贪婪算法，其值越大越可能随机选取一个方向动作，反之则会更容易选取Q最大的那个动作。</li>
<li>在初始化就可以直接开始调用金手指获得优质的经验回放池，然后调用训练函数（后续介绍）。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span>QRobot<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">''' 定义智能体 '''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maze<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>Robot<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>maze<span class="token punctuation">)</span>
        maze<span class="token punctuation">.</span>set_reward<span class="token punctuation">(</span>reward<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 回报规则</span>
            <span class="token string">"hit_wall"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">,</span>
            <span class="token string">"destination"</span><span class="token punctuation">:</span> maze<span class="token punctuation">.</span>maze_size <span class="token operator">**</span> <span class="token number">2.0</span><span class="token punctuation">,</span>
            <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maze <span class="token operator">=</span> maze
        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> <span class="token number">0.90</span>                       <span class="token comment" spellcheck="true"># 折扣因子</span>
        self<span class="token punctuation">.</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>              <span class="token comment" spellcheck="true"># 学习率</span>
        self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> <span class="token number">0.1</span>                        <span class="token comment" spellcheck="true"># 探索率</span>
        self<span class="token punctuation">.</span>epsilon_decay <span class="token operator">=</span> <span class="token number">0.9995</span>             <span class="token comment" spellcheck="true"># 探索率衰减率</span>
        self<span class="token punctuation">.</span>epsilon_min <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token comment" spellcheck="true"># 最小探索率</span>
        self<span class="token punctuation">.</span>replaybuffer <span class="token operator">=</span> ReplayBuffer<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 经验回放池</span>
        self<span class="token punctuation">.</span>model <span class="token operator">=</span> DQN<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Q网络</span>
        self<span class="token punctuation">.</span>target_model <span class="token operator">=</span> DQN<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 目标网络</span>
        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>self<span class="token punctuation">.</span>learning_rate<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>action_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"u"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 动作字典</span>
        self<span class="token punctuation">.</span>action_dict2 <span class="token operator">=</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> self<span class="token punctuation">.</span>action_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true"># 反转字典</span>

        self<span class="token punctuation">.</span>replaybuffer<span class="token punctuation">.</span>build_full_view<span class="token punctuation">(</span>maze<span class="token operator">=</span>maze<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开视野</span>
        self<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 训练</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>epsilon-贪婪算法如下，该任务中随机选择动作可以使用给的<code>can_move_actions</code>函数来排除撞墙方向，也可以就纯随机选取，都是可以收敛的。</p>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">take_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># epsilon-贪心策略获取动作</span>
        <span class="token keyword">if</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>epsilon<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机选择动作</span>
            <span class="token comment" spellcheck="true"># action = random.choice(self.maze.can_move_actions(self.maze.sense_robot()))</span>
            action <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>                                          <span class="token comment" spellcheck="true"># 选择具有最高Q值的动作</span>
            self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                q_values <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>state<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>
            action <span class="token operator">=</span> self<span class="token punctuation">.</span>action_dict2<span class="token punctuation">.</span>get<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>q_values<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> action
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>训练函数如下，不断地进行循环，进行网络前向传播参数更新，然后测试智能体是否能在指定步数内到达终点，否则就继续训练。</p>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 训练函数</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>replaybuffer<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>maze<span class="token punctuation">.</span>maze_size <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                a<span class="token punctuation">,</span> r <span class="token operator">=</span> self<span class="token punctuation">.</span>test_update<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> r <span class="token operator">==</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">.</span>reward<span class="token punctuation">[</span><span class="token string">"destination"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数更新函数如下，流程就是从经验池获取数据，然后输入两个网络进行前向传播，然后计算损失，更新参数，就是很深度学习的一个流程，这里更新目标网络的频率可以自主设置。</p>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 更新网络</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>replaybuffer<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> batch_size<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token comment" spellcheck="true"># 从经验池抽样s,a,r,s’,done</span>
        b_s<span class="token punctuation">,</span> b_a<span class="token punctuation">,</span> b_r<span class="token punctuation">,</span> b_ns<span class="token punctuation">,</span> b_d <span class="token operator">=</span> self<span class="token punctuation">.</span>replaybuffer<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>
        transition_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'states'</span><span class="token punctuation">:</span> b_s<span class="token punctuation">,</span> <span class="token string">'actions'</span><span class="token punctuation">:</span> b_a<span class="token punctuation">,</span> <span class="token string">'next_states'</span><span class="token punctuation">:</span> b_ns<span class="token punctuation">,</span>
            <span class="token string">'rewards'</span><span class="token punctuation">:</span> b_r<span class="token punctuation">,</span> <span class="token string">'dones'</span><span class="token punctuation">:</span> b_d<span class="token punctuation">}</span>
        states <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>transition_dict<span class="token punctuation">[</span><span class="token string">'states'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                              dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        actions <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>transition_dict<span class="token punctuation">[</span><span class="token string">'actions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        rewards <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>transition_dict<span class="token punctuation">[</span><span class="token string">'rewards'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                               dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        next_states <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>transition_dict<span class="token punctuation">[</span><span class="token string">'next_states'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                   dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        dones <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>transition_dict<span class="token punctuation">[</span><span class="token string">'dones'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                             dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 计算Q值及其目标值</span>
        Q_targets <span class="token operator">=</span> rewards <span class="token operator">+</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> self<span class="token punctuation">.</span>target_model<span class="token punctuation">(</span>next_states<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>dones<span class="token punctuation">)</span>
        Q_expect <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> actions<span class="token punctuation">.</span>to<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 求损失</span>
        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 梯度清零</span>
        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>criterion<span class="token punctuation">(</span>Q_expect<span class="token punctuation">,</span> Q_targets<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 损失</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 反向传播</span>
        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 更新Q网络参数</span>

        <span class="token comment" spellcheck="true"># if self.count % 10 == 0:</span>
        self<span class="token punctuation">.</span>target_model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 目标网络参数更新</span>
            <span class="token comment" spellcheck="true"># self.count += 1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就是上传测试系统测试的几个函数，是为了符合测试要求的，不用管太多，注意测试时就不用epsilon-贪婪算法，直接选Q值最大的动作。</p>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">train_update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        以训练状态选择动作并更新Deep Q network的相关参数
        :return :action, reward 如："u", -1
        """</span>
        <span class="token comment" spellcheck="true"># -----------------请实现你的算法代码--------------------------------------</span>
        state <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>maze<span class="token punctuation">.</span>sense_robot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
        action <span class="token operator">=</span> self<span class="token punctuation">.</span>take_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>
        reward <span class="token operator">=</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">.</span>move_robot<span class="token punctuation">(</span>action<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># -----------------------------------------------------------------------</span>
        <span class="token keyword">return</span> action<span class="token punctuation">,</span> reward

    <span class="token keyword">def</span> <span class="token function">test_update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        以测试状态选择动作并更新Deep Q network的相关参数
        :return : action, reward 如："u", -1
        """</span>
        <span class="token comment" spellcheck="true"># -----------------请实现你的算法代码--------------------------------------</span>
        state <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>maze<span class="token punctuation">.</span>sense_robot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            q_values <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>state<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>
        action <span class="token operator">=</span> self<span class="token punctuation">.</span>action_dict2<span class="token punctuation">.</span>get<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>q_values<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        reward <span class="token operator">=</span> self<span class="token punctuation">.</span>maze<span class="token punctuation">.</span>move_robot<span class="token punctuation">(</span>action<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># -----------------------------------------------------------------------</span>

        <span class="token keyword">return</span> action<span class="token punctuation">,</span> reward
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥测试"><a href="#🔥测试" class="headerlink" title="🔥测试"></a>🔥测试</h1><p>接下来在本地进行一下调试，代码如下Runner就是给的一个跑通流程的代码，用就行了，也可以自己实现，大体上就是调用之前的update函数。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> QRobot <span class="token keyword">import</span> QRobot
<span class="token keyword">from</span> Maze <span class="token keyword">import</span> Maze
<span class="token keyword">from</span> Runner <span class="token keyword">import</span> Runner

random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">"""  Deep Qlearning 算法相关参数： """</span>

epoch <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># 训练轮数</span>
maze_size <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment" spellcheck="true"># 迷宫size</span>
training_per_epoch <span class="token operator">=</span> <span class="token number">50</span>

<span class="token triple-quoted-string string">""" 使用 DQN 算法训练 """</span>

g <span class="token operator">=</span> Maze<span class="token punctuation">(</span>maze_size<span class="token operator">=</span>maze_size<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
r <span class="token operator">=</span> Robot<span class="token punctuation">(</span>g<span class="token punctuation">)</span>
runner <span class="token operator">=</span> Runner<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
runner<span class="token punctuation">.</span>run_training<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> training_per_epoch<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># runner.run_testing()</span>
runner<span class="token punctuation">.</span>plot_results<span class="token punctuation">(</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span> re <span class="token operator">=</span> r<span class="token punctuation">.</span>test_update<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> re <span class="token operator">==</span> maze<span class="token punctuation">.</span>reward<span class="token punctuation">[</span><span class="token string">"destination"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>得到训练结果，直接上11×11大小的迷宫</p>
<p><img src="/2024/09/26/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/11%E4%B9%9811%E8%BF%B7%E5%AE%AB%E8%AE%AD%E7%BB%83%E7%BB%93%E6%9E%9C.jpg" alt="11乘11迷宫训练结果"></p>
<p>输入到系统测试，有3×3、5×5、11×11的迷宫，都测试通过，这里展示11×11的结果<br><img src="/2024/09/26/%E5%9F%BA%E4%BA%8EDQN%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%87%AA%E5%8A%A8%E8%B5%B0%E8%BF%B7%E5%AE%AB/11%E4%B9%9811%E8%BF%B7%E5%AE%AB%E7%BB%93%E6%9E%9C.png" alt="11乘11迷宫结果"></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
        <tag>神经网络</tag>
        <tag>DQN</tag>
      </tags>
  </entry>
  <entry>
    <title>文本转语音模块SNR9816TTS——结合语言模型进行对话</title>
    <url>/2024/01/19/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97SNR9816TTS%E2%80%94%E2%80%94%E7%BB%93%E5%90%88%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%AF%9D/</url>
    <content><![CDATA[<blockquote>
<p>本文基于的工作：<a href="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/" title="ESP32聊天助手——文心一言">ESP32实现的文本对话——基于文心一言</a><br>模块的资料：<a href="https://pan.baidu.com/s/1SYjj6a_ruBu_QVHq4mydgg?from=init&_at_=1705638174409#list/path=%2F">https://pan.baidu.com/s/1SYjj6a_ruBu_QVHq4mydgg?from=init&amp;_at_=1705638174409#list/path=%2F</a><br>提取码：0000</p>
</blockquote>
<ul>
<li>我们将使用 SNR9816TTS 模块将大语言模型输出的文本转为语音后进行播放。  <span id="more"></span></li>
</ul>
<h1 id="🔥模块介绍"><a href="#🔥模块介绍" class="headerlink" title="🔥模块介绍"></a>🔥模块介绍</h1><ul>
<li>SNR9816TTS是基于语音合成算法开发的一款高流畅度，高自然度的优美人声语音合成模块。该模块方案基于新一代的神经网络算法，纯中文版选取了优质的女声发音人(默认)和男声发音人(指令切换)，中英文版只支持女声发音人，以满足各种应用场景的合成播报。模块以中文为主，支持数字、英文(纯中文版:单个字母发音、中英文版:英文单词发音)，文本编码支持GB2312。优异的合成效果(可懂度、清晰度、自然度、表现力、节奏&#x2F;停顿、语速、语调、音质、音色、理解程度)方面有显著提升。</li>
<li>搭配对应的上位机测试工具(TTS TOOL)，模块可以通过串口(UART)接收合成的文本，直接合成输出语音播报。</li>
<li>资料链接也提供了arduino、STM32、52单片机的例程，我们将使用arduino程序做小幅改动搭载在ESP32上进行使用。</li>
</ul>
<p><img src="/2024/01/19/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97SNR9816TTS%E2%80%94%E2%80%94%E7%BB%93%E5%90%88%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%AF%9D/%E6%A8%A1%E5%9D%97%E5%A4%96%E8%A7%82.jpg" alt="模块外观"></p>
<ul>
<li>引脚定义如下：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">引脚号</th>
<th align="center">引脚名称</th>
<th align="center">类型</th>
<th align="center">IO电压</th>
<th align="center">上电默认状态</th>
<th align="center">功能定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">DAC</td>
<td align="center">O</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">DAC通道音频输出</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">BAUD</td>
<td align="center">I</td>
<td align="center">3.3V</td>
<td align="center">低电平</td>
<td align="center">设置UART通信波特率，通电前设置一次<br>默认低电平(引脚悬空)：115200bps<br>高电平(3.3V)：9600bps</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">SPKP</td>
<td align="center">O</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">喇叭输出</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">SPKP</td>
<td align="center">O</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">喇叭输出</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">GND</td>
<td align="center">P</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">电源地(推荐电源接入)</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">5V</td>
<td align="center">P</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">5V电源(推荐电源输接入)</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">5V</td>
<td align="center">P</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">5V电源(不推荐电源接入)</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">3V3</td>
<td align="center">P</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">3.3V电源输出，电流不超过10mA</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">TICP</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">ICP烧录接口</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">RICP</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">ICP烧录接口</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">GND</td>
<td align="center">P</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">电源地(不推荐电源接入)</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">RX</td>
<td align="center">I</td>
<td align="center">3.3V</td>
<td align="center">高电平</td>
<td align="center">UART接收器数据输入，<br>模块通信控制接口</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">TX</td>
<td align="center">O</td>
<td align="center">3.3V</td>
<td align="center">高电平</td>
<td align="center">UART发送器数据输出，<br>模块通信控制接口</td>
</tr>
</tbody></table>
<h1 id="🔥接线图"><a href="#🔥接线图" class="headerlink" title="🔥接线图"></a>🔥接线图</h1><ul>
<li>接线很简单，就是将ESP32和TTS模块的串口互联，并注意一定要 <em><strong>共地</strong></em> ，然后TTS外接喇叭，同时分别为两者提供电源。</li>
<li>ESP32这里用的是DEVKITV1版本，其他的版本可以随情况变化引脚。<br><img src="/2024/01/19/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97SNR9816TTS%E2%80%94%E2%80%94%E7%BB%93%E5%90%88%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%AF%9D/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%8E%A5%E7%BA%BF%E5%9B%BE.png" alt="接线图"></li>
</ul>
<h1 id="🔥通信"><a href="#🔥通信" class="headerlink" title="🔥通信"></a>🔥通信</h1><ul>
<li><p>该模块设有多个命令，包括合成语音、暂停合成、终止合成、继续合成，还有调节音量、语速、音调，可以查询模块工作状态，甚至添加预设好的提示音、铃声等。这里只用语音合成和查询工作状态两个语句。其它的可以参考链接内有的PDF文档。</p>
</li>
<li><p>语音合成：</p>
<table>
<thead>
<tr>
<th align="center">帧头（1byte）</th>
<th align="center">数据长度（2byte）</th>
<th align="center">命令字（1byte）</th>
<th align="center">编码参数（1byte）</th>
<th align="center">文本&#x2F;GB2312编码（N byte）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0xFD</td>
<td align="center">0x–(高8位)，0x–（低8位）<br>长度&#x3D;命令字+编码参数+文本</td>
<td align="center">0x01</td>
<td align="center">0x01</td>
<td align="center">文本对应的GB2312编码</td>
</tr>
</tbody></table>
</li>
<li><p>通信成功返回 0x41</p>
</li>
<li><p>查询状态：</p>
<table>
<thead>
<tr>
<th align="center">发送数据</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0xFD 0x00 0x01 0x21</td>
<td align="center">每次发送文本前都应该查询工作状态，必须处于空闲状态，才可以发送新的合成文本</td>
</tr>
</tbody></table>
</li>
<li><p>返回 0x4E 表示忙，0x4F 表示空闲，其他情况说明通信异常</p>
</li>
</ul>
<h1 id="🔥代码"><a href="#🔥代码" class="headerlink" title="🔥代码"></a>🔥代码</h1><p>承接上一次的代码，已经完成了与大模型对话的功能（需要在确保<a href="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/" title="ESP32聊天助手——文心一言">上期</a>已实现的基础上继续测试），我们只需要实现对模块的控制功能即可。</p>
<ul>
<li>将接下来的三个文件放在同一个文件夹，将ino文件烧录ESP32。</li>
</ul>
<h2 id="TTS-cpp"><a href="#TTS-cpp" class="headerlink" title="TTS.cpp"></a>TTS.cpp</h2><ul>
<li>该文件完成了对TTS模块的使用，设置了一个TTS类，对串口进行初始化，设置了语音合成和状态查询两个函数，语音合成会先进行一次状态查询，总共用到了两个串口，Serial和Serial2，前者是我们输入问题的串口，使用Arduino平台的串口窗口即可，后者是ESP32和TTS模块通信的串口（要接线的）。</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"TTS.h"</span></span>

TTSModule<span class="token operator">::</span><span class="token function">TTSModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> TTSModule<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Serial2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">,</span> SERIAL_8N1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Serial2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid EspSoftwareSerial pin configuration, check config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">delay</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> 
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token string">"语音模块就绪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> TTSModule<span class="token operator">::</span><span class="token function">speak</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">workstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tts busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tts wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Speaking: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  String utf8_str <span class="token operator">=</span> data<span class="token punctuation">;</span>
  String gb2312_str <span class="token operator">=</span> GB<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>utf8_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> head<span class="token punctuation">[</span>gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> gb2312_data<span class="token punctuation">[</span>gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>gb2312_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>gb2312_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>gb2312_data<span class="token punctuation">,</span> gb2312_str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dat_len <span class="token operator">=</span> gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dat_len <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dat_len<span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> gb2312_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  head<span class="token punctuation">[</span>gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head<span class="token punctuation">[</span>gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> gb2312_str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Serial2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> TTSModule<span class="token operator">::</span><span class="token function">workstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> head<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  head<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Serial2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>head<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial2<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  byte response <span class="token operator">=</span> Serial2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token number">0x4E</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token number">0x4F</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="TTS-h"><a href="#TTS-h" class="headerlink" title="TTS.h"></a>TTS.h</h2><ul>
<li>TTS.cpp文件的头文件</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> TTS_MODULE_H</span>
<span class="token macro property">#<span class="token directive keyword">define</span> TTS_MODULE_H</span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UTF8ToGB2312.h"</span></span>

<span class="token keyword">class</span> <span class="token class-name">TTSModule</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">TTSModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> <span class="token function">workstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token function">snr9816tts_say_sentence</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>sentence<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ino"><a href="#ino" class="headerlink" title="ino"></a>ino</h2><ul>
<li>在上期的代码基础上，在setup调用了TTS初始化，在loop中收到语言模型答案时调用speak函数，注意把access token 和 wifi 进行更改。</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WiFi.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;HTTPClient.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ArduinoJson.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"TTS.h"</span></span>

TTSModule ttsModule<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 1. Replace with your network credentials</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ssid <span class="token operator">=</span> <span class="token string">"wifi名称"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password <span class="token operator">=</span> <span class="token string">"wifi密码"</span><span class="token punctuation">;</span>

String inputText <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2. Replace with your access_token</span>
String apiUrl <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=xxxxx"</span><span class="token punctuation">;</span>

String answer<span class="token punctuation">;</span>
String <span class="token function">getGPTAnswer</span><span class="token punctuation">(</span>String inputText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  HTTPClient http<span class="token punctuation">;</span>
  http<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  http<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//超过时间，回答超时（ms）</span>
  http<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// http.addHeader("access_token", String(access_token));</span>
  String payload <span class="token operator">=</span> <span class="token string">"{\"messages\":[{\"role\": \"user\",\"content\": \""</span> <span class="token operator">+</span> inputText <span class="token operator">+</span> <span class="token string">"\"}],\"disable_search\": false,\"enable_citation\": false}"</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> httpResponseCode <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponseCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String response <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    http<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Parse JSON response</span>
    DynamicJsonDocument <span class="token function">jsonDoc</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">deserializeJson</span><span class="token punctuation">(</span>jsonDoc<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String outputText <span class="token operator">=</span> jsonDoc<span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> outputText<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Serial.println(outputText);</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error %i \n"</span><span class="token punctuation">,</span> httpResponseCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&lt;error>"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ttsModule<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// Initialize Serial</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// Connect to Wi-Fi network</span>
  WiFi<span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>WIFI_STA<span class="token punctuation">)</span><span class="token punctuation">;</span>
  WiFi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Connecting to WiFi .."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> WL_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">localIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  answer <span class="token operator">=</span> <span class="token function">getGPTAnswer</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Answer: "</span> <span class="token operator">+</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter a prompt:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// do nothing</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputText <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readStringUntil</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// inputText.trim();</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n Input:"</span><span class="token operator">+</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    answer <span class="token operator">=</span> <span class="token function">getGPTAnswer</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Answer: "</span> <span class="token operator">+</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter a prompt:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ttsModule<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥测试"><a href="#🔥测试" class="headerlink" title="🔥测试"></a>🔥测试</h1><h2 id="上位机软件"><a href="#上位机软件" class="headerlink" title="上位机软件"></a>上位机软件</h2><ul>
<li>先使用模块官方提供的上位机软件进行调试（在链接有），其实就是一个定制化的串口调试器，可以看到有之前提到的所有功能，在这里都可以方便调试。</li>
<li>首先接线只需将ESP32暂时换成USB转串口的模块即可，还是 TX&#x2F;RX&#x2F;GND 三根线就行了。然后插上电脑，选择对应 COM 口并打开。</li>
<li>先点击工作状态查询，下方收发窗口中显示的发送和接收的信息都符合通信协议。</li>
<li>然后测试语音，这里我输入12，语音播报“十二”而不是“一二”，因为该模块能够实现对于数字的口语化。观察收发窗口可以看到返回了 0x41，说明通信正常。<br><img src="/2024/01/19/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97SNR9816TTS%E2%80%94%E2%80%94%E7%BB%93%E5%90%88%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%AF%9D/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%B0%83%E8%AF%95.jpg" alt="上位机调试"></li>
<li>后面我也调试了音量、提示音等其他功能也是能正常运作，在此不多展示，说明模块是正常工作的，接下来只需验证代码。</li>
</ul>
<h2 id="正式调试"><a href="#正式调试" class="headerlink" title="正式调试"></a>正式调试</h2><ul>
<li>按接线图接线后，烧录ESP32代码，上电，即可在Arduino的串口界面进行验证。</li>
<li>先通电时发出“语音模块就绪”（视频没展示），说明TTS模块可以工作，然后在输入框输入问题，得到了对应的语音结果，说明调试成功。<br><img src="/2024/01/19/%E6%96%87%E6%9C%AC%E8%BD%AC%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97SNR9816TTS%E2%80%94%E2%80%94%E7%BB%93%E5%90%88%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%AF%9D/%E6%AD%A3%E5%BC%8F%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.jpg" alt="正式调试结果"><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"/2024/01/19/文本转语音模块SNR9816TTS——结合语言模型进行对话/调试结果.mov","pic":"正式调试结果.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>
<li>注意，复杂问题通常要等待一段时间才能回复。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>嵌入式</category>
        <category>机器学习</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>ESP32</tag>
        <tag>LLM</tag>
        <tag>TTS</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32聊天助手——文心一言</title>
    <url>/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/</url>
    <content><![CDATA[<h1 id="🔥前言"><a href="#🔥前言" class="headerlink" title="🔥前言"></a>🔥前言</h1><p>随着人工智能技术的不断发展，自然语言处理领域也得到了广泛的关注和应用。在这个领域中，文心一言作为一款强大的自然语言处理工具，具有许多重要的应用价值。本文将重点介绍如何通过ESP32接入国产大模型之文心一言api，以及其中的重点词汇或短语。  <span id="more"></span></p>
<h2 id="了解文心一言"><a href="#了解文心一言" class="headerlink" title="了解文心一言"></a>了解文心一言</h2><p>文心一言是百度打造出来的人工智能大语言模型，具备跨模态、跨语言的深度语义理解与生成能力，文心一言有五大能力，文学创作、商业文案创作、数理逻辑推算、中文理解、多模态生成，其在搜索问答、内容创作生成、智能办公等众多领域都有更广阔的想象空间。文心一言企业服务由千帆大模型平台提供，包括推理服务及大模型微调等一系列开发和应用工具链。文心一言大模型现已升级至4.0，企业客户可通过百度智能云千帆大模型平台申请接入。</p>
<h2 id="接入文心一言"><a href="#接入文心一言" class="headerlink" title="接入文心一言"></a>接入文心一言</h2><p>API 列表<br>百度智能云千帆平台提供了丰富的API，保留对话Chat、续写Completions、向量Embeddings、插件应用、Prompt工程、大模型训练、管理及服务等API能力，详情请查看<a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Nlks5zkzu">API列表</a>。</p>
<ol>
<li>大模型相关</li>
</ol>
<blockquote>
<ul>
<li>对话Chat：支持创建chat，用于发起一次对话。</li>
<li>续写Completions：支持创建completion，用于发起一次续写请求，不支持多轮会话等。</li>
<li>向量Embeddings：支持Embeddings，用于根据输入内容生成对应的向量表示。</li>
<li>自定义模型导入：支持HuggingFace Transformer架构的自定义模型导入，提供自定义模型导入相关API能力。</li>
<li>图像Images：提供图像相关API能力。</li>
</ul>
</blockquote>
<ol start="2">
<li>插件应用：提供域内知识搜索增强插件API相关能力。</li>
<li>Prompt工程：提供模版相关API能力。</li>
<li>大模型训练：提供创建训练任务、任务运行、停止任务运行及获取任务运行详情等API能力。</li>
<li>大模型管理：提供获取模型、模型版本详情及将训练任务发布为模型等API能力。</li>
<li>大模型服务：提供创建服务、获取服务详情等API能力。</li>
</ol>
<h1 id="🔥API-调用流程简介"><a href="#🔥API-调用流程简介" class="headerlink" title="🔥API 调用流程简介"></a>🔥API 调用流程简介</h1><p>API 的调用流程如下图所示。</p>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/API%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B.jpg" alt="API调用流程"></p>
<ol>
<li>创建一个千帆应用。根据实际需求创建千帆应用，创建成功后，获取AppID、API Key、Secret Key 等信息。</li>
<li>API 授权。对应用的 AppID 进行授权。</li>
<li>获取接口访问凭证 access_token 。根据第1步获取的 API Key 和 Secret Key ，调用获取<a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Ilkkrb0i5">access_token</a>接口获取 access_token ，通过 access_token 鉴权调用者身份。</li>
<li>调用API接口。例如调用ERNIE-Bot相关接口，详见<a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Nlks5zkzu">API列表</a>。</li>
</ol>
<h1 id="🔥API-调用流程"><a href="#🔥API-调用流程" class="headerlink" title="🔥API 调用流程"></a>🔥API 调用流程</h1><h3 id="步骤一-创建千帆应用"><a href="#步骤一-创建千帆应用" class="headerlink" title="步骤一. 创建千帆应用"></a>步骤一. 创建千帆应用</h3><p>（1）登录百度智能云千帆控制台。</p>
<p>请您注册并登录<a href="https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application">百度智能云千帆控制台</a>。</p>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E5%8D%83%E5%B8%86%E6%8E%A7%E5%88%B6%E5%8F%B0.jpg" alt="千帆控制台"></p>
<p>注意：为保障服务稳定运行，账户最好不处于欠费状态。</p>
<p>（2）创建千帆应用</p>
<p>进入<a href="https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application/create">控制台创建应用</a>。</p>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E5%88%9B%E5%BB%BA%E5%8D%83%E5%B8%86%E5%BA%94%E7%94%A8.jpg" alt="创建千帆应用"></p>
<p>（3）创建应用后，获取AppID、API Key、Secret Key。</p>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E8%8E%B7%E5%8F%96key.jpg" alt="获取key"></p>
<h3 id="步骤二-调用API接口"><a href="#步骤二-调用API接口" class="headerlink" title="步骤二. 调用API接口"></a>步骤二. 调用API接口</h3><p>调用千帆提供的相关接口，如ERNIE-Bot等，详见<a href="https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Nlks5zkzu">API列表</a>。</p>
<ol>
<li>ERNIE-Bot<br>我们选择ERNIE-Bot：ERNIE-Bot是百度自行研发的大语言模型，覆盖海量中文数据，具有更强的对话问答、内容创作生成等能力。</li>
</ol>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E5%88%9B%E5%BB%BAchat.jpg" alt="创建chat"></p>
<ol start="2">
<li>在线调试<br>百度智能云千帆提供了 API在线调试平台-示例代码，用于帮助开发者调试接口，平台集成快速检索、查看开发文档、查看在线调用的请求内容和返回结果、复制和下载示例代码等功能，简单易用，更多内容请查看API在线调试介绍。</li>
</ol>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.jpg" alt="进入示例代码"><br>  3. 获取AccessToken<br>应用列表选择自己创建的《ESP32语音聊天助手》，采用C#示例代码，<br><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/accesstoken.jpg" alt="获取AccessToken"></p>
<p>然后点击调试，复制获取的AccessToken</p>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/accesstoken2.jpg" alt="获取AccessToken"><br>1处粘贴上面的AccessToken，在2处中括号中输入</p>
<blockquote>
<p>“role”:“user”,“content”:“介绍一下你自己”</p>
</blockquote>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E8%B0%83%E8%AF%95.jpg" alt="调试"><br>调试结果如下  </p>
<p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.jpg" alt="调试结果"><br>查看代码需要三部分，地址、请求头、body<br><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81.jpg" alt="查看代码"></p>
<pre><code>&quot;https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=xxxxx&quot;
&quot;Content-Type&quot;, &quot;application/json&quot;
&quot;&#123;&quot;&quot;messages&quot;&quot;:[&#123;&quot;&quot;role&quot;&quot;:&quot;&quot;user&quot;&quot;,&quot;&quot;content&quot;&quot;:&quot;&quot;介绍一下你自己&quot;&quot;&#125;,&#123;&quot;&quot;role&quot;&quot;:&quot;&quot;assistant&quot;&quot;,&quot;&quot;content&quot;&quot;:&quot;&quot;您好，我是文心一言，英文名是ERNIE Bot。我能够与人对话互动，回答问题，协助创作，高效便捷地帮助人们获取信息、知识和灵感。&quot;&quot;&#125;],&quot;&quot;disable_search&quot;&quot;:false,&quot;&quot;enable_citation&quot;&quot;:false&#125;&quot;
</code></pre>
<h1 id="🔥核心代码"><a href="#🔥核心代码" class="headerlink" title="🔥核心代码"></a>🔥核心代码</h1><p>ESP32 Arduino代码如下</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WiFi.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;HTTPClient.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ArduinoJson.h></span></span>

<span class="token comment" spellcheck="true">// 1. Replace with your network credentials</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ssid <span class="token operator">=</span> <span class="token string">"wifi名称"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password <span class="token operator">=</span> <span class="token string">"wifi密码"</span><span class="token punctuation">;</span>

String inputText <span class="token operator">=</span> <span class="token string">"你好，文心一言"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2. Replace with your access_token</span>
String apiUrl <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=xxxxxxxxx"</span><span class="token punctuation">;</span>

String answer<span class="token punctuation">;</span>
String <span class="token function">getGPTAnswer</span><span class="token punctuation">(</span>String inputText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    HTTPClient http<span class="token punctuation">;</span>
    http<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    http<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//超过时间，回答超时（ms）</span>
    http<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// http.addHeader("access_token", String(access_token));</span>
    String payload <span class="token operator">=</span> <span class="token string">"{\"messages\":[{\"role\": \"user\",\"content\": \""</span> <span class="token operator">+</span> inputText <span class="token operator">+</span> <span class="token string">"\"}],\"disable_search\": false,\"enable_citation\": false}"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> httpResponseCode <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponseCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String response <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    http<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Parse JSON response</span>
    DynamicJsonDocument <span class="token function">jsonDoc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">deserializeJson</span><span class="token punctuation">(</span>jsonDoc<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String outputText <span class="token operator">=</span> jsonDoc<span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> outputText<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Serial.println(outputText);</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error %i \n"</span><span class="token punctuation">,</span> httpResponseCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&lt;error>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Initialize Serial</span>
    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// Connect to Wi-Fi network</span>
    WiFi<span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>WIFI_STA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    WiFi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Connecting to WiFi .."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> WL_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">localIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    answer <span class="token operator">=</span> <span class="token function">getGPTAnswer</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Answer: "</span> <span class="token operator">+</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter a prompt:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// do nothing</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputText <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readStringUntil</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// inputText.trim();</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n Input:"</span><span class="token operator">+</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    answer <span class="token operator">=</span> <span class="token function">getGPTAnswer</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Answer: "</span> <span class="token operator">+</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter a prompt:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// delay(2);</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码是一个基于Arduino平台（可能是ESP32或ESP8266）的示例，它通过WiFi连接到指定的无线网络，并利用HTTPClient库向百度文心一言API发送POST请求以获取AI生成的回答。以下是详细的解释：</p>
<ol>
<li>导入必要的库：</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WiFi.h></span>   </span><span class="token comment" spellcheck="true">//用于处理Wi-Fi连接功能。</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;HTTPClient.h></span>     </span><span class="token comment" spellcheck="true">//用于发送HTTP请求。</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ArduinoJson.h></span>    </span><span class="token comment" spellcheck="true">//用于解析从服务器返回的JSON格式数据。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>第一处修改定义Wi-Fi网络凭证：</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ssid <span class="token operator">=</span> <span class="token string">"wifi名称"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Wi-Fi网络名。</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password <span class="token operator">=</span> <span class="token string">"wifi密码"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Wi-Fi网络密码。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="3">
<li>第二处修改定义要调用的API地址，只要在access_token部分换上之前拿到的即可：</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp">String apiUrl <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=xxxxxxxxx"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li>定义输入文本和函数 getGPTAnswer(String inputText)：</li>
</ol>
<ul>
<li>输入文本是固定的问候语”你好，文心一言”，在实际应用中可以根据需要修改。</li>
<li>函数 getGPTAnswer() 负责执行以下操作：<br>初始化HTTPClient对象并设置目标URL。设置Content-Type头信息，构造请求体payload，将用户输入的内容添加到JSON结构中。发送POST请求并检查HTTP响应码。如果响应码为200，则读取并解析返回的JSON数据，提取出结果字段作为回答。若非200，则返回错误字符串。</li>
</ul>
<ol start="5">
<li>setup() 函数：</li>
</ol>
<ul>
<li>初始化串口通信， 连接到指定的Wi-Fi网络。</li>
<li>连接成功后，获取一个初始的回答并打印出来，然后提示用户输入新的问题。</li>
</ul>
<ol start="6">
<li>loop() 函数：</li>
</ol>
<ul>
<li>检查串口是否有可用的数据输入。</li>
<li>如果有新输入，读取一行内容，调用 getGPTAnswer() 函数获取AI回答，并将对话过程输出到串口。</li>
</ul>
<blockquote>
<p>注意：虽然代码中有OpenAI API相关注释，但实际上该代码是针对百度文心一言API编写的。如果你想要与OpenAI API交互，你需要使用OpenAI提供的API URL、access token及相应的JSON结构进行请求。</p>
</blockquote>
<h1 id="🔥测试结果"><a href="#🔥测试结果" class="headerlink" title="🔥测试结果"></a>🔥测试结果</h1><p>打开串口监视器，注意右下角选择换行符，选择115200波特率，输入你想问的问题，他就可以回答你，这里让它编写了一个python的flask服务，他也能顺利实现，其他简单的问题也没什么问题。</p>
<h2 id="测试对话"><a href="#测试对话" class="headerlink" title="测试对话"></a>测试对话</h2><p><img src="/2024/01/15/ESP32%E8%81%8A%E5%A4%A9%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80/%E6%B5%8B%E8%AF%95%E5%AF%B9%E8%AF%9D.jpg" alt="测试对话"></p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>如果返回error ，可以对照列表查询错误代码，结合提示排查解决。<br>我遇到过-11，就添加了<code>http.setTimeout(30000)</code>以允许30s的响应时间，使得模型可以有时间输出回答。</p>
<table>
<thead>
<tr>
<th align="center">错误</th>
<th align="center">错误码</th>
<th align="center">错误</th>
<th align="center">错误码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HTTPC_ERROR_CONNECTION_FAILED</td>
<td align="center">-1</td>
<td align="center">HTTPC_ERROR_NO_HTTP_SERVER</td>
<td align="center">-7</td>
</tr>
<tr>
<td align="center">HTTPC_ERROR_SEND_HEADER_FAILED</td>
<td align="center">-2</td>
<td align="center">HTTPC_ERROR_TOO_LESS_RAM</td>
<td align="center">-8</td>
</tr>
<tr>
<td align="center">HTTPC_ERROR_SEND_PAYLOAD_FAILED</td>
<td align="center">-3</td>
<td align="center">HTTPC_ERROR_ENCODING</td>
<td align="center">-9</td>
</tr>
<tr>
<td align="center">HTTPC_ERROR_NOT_CONNECTED</td>
<td align="center">-4</td>
<td align="center">HTTPC_ERROR_STREAM_WRITE</td>
<td align="center">-10</td>
</tr>
<tr>
<td align="center">HTTPC_ERROR_CONNECTION_LOST</td>
<td align="center">-5</td>
<td align="center">HTTPC_ERROR_READ_TIMEOUT</td>
<td align="center">-11</td>
</tr>
<tr>
<td align="center">HTTPC_ERROR_NO_STREAM</td>
<td align="center">-6</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程</category>
        <category>嵌入式</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>ESP32</tag>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>LeoCar：树莓派智能车——综合篇</title>
    <url>/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/</url>
    <content><![CDATA[<ul>
<li>文章链接：<a href="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/" title="LeoCar：树莓派智能车——网络篇">网络篇</a>——&gt;<a href="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/" title="LeoCar：树莓派智能车——电控篇">电控篇</a>——&gt;<a href="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/" title="LeoCar：树莓派智能车——综合篇">综合篇</a></li>
<li>项目链接：<a href="https://github.com/LegendLeoChen/LeoCar">https://github.com/LegendLeoChen/LeoCar</a></li>
<li>上次实现小车结构和电路搭建，先使用ESP32实现对小车的控制，以及电源方案的验证。</li>
<li>本次使用树莓派完成对小车的控制，以及视觉算法的加入。<span id="more"></span></li>
</ul>
<h1 id="📡接线图"><a href="#📡接线图" class="headerlink" title="📡接线图"></a>📡接线图</h1><ul>
<li>接线变化不大，这里就不测试超声波避障了，其他就是将ESP32控制TB6612FNG的引脚改为接在树莓派的对应引脚。<br><img src="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/%E6%80%BB%E6%8E%A5%E7%BA%BF%EF%BC%88%E6%A0%91%E8%8E%93%E6%B4%BE%E7%89%88%EF%BC%89.png" alt="总接线"></li>
</ul>
<h1 id="📡小车运动"><a href="#📡小车运动" class="headerlink" title="📡小车运动"></a>📡小车运动</h1><ul>
<li>我们先将ESP32对小车的基本控制改为对树莓派对小车的控制，这里用到RPi.GPIO库可以方便地用Python做到像控制单片机一样简单地控制树莓派的引脚。这里用类封装引脚初始化、PWM设置、占空比控制等操作方便调用，主函数测试用，运行程序小车会循环展示所有动作。与之前ESP32代码不同的是，<strong>占空比范围是0-100</strong>。</li>
<li>该文件命名为device（后续调用）</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO
<span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">MotorControl</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pwm_channel_1<span class="token punctuation">,</span> pwm_channel_2<span class="token punctuation">,</span> in1<span class="token punctuation">,</span> in2<span class="token punctuation">,</span> in3<span class="token punctuation">,</span> in4<span class="token punctuation">,</span> standby<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># Initialize GPIO</span>
        GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>setwarnings<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># Setup pins</span>
        self<span class="token punctuation">.</span>in1 <span class="token operator">=</span> in1
        self<span class="token punctuation">.</span>in2 <span class="token operator">=</span> in2
        self<span class="token punctuation">.</span>in3 <span class="token operator">=</span> in3
        self<span class="token punctuation">.</span>in4 <span class="token operator">=</span> in4
        self<span class="token punctuation">.</span>standby <span class="token operator">=</span> standby

        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in3<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in4<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>self<span class="token punctuation">.</span>standby<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># Initialize PWM</span>
        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>pwm_channel_1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>pwm_channel_2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pwm_channel_1 <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>pwm_channel_1<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pwm_channel_2 <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>pwm_channel_2<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pwm_channel_1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pwm_channel_2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># WORK</span>
        GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>self<span class="token punctuation">.</span>standby<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">set_pwm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> moto1<span class="token punctuation">,</span> moto2<span class="token punctuation">,</span> amplitude<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># Motor 1</span>
        GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>HIGH <span class="token keyword">if</span> moto1 <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>LOW <span class="token keyword">if</span> moto1 <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># Motor 2</span>
        GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in3<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>LOW <span class="token keyword">if</span> moto2 <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> GPIO<span class="token punctuation">.</span>HIGH<span class="token punctuation">)</span>
        GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in4<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>HIGH <span class="token keyword">if</span> moto2 <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> GPIO<span class="token punctuation">.</span>LOW<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># Limit PWM values</span>
        moto1 <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token operator">-</span>amplitude<span class="token punctuation">,</span> min<span class="token punctuation">(</span>amplitude<span class="token punctuation">,</span> moto1<span class="token punctuation">)</span><span class="token punctuation">)</span>
        moto2 <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token operator">-</span>amplitude<span class="token punctuation">,</span> min<span class="token punctuation">(</span>amplitude<span class="token punctuation">,</span> moto2<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># Set PWM values</span>
        self<span class="token punctuation">.</span>pwm_channel_1<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>moto1<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pwm_channel_2<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>moto2<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">stop_motors</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>pwm_channel_1<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pwm_channel_2<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># Define GPIO pins for left and right motors (change these pins according to your setup)</span>
    left_motor_pins <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pwm_channel_1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        <span class="token string">'in1'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
        <span class="token string">'in2'</span><span class="token punctuation">:</span> <span class="token number">27</span>
    <span class="token punctuation">}</span>
    right_motor_pins <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pwm_channel_2'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
        <span class="token string">'in3'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
        <span class="token string">'in4'</span><span class="token punctuation">:</span> <span class="token number">26</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true"># Create an instance of MotorControl</span>
    motor_control <span class="token operator">=</span> MotorControl<span class="token punctuation">(</span><span class="token operator">**</span>left_motor_pins<span class="token punctuation">,</span> <span class="token operator">**</span>right_motor_pins<span class="token punctuation">,</span> standby<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># Run the robot in different directions</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Forward</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Backward</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Left</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Right</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Stop</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Pivot Turn</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            motor_control<span class="token punctuation">.</span>stop_motors<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        motor_control<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="📡远程控制"><a href="#📡远程控制" class="headerlink" title="📡远程控制"></a>📡远程控制</h1><ul>
<li>使用之前的web程序控制小车，通过交互遥杆组件使小车原地旋转（其他动作这里就不实现了，就是多设计一些按钮，传递专门的指令）</li>
<li>首先我们先把之前网络篇的前端代码（index.html）进行简单的如下修改（<strong>找到触控部分的 touchmove 和 touchend 回调函数覆盖并添加url变量即可</strong>），把传递的角度值改为<strong>角度变化量的正弦值</strong>，同时在拖拽结束后发送0，意思是停止转动</li>
<li>url是运行flask服务器的树莓派IP地址</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">    canvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isDragging<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>
        <span class="token keyword">const</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
        <span class="token keyword">const</span> rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> mouseX <span class="token operator">=</span> x <span class="token operator">-</span> rect<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">const</span> mouseY <span class="token operator">=</span> y <span class="token operator">-</span> rect<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
        angle <span class="token operator">=</span> <span class="token function">updateSmallCircle</span><span class="token punctuation">(</span>mouseX<span class="token punctuation">,</span> mouseY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>last_angle <span class="token operator">-</span> angle<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 发送 AJAX 请求</span>
          $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>
            type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
            data<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> angle<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>angle <span class="token operator">-</span> last_angle<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            contentType<span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
            dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
            success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          last_angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
          label<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Angle: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">°`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    canvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      isDragging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>
        type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
        data<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> angle<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        contentType<span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
        dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
        success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>树莓派上运行如下程序，device是上面的电机控制代码，代码很简单，就是把之前flask程序结合电机控制，当接受的sin值为正就左转，为负右转。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response
<span class="token keyword">import</span> time
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS

<span class="token keyword">from</span> device <span class="token keyword">import</span> MotorControl

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> resources<span class="token operator">=</span><span class="token punctuation">{</span>r<span class="token string">"/position/*"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"origins"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

angle <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 角度变化量的sin值（为正向左，为负向右）</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> app<span class="token punctuation">.</span>send_static_file<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/position'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_button_position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># put application's code here</span>
    <span class="token keyword">global</span> angle
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        angle <span class="token operator">=</span> round<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"angle"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'angle = {angle:.2f}'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> angle <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> angle <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功发送位置"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> f<span class="token string">'angle={args["angle"]}'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">motor_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># Define GPIO pins for left and right motors (change these pins according to your setup)</span>
    left_motor_pins <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pwm_channel_1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        <span class="token string">'in1'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
        <span class="token string">'in2'</span><span class="token punctuation">:</span> <span class="token number">27</span>
    <span class="token punctuation">}</span>
    right_motor_pins <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pwm_channel_2'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
        <span class="token string">'in3'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
        <span class="token string">'in4'</span><span class="token punctuation">:</span> <span class="token number">26</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true"># Create an instance of MotorControl</span>
    <span class="token keyword">return</span> MotorControl<span class="token punctuation">(</span><span class="token operator">**</span>left_motor_pins<span class="token punctuation">,</span> <span class="token operator">**</span>right_motor_pins<span class="token punctuation">,</span> standby<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    motor_control <span class="token operator">=</span> motor_init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>得到如下结果：<br><img src="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/web%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%B0%8F%E8%BD%A6.gif" alt="web远程控制小车"></li>
</ul>
<h1 id="📡人脸追踪"><a href="#📡人脸追踪" class="headerlink" title="📡人脸追踪"></a>📡人脸追踪</h1><ul>
<li>添加人脸检测代码，对摄像头的图像进行人脸检测，通过人脸水平中心（列）和画面中心（列）的偏差，控制小车左右转向来保持人脸在画面中心，实现对人脸的追踪，这里为了保证小车的平稳转动不太慢、不超调，使用了PID算法。直接上完整程序.</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response
<span class="token keyword">import</span> os<span class="token punctuation">,</span> time
<span class="token keyword">import</span> threading
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> request <span class="token keyword">as</span> urlrequest

<span class="token keyword">from</span> device <span class="token keyword">import</span> MotorControl

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> resources<span class="token operator">=</span><span class="token punctuation">{</span>r<span class="token string">"/position/*"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"origins"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

angle <span class="token operator">=</span> <span class="token number">0</span>			<span class="token comment" spellcheck="true"># sin delta angle</span>
lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> app<span class="token punctuation">.</span>send_static_file<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/position'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_button_position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># put application's code here</span>
    <span class="token keyword">global</span> angle
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        angle <span class="token operator">=</span> round<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"angle"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'angle = {angle:.2f}'</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功发送位置"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> f<span class="token string">'angle={args["angle"]}'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">motor_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    left_motor_pins <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pwm_channel_1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
        <span class="token string">'in1'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
        <span class="token string">'in2'</span><span class="token punctuation">:</span> <span class="token number">27</span>
    <span class="token punctuation">}</span>
    right_motor_pins <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pwm_channel_2'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
        <span class="token string">'in3'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
        <span class="token string">'in4'</span><span class="token punctuation">:</span> <span class="token number">26</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> MotorControl<span class="token punctuation">(</span><span class="token operator">**</span>left_motor_pins<span class="token punctuation">,</span> <span class="token operator">**</span>right_motor_pins<span class="token punctuation">,</span> standby<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">PIDController</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> kp<span class="token punctuation">,</span> ki<span class="token punctuation">,</span> kd<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>kp <span class="token operator">=</span> kp
        self<span class="token punctuation">.</span>ki <span class="token operator">=</span> ki
        self<span class="token punctuation">.</span>kd <span class="token operator">=</span> kd
        self<span class="token punctuation">.</span>prev_error <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>integral <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>i_limit <span class="token operator">=</span> <span class="token number">10</span>

    <span class="token keyword">def</span> <span class="token function">calculate_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>integral <span class="token operator">+=</span> error
        self<span class="token punctuation">.</span>integral <span class="token operator">=</span> max<span class="token punctuation">(</span>min<span class="token punctuation">(</span>self<span class="token punctuation">.</span>integral<span class="token punctuation">,</span> self<span class="token punctuation">.</span>i_limit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>i_limit<span class="token punctuation">)</span>
        derivative <span class="token operator">=</span> error <span class="token operator">-</span> self<span class="token punctuation">.</span>prev_error
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>kp <span class="token operator">*</span> error <span class="token operator">+</span> self<span class="token punctuation">.</span>ki <span class="token operator">*</span> self<span class="token punctuation">.</span>integral <span class="token operator">+</span> self<span class="token punctuation">.</span>kd <span class="token operator">*</span> derivative
        <span class="token comment" spellcheck="true"># ~ print(f'{self.kp * error},{self.ki * self.integral},{self.kd * derivative}')</span>
        self<span class="token punctuation">.</span>prev_error <span class="token operator">=</span> error
        <span class="token keyword">return</span> output

motor_control <span class="token operator">=</span> motor_init<span class="token punctuation">(</span><span class="token punctuation">)</span>
pid_controller <span class="token operator">=</span> PIDController<span class="token punctuation">(</span>kp<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">,</span> ki<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span> kd<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">downloadImg</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 读取网络摄像头视频帧</span>
    <span class="token keyword">with</span> urlrequest<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        img1 <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>data<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print("img1 shape ", img1.shape) # (83653,)</span>
        img_cv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_ANYCOLOR<span class="token punctuation">)</span>
        <span class="token keyword">return</span> img_cv
    
<span class="token keyword">def</span> <span class="token function">face_detect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># 人脸检测并控制小车转向</span>
    <span class="token keyword">global</span> motor_control<span class="token punctuation">,</span> pid_controller
    url <span class="token operator">=</span> <span class="token string">"http://视频流的IP地址/?action=snapshot"</span>
    <span class="token comment" spellcheck="true"># 加载预训练模型</span>
    face_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">'haarcascade_frontalface_alt2.xml'</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 读取视频流中的一帧</span>
        frame <span class="token operator">=</span> downloadImg<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 将帧转换为灰度图像</span>
        gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 检测人脸</span>
        faces <span class="token operator">=</span> face_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> scaleFactor<span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">,</span> minNeighbors<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>faces<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token operator">=</span> faces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            target <span class="token operator">=</span> x <span class="token operator">+</span> w <span class="token operator">/</span> <span class="token number">2</span>
            offset <span class="token operator">=</span> target <span class="token operator">-</span> gray<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span>         <span class="token comment" spellcheck="true"># 计算人脸和画面中心的水平偏差</span>
            pwm_output <span class="token operator">=</span> int<span class="token punctuation">(</span>pid_controller<span class="token punctuation">.</span>calculate_output<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># pid计算</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'face: {offset}, pwm: {pwm_output}'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token operator">-</span>abs<span class="token punctuation">(</span>pwm_output<span class="token punctuation">)</span><span class="token punctuation">,</span> abs<span class="token punctuation">(</span>pwm_output<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>pwm_output<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>abs<span class="token punctuation">(</span>pwm_output<span class="token punctuation">)</span><span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.15</span><span class="token punctuation">)</span>
                motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            motor_control<span class="token punctuation">.</span>set_pwm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    
thread1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'t1'</span><span class="token punctuation">,</span> target<span class="token operator">=</span>face_detect<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 人脸检测线程</span>
thread1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>
thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># app.run()</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> threaded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>简单介绍一下程序，前面是flask程序部分，和之前一样没什么区别，之后初始化电机也是实现过的。</p>
</li>
<li><p>添加了PID控制器，输入是offset偏差，输出就是控制电机的pwm的占空比。</p>
</li>
<li><p>之后是人脸检测代码，从网络视频流上不断读取帧，进行人脸检测，这里用opencv的 haarcascade_frontalface_alt2.xml 文件，这是用 Haar 特征和级联分类器进行训练得到的人脸检测模型。如果检测到人脸就计算偏差，然后计算pid，输出控制。人脸检测的函数通过建立新的线程运行。</p>
</li>
<li><p>这里我使用了<strong>点动控制</strong>，相当于一个周期即便有旋转也只转动固定时长，否则我的电机即使在占空比为1**%的情况下转动速度也很快，很容易转动过头，点动控制牺牲了流畅度但是能比较准地进行追踪，如果电机可控范围足够，就可以不需要进行点动。</p>
</li>
<li><p>结果如下，小车随着人脸（镜头和人脸同步动的）进行转动，控制台打印检测结果，同时使用遥杆依然能发送数据到树莓派（控制我没写进去，这里只是测试接收）。<br><img src="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%B0%8F%E8%BD%A6%E6%8E%A7%E5%88%B6.jpg" alt="控制台打印结果"> </p>
<figure>
  <img src="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/小车追踪人脸.gif" width="200" height="auto">
  <span class="caption">小车追踪人脸</span>
</figure></li>
<li><p>可以看到效果还可以提升，如果能提高人脸检测的帧率以及电机可控范围就能使得控制更加丝滑。</p>
</li>
<li><p>至此，所有起初构想的功能都全部完成了。后续有更多的想法可能还会继续实现。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>嵌入式</category>
        <category>前端</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>TB6612FNG</tag>
        <tag>树莓派</tag>
        <tag>Python</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>LeoCar：树莓派智能车——电控篇</title>
    <url>/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/</url>
    <content><![CDATA[<ul>
<li>文章链接：<a href="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/" title="LeoCar：树莓派智能车——网络篇">网络篇</a>——&gt;<a href="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/" title="LeoCar：树莓派智能车——电控篇">电控篇</a>——&gt;<a href="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/" title="LeoCar：树莓派智能车——综合篇">综合篇</a></li>
<li>项目链接：<a href="https://github.com/LegendLeoChen/LeoCar">https://github.com/LegendLeoChen/LeoCar</a></li>
<li>上次完成了小车树莓派网络摄像头及基于Python Flask的服务器部署。</li>
<li>本次实现小车结构和电路搭建，先使用ESP32实现对小车的控制，以及电源方案的验证。<span id="more"></span></li>
</ul>
<h1 id="⚡电控方案"><a href="#⚡电控方案" class="headerlink" title="⚡电控方案"></a>⚡电控方案</h1><h2 id="运动模块"><a href="#运动模块" class="headerlink" title="运动模块"></a>运动模块</h2><p>小车采用便宜的TT电机进行运动，通过TB6612FNG可以使得ESP32通过PWM控制电机进行调速。<br><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/TB6612FNG%E8%83%8C%E9%9D%A2.jpg" alt="TB6612FNG背面"> </p>
<ul>
<li><strong>TB6612FNG电机驱动模块</strong>的引脚如下：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">引脚</th>
<th align="center">连接</th>
<th align="center">引脚</th>
<th align="center">连接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PWMA</td>
<td align="center">电机1的PWM输入</td>
<td align="center">VM</td>
<td align="center">电机的驱动电源（小于12V）</td>
</tr>
<tr>
<td align="center">AIN2</td>
<td align="center">电机1的逻辑2输入</td>
<td align="center">VCC</td>
<td align="center">该模块的供电（3.3V）</td>
</tr>
<tr>
<td align="center">AIN1</td>
<td align="center">电机1的逻辑1输入</td>
<td align="center">GND</td>
<td align="center">地</td>
</tr>
<tr>
<td align="center">STBY</td>
<td align="center">电机工作状态，1为工作，0为待机</td>
<td align="center">AO1</td>
<td align="center">电机1的输出，接电机正极</td>
</tr>
<tr>
<td align="center">BIN1</td>
<td align="center">电机2的逻辑1输入</td>
<td align="center">AO2</td>
<td align="center">电机1的输出，接电机负极</td>
</tr>
<tr>
<td align="center">BIN2</td>
<td align="center">电机2的逻辑2输入</td>
<td align="center">BO2</td>
<td align="center">电机2的输出，接电机负极</td>
</tr>
<tr>
<td align="center">PWMB</td>
<td align="center">电机2的PWM输入</td>
<td align="center">BO1</td>
<td align="center">电机2的输出，接电机正极</td>
</tr>
<tr>
<td align="center">GND</td>
<td align="center">地</td>
<td align="center">GND</td>
<td align="center">地</td>
</tr>
</tbody></table>
<ul>
<li><strong>当IN1和IN2为00时电机不转，为01时电机正转，为10时电机反转</strong></li>
</ul>
<h2 id="供电方案"><a href="#供电方案" class="headerlink" title="供电方案"></a>供电方案</h2><p>我们采用<strong>18650锂电池（3.7V）</strong>两节<strong>串联</strong>的方案，提供<strong>7.4V</strong>的电压直接供给TB6612FNG的VM。再通过<strong>DC-DC降压模块</strong>进行降压后输出3.3V或者5V输出给ESP32或单片机等嵌入式设备。</p>
<ul>
<li>如图，输入端接电池正负极（电池盒子自带正负极的线），输出端接一个转接口将正负极双线转到MICRO-B口，以输出到嵌入式设备。我用的这个DC-DC四个口都有两个短接的焊盘方便扩展。输入端作为结点另外接到TB6612FNG的VM和GND，输出端的正极接给VCC。输出端电压可以通过拧动电位器调节。<br><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/DC-DC%E9%99%8D%E5%8E%8B%E6%A8%A1%E5%9D%97.jpg" alt="DC-DC降压模块"><br><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/%E5%8F%8C%E7%BA%BF%E8%BD%ACMICRO-B%E5%8F%A3.jpg" alt="双线转MICRO-B口"></li>
</ul>
<h2 id="避障"><a href="#避障" class="headerlink" title="避障"></a>避障</h2><p>添加一个超声波模块可以通过测距判断小车前部离障碍物的距离，当距离小于指定值时小车会停止。<br><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%A8%A1%E5%9D%97SRF05.jpg" alt="超声波模块SRF05"> </p>
<ul>
<li>引脚功能：</li>
</ul>
<ol>
<li>VCC和GND:接电源的正负极，也可接单片机的5V或3.3V，注意与单片机共地</li>
<li>Trig：触发控制信号输入。通过这个引脚输入10us以上的高电平触发信号，然后模块自动发送8个40KHz的方波进行一次测距。</li>
<li>Echo：回响信号接收。该引脚可以在接收到回响信号后输出一个高电平，高电平持续的时间就是超声波从发射到返回的时间。</li>
<li>OUT：该引脚在手册中提到为开关量输出，可以做报警模块使用，应该是一个模块状态口，通过判断OUT的高低电平来判断模块是否上电，基本不用。</li>
</ol>
<h1 id="⚡ESP32"><a href="#⚡ESP32" class="headerlink" title="⚡ESP32"></a>⚡ESP32</h1><p>基于arduino开发平台实现用ESP32控制小车，同时我们可以通过BLE低功耗蓝牙在手机端控制。</p>
<h2 id="总接线图"><a href="#总接线图" class="headerlink" title="总接线图"></a>总接线图</h2><ul>
<li>先进行连线，结合之前的供电方案，完整接线如下，其中ESP32的接线可以根据代码自行更改，ESP32大部分引脚都可以输出PWM，可以很自由地更改引脚，图中接线和之后的代码是对应的。</li>
</ul>
<p><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/%E6%80%BB%E6%8E%A5%E7%BA%BF.png" alt="总接线"> </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>代码如下，使用Arduino平台进行开发，主体结构分为蓝牙部分、电机控制部分，最后是Setup和loop函数。</li>
<li>主函数流程也很简单：</li>
</ul>
<ol>
<li>setup：初始化引脚输入输出状态，设置PWM引脚，初始化BLE；</li>
<li>loop：通过蓝牙发送数据（如果需要的话），控制电机（输入命令和速度）</li>
<li>BLE接收回调函数：解析信息，如果是小写字母就是控制命令，完成转向进退等操作；如果是数字就设置速度，1024最大，占空比是<code>car_speed / 1024 × 100% ≈ car_speed / 1000 × 100%</code>。</li>
<li>ultrasound：超声波部分，ESP32引脚向TRIG发送一个高电平，然后ECHO在接受超声波后会向ESP32发送一个与距离成正比的高电平，我们只需要获得这个高电平时长，即可通过公式<code>距离 = 时长 * 0.034 / 2</code>获得实际距离（cm）。由于倒车和转圈时不需要进行避障所以不会急停。</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;BLEDevice.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;BLEServer.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;BLEUtils.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;BLE2902.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;String.h></span></span>

<span class="token comment" spellcheck="true">//TB6612FNG驱动模块控制信号 共6个</span>
<span class="token macro property">#<span class="token directive keyword">define</span> IN1 26  </span><span class="token comment" spellcheck="true">//控制电机1的方向A，01为正转，10为反转 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> IN2 25  </span><span class="token comment" spellcheck="true">//控制电机1的方向B，01为正转，10为反转 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> IN3 14  </span><span class="token comment" spellcheck="true">//控制电机2的方向A，01为正转，10为反转 </span>
<span class="token macro property">#<span class="token directive keyword">define</span> IN4 12  </span><span class="token comment" spellcheck="true">//控制电机2的方向B，01为正转，10为反转 </span>

<span class="token macro property">#<span class="token directive keyword">define</span> PWMA 33  </span><span class="token comment" spellcheck="true">//控制电机1 PWM控制引脚</span>
<span class="token macro property">#<span class="token directive keyword">define</span> PWMB 13 </span><span class="token comment" spellcheck="true">//控制电机2 PWM控制引脚</span>
<span class="token macro property">#<span class="token directive keyword">define</span> STBY 27 </span><span class="token comment" spellcheck="true">//工作与待机</span>

<span class="token macro property">#<span class="token directive keyword">define</span> freq 20000     </span><span class="token comment" spellcheck="true">//PWM波形频率5KHZ</span>
<span class="token macro property">#<span class="token directive keyword">define</span> pwm_Channel_1  0 </span><span class="token comment" spellcheck="true">//使用PWM的通道0</span>
<span class="token macro property">#<span class="token directive keyword">define</span> pwm_Channel_2  1 </span><span class="token comment" spellcheck="true">//使用PWM的通道1</span>

<span class="token macro property">#<span class="token directive keyword">define</span> resolution  10    </span><span class="token comment" spellcheck="true">//使用PWM占空比的分辨率，占空比最大可写2^10-1=1023</span>

<span class="token macro property">#<span class="token directive keyword">define</span> trigPin  22</span>
<span class="token macro property">#<span class="token directive keyword">define</span> echoPin  23</span>

<span class="token keyword">int</span> car_speed <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> state <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**************************************************************************
蓝牙BLE部分
**************************************************************************/</span>
BLECharacteristic <span class="token operator">*</span>pCharacteristic<span class="token punctuation">;</span>
<span class="token keyword">bool</span> deviceConnected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
uint8_t txValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> lastMsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存放时间的变量 </span>
String rxload<span class="token punctuation">;</span>
String receive_msg<span class="token punctuation">;</span>
<span class="token keyword">float</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50E24DCCA9E" </span><span class="token comment" spellcheck="true">// UART service UUID</span>
<span class="token macro property">#<span class="token directive keyword">define</span> CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"</span>

<span class="token keyword">class</span> <span class="token class-name">MyServerCallbacks</span><span class="token operator">:</span> <span class="token keyword">public</span> BLEServerCallbacks <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onConnect</span><span class="token punctuation">(</span>BLEServer<span class="token operator">*</span> pServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deviceConnected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">onDisconnect</span><span class="token punctuation">(</span>BLEServer<span class="token operator">*</span> pServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deviceConnected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token class-name">MyCallbacks</span><span class="token operator">:</span> <span class="token keyword">public</span> BLECharacteristicCallbacks <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onWrite</span><span class="token punctuation">(</span>BLECharacteristic <span class="token operator">*</span>pCharacteristic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      std<span class="token operator">::</span>string rxValue <span class="token operator">=</span> pCharacteristic<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>rxValue<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        receive_msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rxValue<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
         <span class="token punctuation">{</span>
          receive_msg <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>rxValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>rxValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>receive_msg<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//是小写字母</span>
        state <span class="token operator">=</span> receive_msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//控制</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span><span class="token punctuation">{</span>
        car_speed <span class="token operator">=</span> receive_msg<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//转数字，修改速度</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">setupBLE</span><span class="token punctuation">(</span>String BLEName<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ble_name<span class="token operator">=</span>BLEName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  BLEDevice<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>ble_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  BLEServer <span class="token operator">*</span>pServer <span class="token operator">=</span> BLEDevice<span class="token operator">::</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pServer<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MyServerCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  BLEService <span class="token operator">*</span>pService <span class="token operator">=</span> pServer<span class="token operator">-</span><span class="token operator">></span><span class="token function">createService</span><span class="token punctuation">(</span>SERVICE_UUID<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pCharacteristic <span class="token operator">=</span> pService<span class="token operator">-</span><span class="token operator">></span><span class="token function">createCharacteristic</span><span class="token punctuation">(</span>CHARACTERISTIC_UUID_TX<span class="token punctuation">,</span>BLECharacteristic<span class="token operator">::</span>PROPERTY_NOTIFY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pCharacteristic<span class="token operator">-</span><span class="token operator">></span><span class="token function">addDescriptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">BLE2902</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  BLECharacteristic <span class="token operator">*</span>pCharacteristic <span class="token operator">=</span> pService<span class="token operator">-</span><span class="token operator">></span><span class="token function">createCharacteristic</span><span class="token punctuation">(</span>CHARACTERISTIC_UUID_RX<span class="token punctuation">,</span>BLECharacteristic<span class="token operator">::</span>PROPERTY_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pCharacteristic<span class="token operator">-</span><span class="token operator">></span><span class="token function">setCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MyCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pService<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pServer<span class="token operator">-</span><span class="token operator">></span><span class="token function">getAdvertising</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Waiting a client connection to notify..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**************************************************************************
函数功能：赋值给PWM寄存器 
入口参数：左轮PWM、右轮PWM
返回  值：无
**************************************************************************/</span>
<span class="token keyword">void</span> <span class="token function">Set_Pwm</span><span class="token punctuation">(</span><span class="token keyword">int</span> moto1<span class="token punctuation">,</span> <span class="token keyword">int</span> moto2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> Amplitude <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//===PWM满幅是1024 限制在950</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moto1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moto2 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment" spellcheck="true">//功能：限制PWM赋值 </span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moto1 <span class="token operator">&lt;</span> <span class="token operator">-</span>Amplitude<span class="token punctuation">)</span>  moto1 <span class="token operator">=</span> <span class="token operator">-</span>Amplitude<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moto1 <span class="token operator">></span>  Amplitude<span class="token punctuation">)</span>  moto1 <span class="token operator">=</span>  Amplitude<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moto2 <span class="token operator">&lt;</span> <span class="token operator">-</span>Amplitude<span class="token punctuation">)</span>  moto2 <span class="token operator">=</span> <span class="token operator">-</span>Amplitude<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moto2 <span class="token operator">></span>  Amplitude<span class="token punctuation">)</span>  moto2 <span class="token operator">=</span>  Amplitude<span class="token punctuation">;</span>
  
  <span class="token comment" spellcheck="true">//赋值给PWM寄存器 </span>
  <span class="token function">ledcWrite</span><span class="token punctuation">(</span>pwm_Channel_1<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>moto1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ledcWrite</span><span class="token punctuation">(</span>pwm_Channel_2<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>moto2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">control</span><span class="token punctuation">(</span><span class="token keyword">char</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span> carspeed<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Set_Pwm</span><span class="token punctuation">(</span>carspeed<span class="token punctuation">,</span> carspeed<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//前</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token operator">==</span><span class="token string">'b'</span><span class="token punctuation">)</span>
    <span class="token function">Set_Pwm</span><span class="token punctuation">(</span><span class="token operator">-</span>carspeed<span class="token punctuation">,</span> <span class="token operator">-</span>carspeed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token operator">==</span><span class="token string">'c'</span><span class="token punctuation">)</span>
    <span class="token function">Set_Pwm</span><span class="token punctuation">(</span>carspeed<span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">,</span> carspeed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//左</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token operator">==</span><span class="token string">'d'</span><span class="token punctuation">)</span>
    <span class="token function">Set_Pwm</span><span class="token punctuation">(</span>carspeed<span class="token punctuation">,</span> carspeed<span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//右</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span>
    <span class="token function">Set_Pwm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//停</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token operator">==</span><span class="token string">'f'</span><span class="token punctuation">)</span>
    <span class="token function">Set_Pwm</span><span class="token punctuation">(</span>carspeed<span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span>carspeed<span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原地转</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">ultrasound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//超声波</span>
  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">delayMicroseconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">//计算超声波回波的时间</span>
  <span class="token keyword">long</span> duration <span class="token operator">=</span> <span class="token function">pulseIn</span><span class="token punctuation">(</span>echoPin<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment" spellcheck="true">//计算物体的距离(cm)</span>
  <span class="token keyword">float</span> distance <span class="token operator">=</span> duration <span class="token operator">*</span> <span class="token number">0.034</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">!=</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> <span class="token string">'e'</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//除了倒车、转圈都停止</span>
  <span class="token comment" spellcheck="true">//输出物体的距离</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"distance:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*********************************setup**********************************/</span>
<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//TB6612控制引脚，控制电机1的方向，01为正转，10为反转</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//TB6612控制引脚，</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//TB6612控制引脚，控制电机2的方向，01为正转，10为反转</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//TB6612控制引脚，</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>PWMA<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//TB6612控制引脚，电机PWM</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>PWMB<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//TB6612控制引脚，电机PWM</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>STBY<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pinMode</span><span class="token punctuation">(</span>trigPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//超声波</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>echoPin<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN1<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//TB6612控制引脚拉低</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN2<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//TB6612控制引脚拉低</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN3<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//TB6612控制引脚拉低</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>IN4<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//TB6612控制引脚拉低</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>STBY<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token function">ledcSetup</span><span class="token punctuation">(</span>pwm_Channel_1<span class="token punctuation">,</span> freq<span class="token punctuation">,</span> resolution<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PWM通道一开启设置</span>
    <span class="token function">ledcAttachPin</span><span class="token punctuation">(</span>PWMA<span class="token punctuation">,</span> pwm_Channel_1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//PWM通道一和引脚PWMA关联</span>
    <span class="token function">ledcWrite</span><span class="token punctuation">(</span>pwm_Channel_1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//PWM通道一占空比设置为零</span>
    
    <span class="token function">ledcSetup</span><span class="token punctuation">(</span>pwm_Channel_2<span class="token punctuation">,</span> freq<span class="token punctuation">,</span> resolution<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PWM通道二开启设置</span>
    <span class="token function">ledcAttachPin</span><span class="token punctuation">(</span>PWMB<span class="token punctuation">,</span> pwm_Channel_2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//PWM通道二和引脚PWMB关联</span>
    <span class="token function">ledcWrite</span><span class="token punctuation">(</span>pwm_Channel_2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//PWM通道二占空比设置为零</span>
    
    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setupBLE</span><span class="token punctuation">(</span><span class="token string">"LEO_BLE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置蓝牙名称</span>

<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/************************************loop************************************/</span>
<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录当前时间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastMsg <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每隔1秒发一次信号  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deviceConnected<span class="token operator">&amp;&amp;</span>rxload<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String str<span class="token operator">=</span>rxload<span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newValue<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          pCharacteristic<span class="token operator">-</span><span class="token operator">></span><span class="token function">setValue</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
          pCharacteristic<span class="token operator">-</span><span class="token operator">></span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      lastMsg <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新上一次发送数据的时间</span>
    <span class="token punctuation">}</span>
    <span class="token function">ultrasound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">control</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> car_speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="⚡结果展示"><a href="#⚡结果展示" class="headerlink" title="⚡结果展示"></a>⚡结果展示</h1><ul>
<li>完成小车结构和电路搭建后，烧录ESP32代码，小车启动；<br><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/%E5%B0%8F%E8%BD%A6%EF%BC%88ESP32%E7%89%88%EF%BC%89.jpg" alt="小车"> </li>
<li>在手机上使用蓝牙软件（要支持BLE而非经典蓝牙）连接BLE，发送数字设置速度，发送字母控制小车动作（这里用快捷按钮设置发送的字母），结果如下。<br><img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/%E8%93%9D%E7%89%99%E6%8E%A7%E5%88%B6%E5%B0%8F%E8%BD%A6.gif" alt="蓝牙控制小车"> <figure>
  <img src="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/小车避障急停.gif" width="250" height="auto">
  <span class="caption">小车避障急停</span>
</figure></li>
<li>至此我们使用ESP32完成了对供电方案和结构的验证，使得小车能够正常跑起来，后续我们将用之前的树莓派及摄像头替换ESP32实现相同的控制的基础上增加视频流的使用。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>嵌入式</category>
        <category>项目</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>ESP32</tag>
        <tag>BLE</tag>
        <tag>TB6612FNG</tag>
      </tags>
  </entry>
  <entry>
    <title>LeoCar：树莓派智能车——网络篇</title>
    <url>/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/</url>
    <content><![CDATA[<ul>
<li>文章链接：<a href="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/" title="LeoCar：树莓派智能车——网络篇">网络篇</a>——&gt;<a href="/2023/12/21/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%94%B5%E6%8E%A7%E7%AF%87/" title="LeoCar：树莓派智能车——电控篇">电控篇</a>——&gt;<a href="/2023/12/29/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BB%BC%E5%90%88%E7%AF%87/" title="LeoCar：树莓派智能车——综合篇">综合篇</a></li>
<li>项目链接：<a href="https://github.com/LegendLeoChen/LeoCar">https://github.com/LegendLeoChen/LeoCar</a></li>
<li>实现一个树莓派为核心的双轮小车，搭载人脸检测算法，摄像头传输图像同步到手机或PC，手机（同局域网）可以控制网页上的交互组件远程操控小车运动，小车摄像头跟踪人脸运动。</li>
<li>这个项目涉及前端开发、算法编写和部署、网络链路、电控、结构搭建、电路搭建等全方面工作。</li>
<li>本次先实现网络链路的打通，在仅有PC、手机、树莓派、摄像头的情况下即可率先完成。<span id="more"></span></li>
</ul>
<h1 id="🌐网络摄像头"><a href="#🌐网络摄像头" class="headerlink" title="🌐网络摄像头"></a>🌐网络摄像头</h1><h2 id="摄像头安装"><a href="#摄像头安装" class="headerlink" title="摄像头安装"></a>摄像头安装</h2><p><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%91%84%E5%83%8F%E5%A4%B4.jpg" alt="树莓派摄像头"> </p>
<ul>
<li>摄像头采用如图所示的排线接口的摄像头，在树莓派HDMI旁边的排线接口上，把类似于开关的黑色挡板向上拔到顶（不是拔出），然后排线接入，排线面向HDMI接口（也可以看接线口里面也有一排金属触点）。注意：千万不用使大力气拔，以免搞坏。接好再使力向下按，保证排线接好。</li>
</ul>
<h2 id="配置摄像头"><a href="#配置摄像头" class="headerlink" title="配置摄像头"></a>配置摄像头</h2><ul>
<li>打开树莓派的配置界面，进入后再进入Interface项</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> raspi-config
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.jpg" alt="树莓派配置界面"> </p>
<ul>
<li>选择Camera并开启它，然后重启树莓派即可</li>
</ul>
<p><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A22.jpg" alt="树莓派配置界面"> </p>
<h2 id="mjpg-streamer"><a href="#mjpg-streamer" class="headerlink" title="mjpg streamer"></a>mjpg streamer</h2><p>mjpg streamer的作用是从摄像头采集图像，并把它们以数据流的形式，通过基于IP的网络传输到浏览器端。</p>
<ul>
<li>先安装需要的包</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg8-dev  //JPEG支持库
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> imagemagick
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libv4l-dev   
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cmake  //下载编译工具
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>克隆mjpg streamer的库到本地</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/jacksonliam/mjpg-streamer.git
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>进入下载目录路径并编译安装</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> mjpg-streamer/mjpg-streamer-experimental
<span class="token function">make</span> all
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>启动mjpg streamer，这里为了方便每次打开，直接写一个脚本<code>webcam.sh</code>，其中 320x240是分辨率，可以调大点，这里比较小为了提升算法帧率：</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function">cd</span> ~/mjpg-streamer/mjpg-streamer-experimental
<span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span>.
mjpg_streamer -i <span class="token string">"input_uvc.so -d /dev/video0 -r 320x240"</span> -o <span class="token string">"output_http.so -w ./www"</span>
<span class="token variable">${mjpg_streamer_command}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在该脚本的路径下打开终端运行一下指令，使得以后双击就能运行脚本：</li>
</ul>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x webcam.sh
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>双击运行脚本（选择在终端），可以看到源源不断有视频流传入局域网：<br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E8%BF%90%E8%A1%8Cwebcam%E8%84%9A%E6%9C%AC.jpg" alt="运行webcam脚本"> </li>
<li>这时同局域网的设备都可以进入 <a href="http://ip:8080/">http://ip:8080</a> ，ip代表树莓派的网络ip地址，进入如下界面就是成功了，可以点击JavaScript获取前端代码的实例<br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/mjpg%E7%BD%91%E7%AB%99.jpg" alt="mjpg网站"></li>
</ul>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MJPEG-Streamer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">

<span class="token keyword">var</span> imageNr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Serial number of current image</span>
<span class="token keyword">var</span> finished <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// References to img objects which have finished downloading</span>
<span class="token keyword">var</span> paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>onload <span class="token operator">=</span> imageOnload<span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>onclick <span class="token operator">=</span> imageOnclick<span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"./?action=snapshot&amp;n="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>imageNr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> webcam <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"webcam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  webcam<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> webcam<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Two layers are always present (except at the very beginning), to avoid flicker</span>
<span class="token keyword">function</span> <span class="token function">imageOnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> imageNr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Image finished, bring to front!</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> finished<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> del <span class="token operator">=</span> finished<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Delete old image(s) from document</span>
    del<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  finished<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paused<span class="token punctuation">)</span> <span class="token function">createImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">imageOnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Clicking on the image will pause the stream</span>
  paused <span class="token operator">=</span> <span class="token operator">!</span>paused<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paused<span class="token punctuation">)</span> <span class="token function">createImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createImageLayer();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webcam<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./?action<span class="token punctuation">=</span>snapshot<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>有了这个代码我们可以轻松集成网络视频流到自己的前端代码了。最简单可以只用<code>&lt;img src=&quot;http://IP地址/?action=stream&quot; /&gt;</code>直接访问视频流，不过这样可能会累积缓存，这个实例使用snapshot访问，获取图片，还加了暂停交互等（暂时用不到）</li>
<li>至此，网络视频流就可以被同一个局域网任何设备访问了。摄像头变成了网络摄像头</li>
</ul>
<h1 id="🌐Python获取视频流"><a href="#🌐Python获取视频流" class="headerlink" title="🌐Python获取视频流"></a>🌐Python获取视频流</h1><ul>
<li>用Python opencv显示视频流</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> request

url <span class="token operator">=</span> <span class="token string">"http://树莓派IP:8080/?action=snapshot"</span>

<span class="token keyword">def</span> <span class="token function">downloadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> url
    <span class="token keyword">with</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        img1 <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>data<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print("img1 shape ", img1.shape) # (83653,)</span>
        img_cv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_ANYCOLOR<span class="token punctuation">)</span>
        <span class="token keyword">return</span> img_cv

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># image = downloadImg()</span>
    image <span class="token operator">=</span> downloadImg<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># cv2.imread('1.jpg') # 根据路径读取一张图片</span>
    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"frame"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>
    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%A7%86%E9%A2%91%E6%B5%81.jpg" alt="Python获取网络视频流"> </p>
<h1 id="🌐PC与手机交互"><a href="#🌐PC与手机交互" class="headerlink" title="🌐PC与手机交互"></a>🌐PC与手机交互</h1><ul>
<li>我们先实现PC上搭建Python的Flask restful服务器，获取已实现的网络视频流的同时，搭建网页使得手机可以交互。</li>
</ul>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li>先完成前端，新建index.html文件和随便一张ico图作为浏览器上的网页图标（以免报错）</li>
</ul>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, minimum-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>rpi-robot control<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector">body </span><span class="token punctuation">{</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.btn-controller</span> </span><span class="token punctuation">{</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#angleLabel</span> </span><span class="token punctuation">{</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">92%</span><span class="token punctuation">;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.raspi-video</span> </span><span class="token punctuation">{</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid <span class="token hexcode">#007cfc</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
      <span class="token selector"><span class="token class">.btn-controller</span> </span><span class="token punctuation">{</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">65%</span><span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token selector"><span class="token id">#angleLabel</span> </span><span class="token punctuation">{</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">92%</span><span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token selector"><span class="token class">.raspi-video</span> </span><span class="token punctuation">{</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90%</span><span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.6.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">

    <span class="token keyword">var</span> imageNr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Serial number of current image</span>
    <span class="token keyword">var</span> finished <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// References to img objects which have finished downloading</span>
    <span class="token keyword">var</span> paused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">createImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>
      img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"raspi-video"</span><span class="token punctuation">;</span>
      img<span class="token punctuation">.</span>onload <span class="token operator">=</span> imageOnload<span class="token punctuation">;</span>
      img<span class="token punctuation">.</span>onclick <span class="token operator">=</span> imageOnclick<span class="token punctuation">;</span>
      img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http:/树莓派IP:8080/?action=snapshot&amp;n="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>imageNr<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> webcam <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"webcam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      webcam<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> webcam<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// Two layers are always present (except at the very beginning), to avoid flicker</span>
    <span class="token keyword">function</span> <span class="token function">imageOnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> imageNr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Image finished, bring to front!</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> finished<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> del <span class="token operator">=</span> finished<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Delete old image(s) from document</span>
        del<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      finished<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paused<span class="token punctuation">)</span> <span class="token function">createImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">imageOnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Clicking on the image will pause the stream</span>
      paused <span class="token operator">=</span> <span class="token operator">!</span>paused<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>paused<span class="token punctuation">)</span> <span class="token function">createImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createImageLayer();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webcam<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>raspi-video<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://树莓派IP:8080/?action<span class="token punctuation">=</span>snapshot<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>angleLabel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Angle:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-controller<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- 遥杆 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// 显示角度的label</span>
    <span class="token keyword">const</span> label <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'angleLabel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 获取 Canvas 元素</span>
    <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'btn-controller'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 大圆半径和小圆半径</span>
    <span class="token keyword">const</span> bigRadius <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> smallRadius <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 小圆的初始位置</span>
    <span class="token keyword">let</span> smallCircleX <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> smallCircleY <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 角度</span>
    <span class="token keyword">let</span> angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> last_angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 绘制函数</span>
    <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 清空 Canvas</span>
      ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'#007cfc'</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#007fff'</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 绘制大圆</span>
      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> bigRadius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 绘制小圆</span>
      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>smallCircleX<span class="token punctuation">,</span> smallCircleY<span class="token punctuation">,</span> smallRadius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 更新小圆的位置</span>
    <span class="token keyword">function</span> <span class="token function">updateSmallCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 计算小圆与大圆的距离</span>
      <span class="token keyword">const</span> distance <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 小圆与大圆相切</span>
      <span class="token keyword">const</span> angle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span>y <span class="token operator">-</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">-</span> canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      smallCircleX <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bigRadius <span class="token operator">-</span> smallRadius<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
      smallCircleY <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bigRadius <span class="token operator">-</span> smallRadius<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 重新绘制</span>
      <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 返回实际角度（上半周为正）</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span>smallCircleY <span class="token operator">-</span> canvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> smallCircleX <span class="token operator">-</span> canvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 触摸事件处理</span>
    <span class="token keyword">let</span> isDragging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    canvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>
      <span class="token keyword">const</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
      <span class="token keyword">const</span> rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> mouseX <span class="token operator">=</span> x <span class="token operator">-</span> rect<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
      <span class="token keyword">const</span> mouseY <span class="token operator">=</span> y <span class="token operator">-</span> rect<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
      angle <span class="token operator">=</span> <span class="token function">updateSmallCircle</span><span class="token punctuation">(</span>mouseX<span class="token punctuation">,</span> mouseY<span class="token punctuation">)</span><span class="token punctuation">;</span>
      isDragging <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    canvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isDragging<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>
        <span class="token keyword">const</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
        <span class="token keyword">const</span> rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> mouseX <span class="token operator">=</span> x <span class="token operator">-</span> rect<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">const</span> mouseY <span class="token operator">=</span> y <span class="token operator">-</span> rect<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
        angle <span class="token operator">=</span> <span class="token function">updateSmallCircle</span><span class="token punctuation">(</span>mouseX<span class="token punctuation">,</span> mouseY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>last_angle <span class="token operator">-</span> angle<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 发送 AJAX 请求</span>
          $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            url<span class="token punctuation">:</span> <span class="token string">"http://192.168.43.127:5000/position"</span><span class="token punctuation">,</span>
            type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
            data<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> angle<span class="token punctuation">:</span> angle <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            contentType<span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
            dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
            success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          last_angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
          label<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Angle: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">°`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    canvas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      isDragging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 初始绘制</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>该文件整合了Css、JS、Html，不需要额外文件。我们按照代码从上到下简单解释。</li>
<li>Css部分针对大小屏做了简单的分别适配。</li>
<li>接着是之前的mjpg网站给的JS实例（英文注释部分），做了小幅修改，注意要修改对应的树莓派IP地址。</li>
<li>紧接着是交互组件，是一个遥杆，使用Canvas实现，遥杆由大圆和小圆组成，小圆保持和大圆内切不超出。获取小圆相对于大圆中心（也是画布中心）的位置的角度，当角度变化足够大（这里设置5°）就发送POST请求，将角度angle以json格式打包发送给服务端。</li>
<li>交互采用触控检测，电脑端不能触屏所以交互不了，只能在手机上交互。</li>
<li>打开网页得到如下界面：<br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E5%89%8D%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%95%8C%E9%9D%A2.jpg" alt="前端交互界面"></li>
</ul>
<h2 id="Python服务端"><a href="#Python服务端" class="headerlink" title="Python服务端"></a>Python服务端</h2><ul>
<li>在static文件夹的同级创建下面这个python文件</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response
<span class="token keyword">import</span> os
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> resources<span class="token operator">=</span><span class="token punctuation">{</span>r<span class="token string">"/position/*"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"origins"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> app<span class="token punctuation">.</span>send_static_file<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/position'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_button_position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># put application's code here</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'angle = {args["angle"]}'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功发送位置"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> f<span class="token string">'angle={args["angle"]}'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># app.run()</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span>int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PORT'</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这个Python文件简单地创建了一个同局域网都可访问的服务，服务主界面加载了index.html作为显示视频流和交互组件的UI。<code>/position</code>路径完成了对之前网页通过操作遥杆发送的POST请求的接收，解析json并反馈信息。</li>
<li>运行程序，同局域网手机访问<code>http://PC端IP.5000/</code>即可进入如下界面：<br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%89%8B%E6%9C%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%89%8D%E7%AB%AF.jpg" alt="手机浏览器访问服务器前端"> </li>
<li>操作遥杆（按住并移动小圆），小圆转到对应的角度，下面的label也显示角度，同时我们看到PC上程序也打印了角度，说明交互成功使得数据在局域网内传输。视频流也顺利显示。<br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/Python%E6%89%93%E5%8D%B0%E6%8E%A5%E6%94%B6%E7%9A%84%E8%A7%92%E5%BA%A6%E4%BF%A1%E6%81%AF.jpg" alt="PC服务器打印接收的角度信息"> </li>
<li><strong>注意</strong>：如果同局域网手机访问不了网页，需要设置防火墙使之允许外界应用访问python程序。</li>
</ul>
<h1 id="🌐树莓派实现"><a href="#🌐树莓派实现" class="headerlink" title="🌐树莓派实现"></a>🌐树莓派实现</h1><ul>
<li>接下来可以将PC的服务器代码移植到树莓派，static文件夹也要移植。注意前端index.html文件里面的PC地址都要改成树莓派IP，树莓派端口号要大于1024否则会报错，PC上没有这个要求，在这里都取5000。</li>
<li>在树莓派上运行程序，手机访问对应地址，同样地操作遥杆，得到如下：<br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%89%8B%E6%9C%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E5%89%8D%E7%AB%AF2.jpg" alt="手机浏览器访问服务器前端"><br><img src="/2023/12/10/LeoCar%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E6%99%BA%E8%83%BD%E8%BD%A6%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%AF%87/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%93%E5%8D%B0%E6%8E%A5%E6%94%B6%E7%9A%84%E8%A7%92%E5%BA%A6%E4%BF%A1%E6%81%AF.jpg" alt="树莓派服务器打印接收的角度信息"> </li>
<li>至此，PC和手机（视频和交互）、树莓派和手机（视频和交互）、树莓派和PC（仅视频）都完成，PC的作用除了先行调试，还有我们可以在后期实现在连接PC的情况下实现对算力的增强，相当于让小车拥有“云端”算力。</li>
</ul>
<h1 id="🌐参考链接"><a href="#🌐参考链接" class="headerlink" title="🌐参考链接"></a>🌐参考链接</h1><p>树莓派摄像头和Mjpg Streamer：<a href="https://blog.csdn.net/m0_69808624/article/details/132192457">https://blog.csdn.net/m0_69808624/article/details/132192457</a><br>　　　　　　　　　　　　　　　<a href="https://blog.csdn.net/weixin_62529596/article/details/132569528">https://blog.csdn.net/weixin_62529596/article/details/132569528</a><br>Python Flask框架与web页面交互：<a href="https://www.jianshu.com/p/2466cdad0d4a">https://www.jianshu.com/p/2466cdad0d4a</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>嵌入式</category>
        <category>前端</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>JavaScript</tag>
        <tag>Html</tag>
        <tag>树莓派</tag>
        <tag>Python</tag>
        <tag>API</tag>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影前期入门（3）</title>
    <url>/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h1 id="📸曝光要素"><a href="#📸曝光要素" class="headerlink" title="📸曝光要素"></a>📸曝光要素</h1><ul>
<li><p>一般情况下，暗部不能纯黑色（欠曝），亮部不能纯白色（过曝），这样会丧失细节。</p>
</li>
<li><p>少部分情况下为了凸显人物主体，或者体现某种特定风格，允许出现过曝（日系风格等）或者欠曝（人物剪影等）<span id="more"></span><br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E6%9B%9D%E5%85%89%E5%8E%9F%E5%88%99.jpg" alt="曝光原则"></p>
</li>
<li><p>曝光三要素：光圈、快门时间、相机感光度。类比水龙头接水，光圈相当于水龙头口径，快门时间相当于打开水龙头的时间，感光度类似水泵的水压，体现对光的敏感程度。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%85%89%E5%9C%88.jpg" alt="光圈"></p>
</li>
<li><p>光圈（Aperture）：光圈的数值<strong>F</strong>等于<strong>焦距</strong>与<strong>通光孔径</strong>之比。当F越大则越是小光圈，反之亦然。</p>
</li>
<li><p>大光圈获得的是小景深效果，进光量多，背景虚化<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%BF%AB%E9%97%A8.jpg" alt="快门"></p>
</li>
<li><p>快门（Shutter）：快门时间长即长曝光，进光量大，可以记录光流轨迹。短曝光可以凝固时间，用于抓拍。1&#x2F;10s以上都属于比较慢的门<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E6%84%9F%E5%85%89%E5%BA%A6.jpg" alt="感光度"></p>
</li>
<li><p>感光度（ISO）：数值越大对光线更敏感，适合昏暗场景，获得低画质。数值小对光线不敏感，适合明亮场合，获得画质更高。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%B8%89%E8%A6%81%E7%B4%A0%E6%A1%A3%E4%BD%8D.jpg" alt="三要素档位"></p>
</li>
<li><p>每档光圈倍率为根号2，即1.4左右；快门和感光度每档之间都是两倍关系，<strong>每差一档光圈、快门、感光度都是相差两档亮度</strong><br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%BA%92%E6%98%93%E7%8E%87.jpg" alt="互易率"></p>
</li>
<li><p>互易率：当三要素中的一个向一个方向调n档，另一个要素就可以向反方向调n档，以维持曝光不变。</p>
</li>
<li><p>举例：当我们为了获得更高画质降低ISO，画面变暗，此时可以用一个慢门提升曝光量<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E6%9B%9D%E5%85%89%E8%A1%A5%E5%81%BF.jpg" alt="曝光补偿"></p>
</li>
<li><p>曝光补偿（EV）：用于快捷地调节最终的亮度，某些场景下需要白加黑减。比如当拍摄白雪时，有时候测光系统会将其变成灰色，需要添加一些补偿使之还原为白色；拍摄黑色的煤炭时可以减少一些补偿，防止出现“灰煤”。</p>
</li>
</ul>
<h1 id="📸拍照模式"><a href="#📸拍照模式" class="headerlink" title="📸拍照模式"></a>📸拍照模式</h1><p>使用拍照模式，可以使得拍摄过程的调参半自动化，减轻操作压力</p>
<ul>
<li>Auto-全自动：三要素都自动化调节，一般不用</li>
<li>P-程序曝光：ISO手动，其他自动</li>
<li>A&#x2F;AV-光圈优先：光圈、ISO都手动可调，快门自动。适合风光、人像</li>
<li>S&#x2F;TV-快门优先：快门、ISO手动可调，光圈自动。适合抓拍</li>
<li>M-手动曝光：三要素全手动。适用于亮度不变的物体（月亮），或者EV已经无法调节的场景，或者闪光灯拍摄（不相信测光系统自动曝光准确性）。</li>
<li>B-B门（长时间曝光）：30s以上曝光</li>
<li>C-自定义模式：可以将参数设置为自己需要的值</li>
</ul>
<p>其他一些手机上的模式，需要注意，<strong>手机光圈不可调</strong>：</p>
<ul>
<li>流光快门&#x2F;慢门&#x2F;长曝光：通常配合三角架</li>
<li>夜景模式</li>
<li>人像模式</li>
<li>HDR模式：大光比下使用，保留细节，动态范围更大</li>
<li>全景模式</li>
<li>专业模式：类似M档</li>
</ul>
<h1 id="📸对焦，景深和虚化"><a href="#📸对焦，景深和虚化" class="headerlink" title="📸对焦，景深和虚化"></a>📸对焦，景深和虚化</h1><ul>
<li>景深：景深的存在使得对焦平面附近的一小段范围仍然清晰，大光圈有小景深，小光圈和大景深</li>
<li>自动对焦模式：</li>
</ul>
<ol>
<li>One Shot&#x2F;AF-S：单次自动对焦（静态）</li>
<li>AI Focus&#x2F;AF-A：人工智能自动对焦</li>
<li>AI Servo&#x2F;AF-C：连续伺服自动对焦（运动）</li>
</ol>
<p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%AF%B9%E7%84%A6%E5%8C%BA%E5%9F%9F.jpg" alt="对焦区域"></p>
<ul>
<li>对焦区域，总的来说对焦点越多越好：</li>
</ul>
<ol>
<li>定点自动对焦（手动选择）：用于自动对焦</li>
<li>单点自动对焦（手动选择）：选择一个浙大对焦点进行对焦</li>
<li>自动对焦扩展：使用手动选择自动对焦点及其四个相邻点位进行对焦</li>
<li>自动对焦扩展（手动选择周围的点）：比3更多的周围的点</li>
<li>区域自动对焦（手动选择区域）：使用9个对焦区域之一对焦</li>
<li>大区域自动对焦（手动选择区域）：使用3个对焦区域（左中右）之一进行对焦</li>
<li>自动选择自动对焦：使用区域自动对焦框对焦</li>
</ol>
<ul>
<li><p>虚化的核心四要素：背景离主体苑、相机离主体近、光圈较大、焦距较长</p>
</li>
<li><p>合焦：即成功聚焦，在风光大场景、主体即人物眼睛的地方一定需要合焦</p>
</li>
<li><p>焦点（景深）合成：需要背景和主体都清晰，可以通过拍摄两个不同对焦的图片合成得到</p>
</li>
<li><p>可以虚化的东西：长曝光轨迹，杂乱的背景&#x2F;干扰元素</p>
</li>
<li><p>拍虚的原因：</p>
</li>
</ul>
<ol>
<li>没对上焦</li>
<li>景深太浅&#x2F;对焦位置不对</li>
<li>快门速度太低</li>
<li>相机抖动</li>
</ol>
<h1 id="📸构图"><a href="#📸构图" class="headerlink" title="📸构图"></a>📸构图</h1><ul>
<li>构图的核心：</li>
</ul>
<ol>
<li>确认画面主体和主题</li>
<li>去掉画面中与主题或主体无关的元素</li>
<li>加入突出或主体表达的元素并合理摆放</li>
<li>成功传达想表达的内容</li>
</ol>
<h2 id="如何吸引视觉"><a href="#如何吸引视觉" class="headerlink" title="如何吸引视觉"></a>如何吸引视觉</h2><ul>
<li>视觉凝聚<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A7%86%E8%A7%89%E5%87%9D%E8%81%9A.jpg" alt="明亮部分吸引视觉"><br>使用明亮的部分吸引视觉，如上图<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A7%86%E8%A7%89%E5%87%9D%E8%81%9A2.jpg" alt="鲜艳/对比色"><br>也可以像上面这样使用鲜艳&#x2F;对比色进行吸引<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A7%86%E8%A7%89%E5%87%9D%E8%81%9A3.jpg" alt="清晰对象"><br>更清晰的地方也能吸引视觉<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A7%86%E8%A7%89%E5%87%9D%E8%81%9A4.jpg" alt="重复元素"><br>还有利用重复元素也能吸引视觉</li>
<li>视觉引导<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A7%86%E8%A7%89%E5%BC%95%E5%AF%BC.jpg" alt="引导线"><br>使用引导线吸引视觉，有如道路、边缘等实体引导线，还有目光等无形的引导线</li>
<li>视觉控制<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A7%86%E8%A7%89%E6%8E%A7%E5%88%B6.jpg" alt="框架"></li>
</ul>
<h2 id="常见构图技巧"><a href="#常见构图技巧" class="headerlink" title="常见构图技巧"></a>常见构图技巧</h2><p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%B8%89%E5%88%86%E6%B3%95.jpg" alt="三分法"><br>三分法：如上图，可以用水面和房顶将画面分成三个区域<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%B1%85%E4%B8%AD%E6%B3%95.jpg" alt="居中法"><br>居中法：拍摄对称的庄重的物体<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9E%84%E5%9B%BE.jpg" alt="三角形构图"><br>三角形构图：具有稳定性<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%89%8D%E4%B8%AD%E5%90%8E%E6%99%AF.jpg" alt="前中后景"><br>前中后景：可以利用前中后景进行有层次的构图<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%BB%BC%E5%90%88%E6%9E%84%E5%9B%BE.jpg" alt="综合构图"><br>可以结合上面的技巧应用到同一张构图当中</p>
<ul>
<li>三分法和居中法本质上是对画面的分割，使用哪个通常取决于画面中更希望突出的结构，以城市风光为例，当天空不好看时可以适当压缩天空，当需要突出水面倒影时可以使用居中。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%95%99%E7%99%BD.jpg" alt="留白"></li>
<li>如上图，主体的视线或运动方向上需要进行留白，使得画面平衡<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%82%B9%E7%BC%80.jpg" alt="点缀"></li>
</ul>
<h1 id="📸曝光与影调"><a href="#📸曝光与影调" class="headerlink" title="📸曝光与影调"></a>📸曝光与影调</h1><p>影调是基于艺术层面的对图像色彩的感觉，曝光是基于科学数据对图像色彩的分析判断</p>
<h2 id="影调"><a href="#影调" class="headerlink" title="影调"></a>影调</h2><p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%BD%8E%E8%B0%83%E3%80%81%E4%B8%AD%E9%97%B4%E8%B0%83%E3%80%81%E9%AB%98%E8%B0%83.jpg" alt="低调、中间调、高调"></p>
<ul>
<li>如上，将画面按色阶分为三种影调。大部分画面都处于黑暗的照片即低调的照片，以此类推。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%BD%8E%E4%B8%AD%E8%B0%83.jpg" alt="低中调"></li>
<li>低调又可分为低短调、低中调、低长调，如低中调，其画面依然大部分属于低调，但是却也包含了中调的色彩，所以是低中调。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/10%E7%A7%8D%E5%BD%B1%E8%B0%83.jpg" alt="10种影调"></li>
<li>因此我们可以得到3*3中影调，再加上全长调（非黑即白，对比度很高），共10种影调。</li>
</ul>
<h2 id="量化曝光"><a href="#量化曝光" class="headerlink" title="量化曝光"></a>量化曝光</h2><ul>
<li>相机测光模式：分为<strong>评价测光、局部测光、点测光、中央重点平均测光</strong>。一般使用平均测光，拍月亮可以用点测光<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%9B%B4%E6%96%B9%E5%9B%BE.jpg" alt="直方图"></li>
<li>直方图：反映不同亮度（0-255）像素数量<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%B8%8E%E6%9B%9D%E5%85%89.jpg" alt="直方图与曝光"></li>
<li>如上图，第一张图右侧部分极高且其右边缘（255）被切断了，发生了过曝，以此类推可以通过直方图很直观地判断照片曝光好坏。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%B8%8E%E5%BD%B1%E8%B0%83.jpg" alt="直方图与影调"></li>
<li>如图，在低调部分（左边）像素较多，且中调部分也存在不少像素，说明是低中调。可以很快地通过直方图判断影调</li>
</ul>
<h2 id="数码时代的正确曝光"><a href="#数码时代的正确曝光" class="headerlink" title="数码时代的正确曝光"></a>数码时代的正确曝光</h2><ul>
<li>现代后期处理的发展，使得前期拍摄可以趋于保留图像信息为目的。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%90%91%E5%8F%B3%E6%9B%9D%E5%85%89.jpg" alt="向右曝光"></li>
<li>如图，我们像右边一样向右（对于直方图）进行曝光，使得暗部更多细节得到保留，提升信噪比。注意右图虽然高亮度部分较多，但是直方图并没有被切断，说明依然存在亮部细节，所以还是正常曝光，不是过曝。</li>
</ul>
<h2 id="大光比场景下平衡光比"><a href="#大光比场景下平衡光比" class="headerlink" title="大光比场景下平衡光比"></a>大光比场景下平衡光比</h2><p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%A4%A7%E5%85%89%E6%AF%94%E6%98%93%E5%87%BA%E7%8E%B0%E7%9A%84%E6%83%85%E5%86%B5.jpg" alt="大光比易出现的情况"><br>大光比场景下易出现的情况，如上图，有可能亮部过曝或者暗部丢失。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%B9%B3%E8%A1%A1%E5%85%89%E6%AF%94.jpg" alt="平衡光比"><br>因此，我们需要平衡光比，使得明暗反差更小，更符合肉眼情况（上图左），而非消除光比（上图右）。</p>
<ul>
<li>常见的大光比场景：日出日落、夜景灯光、逆光人像等</li>
</ul>
<p>如何根据不同情况平衡光比：<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E6%9B%9D%E5%85%89%E5%90%88%E6%88%90.jpg" alt="曝光合成"></p>
<ol>
<li>曝光合成：相机宽容度无法覆盖到画面的整个动态范围，就需要拍多张进行合成。手机上可以使用HDR模式，相机使用包围曝光<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%AE%81%E6%AC%A0%E5%8B%BF%E8%BF%87.jpg" alt="宁欠勿过"></li>
<li>宁欠勿过：对于宽容度足够的相机，可以适当欠曝保护高光不过曝，后期再调亮，因为暗部比亮部细节恢复容易。该方法比曝光合成快捷，但质量略差。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%A1%A5%E5%85%89.jpg" alt="补光"></li>
<li>补光：画面中背景太阳很亮，但是人物逆光很暗，可以对人进行补光。</li>
<li>拍摄剪影：人物只拍剪影（需要轮廓姿态好看），保留高光</li>
</ol>
<h1 id="📸光线"><a href="#📸光线" class="headerlink" title="📸光线"></a>📸光线</h1><h2 id="📸光线的特性"><a href="#📸光线的特性" class="headerlink" title="📸光线的特性"></a>📸光线的特性</h2><p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%89%B2%E6%B8%A9.jpg" alt="色温"></p>
<ul>
<li>色温使用热力学单位开尔文K描述。色温越高色调越冷（蓝色），色温越低色调越暖（红）<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E7%99%BD%E5%B9%B3%E8%A1%A1.jpg" alt="白平衡"></li>
<li>白平衡向左是为了加入冷色，向右是加入暖色，达到中和或者加强的效果。<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%85%89%E7%9A%84%E6%96%B9%E5%90%91.jpg" alt="光的方向"></li>
<li>经常使用侧光塑造形状<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%85%89%E7%9A%84%E8%BD%AF%E7%A1%AC.jpg" alt="光的软硬"></li>
<li>通过观察人物暗亮交界过渡状态，如果是柔和的就是柔光（上图左），硬过渡就是硬光（上图右）。</li>
</ul>
<h2 id="📸自然光"><a href="#📸自然光" class="headerlink" title="📸自然光"></a>📸自然光</h2><ul>
<li>自然光拍摄：日落前后和日出前后适合拍照</li>
<li>在顺光下对较硬的光可以用柔光板进行柔光；逆光下用反光板对阴影进行补光</li>
</ul>
<h2 id="📸人造光"><a href="#📸人造光" class="headerlink" title="📸人造光"></a>📸人造光</h2><ul>
<li>人造光拍摄：LED好上手，也适合拍视频；拍人像和产品用闪光灯</li>
<li>闪光灯使用：</li>
</ul>
<ol>
<li>功率调节</li>
<li>模式选择：TTL是全自动调节功率，M是手动</li>
<li>高速同步：当快门很快的时候需要开启</li>
<li>跳闪和引闪：有时候闪光灯放在相机顶时，拍人时可以对着天花板照射进行<strong>跳闪</strong>；离机时配合引闪器可以自由地设置灯位</li>
</ol>
<h2 id="📸常用布光方法"><a href="#📸常用布光方法" class="headerlink" title="📸常用布光方法"></a>📸常用布光方法</h2><p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%B8%89%E7%82%B9%E5%B8%83%E5%85%89.jpg" alt="三点布光"></p>
<ul>
<li>三点的光分别称为：主光（主要打的光）、辅光（冲淡阴影的光）、边缘光（又叫发丝光，当背景很黑时，防止人物与背景融合在人物后面打上硬光凸显轮廓）<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E4%BC%A6%E5%8B%83%E6%9C%97%E5%85%89.jpg" alt="伦勃朗光"></li>
<li>仅一个点位打光，在脸上出现倒三角，适合男性<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E8%9D%B4%E8%9D%B6%E5%85%89.jpg" alt="蝴蝶光"></li>
<li>正面斜下方打光，在鼻子下方形成蝴蝶状阴影，适合女性</li>
</ul>
<h1 id="📸拍摄技巧"><a href="#📸拍摄技巧" class="headerlink" title="📸拍摄技巧"></a>📸拍摄技巧</h1><h2 id="📸噪点"><a href="#📸噪点" class="headerlink" title="📸噪点"></a>📸噪点</h2><p><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E5%99%AA%E7%82%B9.jpg" alt="噪点"></p>
<ul>
<li>分为明度噪点和色彩噪点。噪点总是在暗部更显眼，需要避免这种影响观感的噪点<br><img src="/2023/11/08/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/%E6%8F%90%E5%8D%87%E4%BF%A1%E5%99%AA%E6%AF%94.jpg" alt="提升信噪比"></li>
<li>前期提升进光量可以很好地提升信噪比，使得噪点不显眼。</li>
<li>进光量充足时，ISO越低画质越好；进光量不过，提升ISO获得进光量反而画质会提升</li>
<li>后期可以用一些降噪插件处理优化</li>
</ul>
<h2 id="📸日常的拍摄"><a href="#📸日常的拍摄" class="headerlink" title="📸日常的拍摄"></a>📸日常的拍摄</h2><ul>
<li>寻找光线，如晚霞，建筑上的光等</li>
<li>寻找细节，用长焦拍摄一些简单的画面，比如桌子的一角，窗户的边缘</li>
<li>多角度拍摄：有近有远，长焦或短焦</li>
</ul>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影前期入门（2）</title>
    <url>/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p>第三节课<br>03 告别说明书，基础相机操作指南 P3 - 15:18</p>
<span id="more"></span>



<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/1.jpg"><br>那么我们还可以通过外面的这个转盘我们进行波转，那我们可以切换视频以及拍照模式，我们可以切换这两个模式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/2.jpg"><br>然后我们可以看一下在底下的这个拨杆，那这个拨杆呢，是控制我们所有的操作的，那比如说我们再去调整一些参数的时候</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/3.jpg"><br>如果我们不想用触控去点的话，那我们就可以去调整这个拨杆来去切换我们参数。那在我们的这个默认状态下，那我个人把它设置成了这个对焦点的选择。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/4.jpg"><br>那大家可以看一下我们现在屏幕上，这个地方是代表我们这个对焦点。</p>
<p>那中心是现在这个对焦点，我们如果拖动这个拨杆的话，大家可以看到我可以快速去移动我的对焦点。那这个在我们拍摄时就非常的方便。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/5.jpg"><br>那再底下大家看到还有一个小摁钮，这个按钮是我们去进行对焦模式切换的这么一个摁钮，大家可以看到这个对焦模式在不断的这个切换。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/6.jpg"><br>那么我这里面设置的它是一个对焦模式切换的摁钮，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/7.jpg"><br>然后他旁边的这个Q是我们的这个自定义设置摁钮，我们可以点他，然后去切换我们所有这个设置，就可以进行这个设置的点击了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/8.jpg"><br>那底下就是我们的这个转盘，刚跟大家去说过了，它控制我们的这个各种各样的参数和前面的这个波轮是一样的。然后我们中间或这个set键，我们可以按住这个键，我们可以去搭配我们刚刚这个Q键以及我们的这个前后的这个移动拨杆，然后我们去点击ok，我们就可以进行这些相对应的设置。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/9.jpg"><br>然后我们最底下有一个lock，那这个我们也是自定义的一个锁定，那这里面我把它设置成了我们这个转盘后转盘锁定。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/10.jpg"><br>比如说大家可以看我现在这个状态下，我去转后转盘，我可以去调节这个曝光补偿。，那这是一个控制画面亮度的一个参数。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/11.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/12.jpg"><br>那我们如果把它锁定住，我们把它lock上。那这个时候我们不管怎么转这个转盘，它都不会动，大家可以看在我这边转的时候，它这边会显示一个lock。</p>
<p>那这就是这个锁定摁钮的作用</p>
<p>那么至此我觉得就跟大家讲完了，我们这个机身上的所有的操作。那么我们来说，这个相机上的最后的三个按键。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/13.jpg"><br>那这边这个大家可以看到上写字AF-ON，那这个是我们的一个对焦键。</p>
<p>那我们知道半按快门可以对焦。那我们有些时候可能会把这个快门和对焦分离开，那这个时候我们就可以用这个后键来进行对焦。那我们可以按住它，大家可以听到相机会有滴滴这个一声，那我们可以摁住他来听到相机有滴滴的这个对焦一声。大家可以非常明显听到这个声音。</p>
<p>大家可以通过我们这个屏幕也能看到，我按这键的时候，会有这么一个对焦。那这个时候我们半按快门，其实也是同样的这么一个效果。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/14.jpg"><br>再右面这个是我们这个默认的曝光锁定键</p>
<p>那比如说我们拍完一张照片，想锁定住这个曝光，我们可以摁一下它就进行我们的这个曝光锁定了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/15.jpg"><br>而最右边这个是我们的这个对焦点切换键，我这里设置成了刚刚这个键是快捷切换，当然我们也可以按住他来进行我们的这个切换，那比如说我们这个前拨盘是切换我们对焦区域。</p>
<p>然后最后面这个键是我们的这个对焦区域以及对焦模式的切换键。那我刚刚其实已经都自定义在我的这个机身上了。那比如说，我们的拨杆是去切换我们的这个对焦点的位置，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/16.jpg"><br>而我们这个底下这个小的摁钮我们是切换模式，那我们其实也可以摁住它来进行这个调节，操作是一样的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/17.jpg"><br>我们可以摁住转盘来去调节我们的这个区域，我们摁助拨杆，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/18.jpg"><br>按住我们的M-FN来去切换，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/19.jpg"><br>或者说按住我们这个键来去切换我们的这个对焦模式</p>
<p>那么以上就是我们关于这台机器，我觉得在机身的这个摁钮以及基础操作上，能跟大家去讲的所有内容。</p>
<p>那后面在第三步我也会跟大家继续去讲，我们这个菜单屏幕上显示的都是什么，然后如何去初步去设置一下我们的这个自定义菜单。</p>
<p>那么现在大家知道我们这个相机上面所有的按钮的作用以及常规的我们相机上的一些操作。那我们下面就进入到实当中。跟大家去讲，我们拿到这一台新的相机之后，我们如何进入菜单如何进行设置。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/20.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/21.jpg"><br>那首先先跟大家去介绍一下我们的这个相机的操作界面，那这里面先跟大家去讲一下我们这个相机默认的这个拍摄界面，这些参数信息到底都代表的是什么？</p>
<p>那大家可以看到左上角有一个av。那这个是我们刚刚提到的那些拍摄模式是我们可以在转这个转盘的时候，<br>大家可以看到我们可以切换，常用的AV、TV等等的这些拍摄模式。</p>
<p>那这些拍摄模式呢，会在后面的这个课程当中跟大家详细来说。</p>
<p>那在拍摄模式的右面有一个多少分之一，比如现在是一个1&#x2F;15，那这个是代表我们的快门速度。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/22.jpg"><br>那我们的快门速度旁边代表我们光圈，大家可以看到底下也有这个文字提示。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/23.jpg"><br>再右面是我们的这个ISO的感光度。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/24.jpg"><br>我们第二排最左边是我们的这个曝光补偿，就是我们拨动后面的这个转盘，可以快速去调节的，在这个AV档的模式下。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/25.jpg"><br>再右面是闪光曝光补偿，那像这些拍摄曝光的这些参数我会在第二章，跟大家详细去讲。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/26.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/27.jpg"><br>那第二行最后一个是我们这个自定义的这个控制摁钮的功能。那大家可以看到在我这个去切换到不同的这个按钮的这个地方，我们的这个左边的界面会出现这个橙色的小圈，那这样的话，我们就以进行一些自定义的设置，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/28.jpg"><br>比如说我的这个拨杆去切换我们的这个自动对焦点，我就是在这里进行我们的这个设置的，我们可以根据自己的爱好来去设置我们最习惯的这么一个设置。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/29.jpg"><br>我们接着来说，第三行，第三行的第一个就是那天我跟大家去在第一节课提到的我们这个RAW格式不能保存，但是JPG格式是会应用的，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/30.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/31.jpg"><br>我的这个照片风格，那我们点这个INFO键可以根据提示可以进行详细的去设置，我们menu键就进行返回。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/32.jpg"><br>那再后面一个是我们的白平衡，我们可以去进行设置。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/33.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/34.jpg"><br>后面是白平衡偏移，那其实就是我们这个上下会设置怎么一个偏移的值。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/35.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/36.jpg"><br>那再往右是我们的这个自动量优化，默认就去选择这个标准就可以。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/37.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/38.jpg"><br>那最右面就有一大块，就是确定我们这个双卡的卡槽。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/39.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/40.jpg"><br>记录模式以及我们的这个记录格式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/41.jpg"><br>那记录模式，我推荐大家去选择，分别记录就是我们卡一和卡二，进行这个分别记录。</p>
<p>然后我们记录格式，这个选择一张卡记录RAW格式，一张卡记录JPG格式，这样的话，是比较安全的一个方式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/42.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/43.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/44.jpg"><br>那么最后一行，第一个是我们这个对焦模式是单次自动对焦，还是我们的这个人工智能对焦等等，对焦也会在后面详细来跟大家说。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/45.jpg"><br>再后面是测光</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/46.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/47.jpg"><br>那么最后这个就是我们的驱动模式，我们可以通过它来设置我们这个单拍、连拍等等，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/48.jpg"><br>包括两秒的这个定时自拍，我们都可以通过他来进行这个选择，那这样的话，就是我们整体的这么一个菜单的信息了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/49.jpg"><br>那我们知道，摁住这个INFO键，切换到我们的这个自定义menu之后，我们是可以对这个菜单面板来进行我们的自定义的操作的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/50.jpg"><br>那我们可以在我们的菜单界面来进行我们的这个操纵，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/51.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/52.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/53.jpg"><br>我们选择在这个工具菜单的第三个选项，这个自定义速控，我们就可以进行我们的这个操作和编辑的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/54.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/55.jpg"></p>
<p>大家可以看到我们可以去选择不同的位置，通过我们的触摸，或者说通过我们的这个拨杆，然后我们可以去点击他，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/56.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/57.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/58.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/59.jpg"></p>
<p>然后我们去点击INFO键，然后我们就可以去调整我们的这个大小显示的内容等等，我们都可以去在这个自定义的面板当中进行我们的这个控制。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/60.jpg"><br>那我们这个自定义的这个菜单就是根据大家个人的这个需求和喜好来进行我们的设置，那就是刚刚的这个设置方法。<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/61.jpg"><br>那如果说我们在这个面板之下再按一下INFO键的话，我们就能够来到这个参数的这么一个面板。我们能够看到我们相机的各种所使用的这个参数信息，包括说我们的自定义的这几个模式。C1、C2、C3都是根据什么来设定的，我们的白平衡怎么样？我们的色彩空间是怎么样的，以及我们的一些文件名，可拍摄数量等等这些详细的信息，我们都可以在这个菜单当中来进行查看。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/62.jpg"><br>那我们再按一下INFO键就来到了我们这个水平仪的界面。那这个在我们的日常的拍摄当中是非常常用的，在尤其拍摄一些风光建筑的时候，我们要保证水平，那这个时候我们就可以用到水平的这个界面。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/63.jpg"><br>我们再摁一下INFO键就回到了我们这个默认的参数的面板，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/64.jpg"><br>我们再摁一下就回到了我们的这个自定义的速控的菜单面板了。</p>
<p>那这样的话，就是我们摁住INFO键来切换我们4个不同的相机背屏的显示界面的这么一个操作。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/65.jpg"><br>再跟大家去讲完，我们这个默认的拍摄参数界面，我们来最后跟大家说一说，我们这个菜单上面的这个设置，我们现在摁住了manu键回到我们的菜单，那这里面跟大家去讲一下我们做哪些自定义的设置。</p>
<p>那么大家可以看到我们上面是我们这个大类的，比如说我们的这个相机AF，我们的回放，我们设置等等。这些大类。那底下的是我们的123456，6个菜单这样的小类。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/66.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/67.jpg"><br>我们通过第一个大类来跟大家去说，那首先我们在第一个菜单里面像这镜头像差的这个校正，我们建议把这个周边光量校正，失真矫正，色差、衍射矫正等等都给它打开，这样的话，会让我们的这个画面，画质会更好一点，我们会有一些物理上的这个校正。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/68.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/69.jpg"></p>
<p>然后这里面我们可以把这个未装储存卡释放快门给选择关闭。那么这样的话，我们一旦忘带卡，我们就会知道我们没有办法释放快门，这个在我们出门检查的时候，就会给我们做一个提醒的这么一个作用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/70.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/71.jpg"><br>然后我看到下一个菜单，那下一个菜单里面最后也会有一个大家会问到的就是色彩空间。那这里面我们可以设置sRGB，或者Adobe  RGB都可以。那对于大多数屏幕是sRGB，包括说大家想JPG直出的同学，我觉得直接选sRGB就可以了，因为我们这里面的这个色彩空间信息也是只针对我们的JPG格式来进行应用的，我们如果拍摄RAW格式是完全不受影响，我们会在后期进行我们的色彩设置。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/72.jpg"><br>那在下一个菜单里面就有我们这个在设置里提到的长时间曝光降噪功能。这里面我选了OFF，就是跟大家说到的，我们不能选择启用，不然的话，会耽误我们非常多的这个时间。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/73.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/74.jpg"><br>那么再后面会有一个反光境预升，那这个在我们进行超长时间曝光的时候，可以去选用，这样的话，我们可以把反光镜提前升起来，那这个选项只是单反会有的，微单是不会有这个选项。</p>
<p>因为微单没有我们的这个反光镜的这么一个结构。那这样的一个反光镜预升会让我们的照片在长时间曝光的时候，更加的清晰或锐利，因为我们会减少相机的震动。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/75.jpg"><br>那再后面有我们的实时显示这个拍摄要进行启用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/76.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/77.jpg"><br>那包括我们实时显示的时候，如果享有我们的这个网格线，那我们可以在这个里面进行选择。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/78.jpg"><br>然后我们的长宽比我们16比9还是3比2也可以在这里面选择，通常我们用的是3比2。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/79.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/80.jpg"><br>那至于后面还有一个模拟曝光，那这个模拟曝光的意思就是我们在实时取景期间屏幕上看到的是不是真的我们拍摄来的这个曝光。那如果你选择启用，那就是他的实际拍摄的这么一个曝光了，不然的话，他会默认保持这么一个最亮的一个选项。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/81.jpg"><br>第6个菜单，我没有什么要动的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/82.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/83.jpg"><br>切换到下一个。那AF这里面我们其实没有太多要操作的菜单。那比如说这里面我们可以有这样的一个选项，自动对焦点里面可以去选择所有点，不然的话，你可能能选择的对焦点就会非常的少。那很多同学来说，我的这个相机可能有很多对焦点，但是，我们只能选几个怎么办?那我们可能在菜单里去看一看会不会有这样的一个选项。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/84.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/85.jpg"></p>
<p>那还有一个就是我们底下的这个我们的这个自动对焦区域选择模式。那么我们所有模式都勾选了，那如果大家觉得某些模式没有用，我们可以把这个勾反选掉。这样样的话，也是这么一个自定义的参数。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/86.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/87.jpg"><br>那么，我们接着往下来看我们回放的这个菜单，那这里面我建议大家把这个高光预警可以打开，我们高光预警会让我们这个照片在轻微过曝的时候进行一个提示，让我们知道相机可能会过曝了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/88.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/89.jpg"></p>
<p>包括回放网格线，大家可以根据自己的需求来进行我们的这个调节，大家在刚刚拍摄的时候，在实时取景里去加网格线，你在回看去加这个3 * 3的网格线是会对大家确认构图可能有一定帮助的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/90.jpg"><br>然后我们再看下一个菜单，我们的这个设置菜单，我们的文件编号，我们的文件名以及格式化储存卡都在这里面。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/91.jpg"><br>然后再下面我们的这个相机的语言，那这个里面我们可以根据自己需求来做。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/92.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/93.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/94.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/95.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/96.jpg"></p>
<p>然后我们有个取景器的设置，我们可以把取景器里要显示和隐藏的这个信息在这里面来进行对应的这么一个设置，包括说我们相机的这个时间都可以在这里进行一个设定。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/97.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/98.jpg"><br>那我们看到第4个菜单，我们的这个通信设置，我们去用wifi连接手机，那就在这里面来进行我们这个设置了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/99.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/100.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/101.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/102.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/103.jpg"></p>
<p>那像刚刚跟大家去讲了，我们这个lock键去设定我们这个lock哪个位置，我们就可以在这个多功能锁的这个地方来进行选择，我们可以去多选，我们也可以去单选。<br>这样的话，我们就可以进行不同位置的这么一个锁定了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/104.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/105.jpg"><br>那包括一些我们常用的这种拍摄模式，比如说我们在A档的这个模式下做了一些自定义更改。那我们可以用这个自定义拍摄模式C1到C3进行注册。</p>
<p>那至于这些拍摄模式，我会在后面来跟大家去讲，讲到我们哪些拍摄模式怎么用？这些东西都在后面，慢慢跟大家去讲，不要着急。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/106.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/107.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/108.jpg"></p>
<p>那这里面我还建议大家去做一个事儿，就是版权信息。那我们建议大家去更改，大家可以看现在这里面我把我的版权信息设置成我个人。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/109.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/110.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/111.jpg"></p>
<p>这样的话，我们就可以通过底下的这个输入作者信息来进行我们的这个所有的操作。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/112.jpg"><br>那再后面一个就是我们相机的一些自定义的这个参数的这么一个设置了，那这里面看到的蓝色是我改过的，那包围曝光顺序就是我们后面会讲到的一个技巧，我们会让相机自动拍摄三张照片，一张是欠曝，稍微暗一点的，一张是中间亮度就是正常亮度，另外一张是亮一点的，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/113.jpg"><br>那它的默认顺序是零减加，就是正常欠和亮，那这个时候我们就会很难分辨我们拍摄的照片组数。</p>
<p>默认会把它改成我们的这个暗中亮这样的一个步骤，我们比较好判断。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/114.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/115.jpg"><br>那后面我们还有一个自定义控制按钮，这个跟大家刚刚已经去讲过了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/116.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/117.jpg"><br>然后我们的默认删除选项，我们去按它一下，是默认在我们的默认删除选项，这里面我去做了一个更改。默认这个设置是在删除上，因为这样的话，我们可以进行快速的一个删除。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/118.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/119.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/120.jpg"><br>那最后这个菜单是我个人的这个收藏夹，那大家可以看到，比如说我们这个间隔定制器，我们可以进行一个间隔的拍摄，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/121.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/122.jpg"><br>通信设置我们的这个连接wifi等等。</p>
<p>我们就可以进行一个自定义的注册，那这样的话，我们就不用在这里面去快速的去翻找，我们可以直接在最后的这个自定义上面，我的收藏夹里面来进行一个选择了。</p>
<p>那这样的话，就是来跟大家去讲的我们这个相机的一些基础的菜单设置，以及我们的界面介绍，那至于我们深入的这些参数都到底是什么意思，该如何使用？我们会在第二章当中为大进行详尽的介绍。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/123.jpg"><br>那最后来跟大家推荐一个在我们的相机的这个参数设置上的一个好习惯，那就是我们在用完相机拍摄之后，会把我们的这个参数回归到我们常用的一个默认值上，这样的话，会方便大家下一次拍摄。</p>
<p>那比如说如果在一次拍摄当中，你可能会把ISO设置成12800，那这个时候，如果你在不把它归回一个默认值，你在下一次拍摄的时候，很可能就会用一个12800的高ISO去拍摄，获得一个画质很差的照片了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/124.jpg"><br>那么，以上就是本节课当中想跟大家去分享的所有内容。这节课一共跟大家分享了三个要点，第一个就是我们如何熟悉以及设置相机的这么一个思路，第二个跟大家说了我们的这些按钮的操作，第三个跟大家说，真正的菜单，介绍了界面菜单该如何进行设置。</p>
<p>第四节课</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/125.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/126.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/127.jpg"><br>那我们首先先进入第一部分来讲，跟大家去讲一下我们的支撑系统。那支撑系统包含了我们的三脚架、云台以及我们的快装板。那这三者分别是，三角架会连接我们的云台，云台会连接快装版，快装板会连接相机的这么一个关系。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/128.jpg"><br>那我们首先来说一说三角架，那三角架在我们的拍摄当中，是有非常大的帮助的，不管是人像还是风光拍摄都会用到我们三脚架。</p>
<p>比如说在风光当中可以帮助我们拍摄更长的曝光时间，能够获得平滑的水面，车流的效果，获得更好的画质等等。</p>
<p>而在人像拍摄当中可以完成一些我们创意合成的操作。</p>
<p>我们常用的拍照三角架，其实是可以分成两类的，第一部分就是说，我们的这个脚管的锁紧方式是进行旋转锁紧的，第二种就是进行扳扣锁紧的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/129.jpg"><br>那这里面跟大家去展示一下我们的这个锁紧的这个方式。那大家可以看到，现在我拿到了这个三角架，就是这样一个扳扣的方式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/130.jpg"><br>那我们可以用手把这个扳扣搬开，然后就可以把我们的这个脚管去伸出来了。那这是一个扳扣的锁紧方式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/131.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/132.jpg"><br>而我现在手里拿的这一支就是我们的这个螺旋的旋转锁紧方式，我们通过这样一个旋转的方式，可以把我们的这个脚管给打开。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/133.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/134.jpg"><br>那么，三脚架除了刚刚跟大家去展示过的，这两个是个头比较大的三脚架，也有我们在这边的这个小脚架。这个也是我们这种桌面的三脚架，可以在我们的一些旅行当中，或者是一些便携的爬楼当中，我们可以进行使用的一款三脚架，非常的方便。</p>
<p>那我们大概知道三角架可以怎么分类之后，我们去进一步的认识三脚架，来认识一下他的命名方式，来更好的去理解这个三脚架，到底是一个什么类型的三脚架？</p>
<p>那这里面我用捷信的命名规则来跟大家去讲，捷信的命名规则，在三角架当中是比较通用的一个命名规则，在国内那些厂商也会追寻着这个命名规则来进行命名。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/135.jpg"><br>那大家可以看到现在我PPT的这个屏幕上打出来一GT2542的这个名字，那我分别对应跟大家说一说每一个字母，每一个数字都代表着什么。</p>
<p>G就代表着捷信，比如说国内的一些厂商像马小璐，应该就是一个M字母。</p>
<p>那T代表的是三角架英文的一个字头的缩写。那比如说还有会用K来代表套装，然后还有M这样的独脚架。</p>
<p>不同的这个字母代表不同的这个形式，那后面的4位数字的第一位2那这个代表了脚管的尺寸，也就是说是脚管的粗细，那通常我们会说叫1系2系3系0系，会有0123的这几个表达方式。</p>
<p>那第二个字母代表的是碳纤维，5代表的是碳纤维。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/136.jpg"><br>而第三个数字4代表的是这个三脚架有四节脚管，那大家可以看一下这根就是GT2542这根脚架，那我们一共有四节脚管，我们可以把它全部都伸出来。</p>
<p>大家可以看一下，一共有四节脚管，那这就是我们这个4所代表的意义。</p>
<p>而最后一个数字2代表这是它的版本，这是他的第二代产品，那如果第三代就会最后以3为结尾。</p>
<p>那在整个的这个数字之后，如果还有字母，那可能会代表一些功能性，那比如说代T字母代表的是旅行者，捷信的旅行者系列，也就是反折系列。</p>
<p>那如果带着S字母一般都是没有中轴的系统家系列，那这是它的一些功能性的代表。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/137.jpg"><br>那除此之外，我们可以看下一张ppt，这上面我也介绍了RRS这个知名脚架的这个厂商所代表的他们的命名规则，那我们其实可以去他们的这些官网上面去获得一些他们命名规则的一个知识。</p>
<p>那他这个上面叫TVC-34L大家可以看一下，上面我也写了T代表的是我们的这个三角架，然后我们的V代表了，我们是有一个中轴的这么一个设计的，然后C代表它是一个碳纤维的材质，然后3代表了它的脚管的粗细，然后我们的这个4代表了它四节脚管的节数，然后我们L代表了是一个增长的这么一个版本。也是他的这么一个功能性的内容。</p>
<p>下面来跟大家说一下我们这个脚架的一个结构的认识，然后来跟大家说一说我们如何去正确的使用我们的三脚架。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/138.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/139.jpg"><br>那现在我手里拿到的这个就是捷信的GT2542，就刚刚跟大家说过这个命名规则的这个三脚架，大家可以看到这个名称会贴在这个三角架上面。</p>
<p>然后我从上到下来，跟大家介绍一下，我们这个三角架。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/140.jpg"><br>那这个三角架最上面就是我们去连接这个云台的这个螺丝，那就是有一个3&#x2F;8，现在这样一个大的螺丝，也有一个1&#x2F;4小的螺丝。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/141.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/142.jpg"><br>那大家可以通过，有的是转换，有的是像捷信的这种可以把它拧下来，然后把它反过来，大家可以看到这个螺丝的反面是一个小口的，那有的三角架是可以通过摁的那种装置，然后来进行一个大小螺丝的切换。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/143.jpg"><br>然后再往下我们的这个中轴的这个开关，我们可以看到，三脚架中间是有一根杆的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/144.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/145.jpg"><br>那这个东西叫做我们这个中轴，可以通过这个开关把它松开，然后能够把我们的中轴进行这样的一个升起。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/146.jpg"><br>那在中轴的最下方，大家可以看到会有一个挂钩，那这个挂钩是我们可以在三角架底下去挂一些重物来为三脚架增稳时候的这么一个使用。</p>
<p>那有些三角架是中轴可以倒置或者说拆除的，那我现在这根三角架也是可以实现这样的功能。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/147.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/148.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/149.jpg"><br>那不同的三脚架的这个拆除的这个部位不一样。那我这个三角架是在这个下面，大家可以看到一个圈</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/150.jpg"><br>那这里面我们把这个圆圈松开，然后我们就可以把上面云台这个地方拿下来。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/151.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/152.jpg"><br>然后我们的中轴通过松掉我们中轴这个开关就可以直接把中轴撤掉。那这样的话，我们就可以获得一个无中轴的这个三角架。</p>
<p>那很多人可能想问说没有中轴有什么这个好处，那当我们在进行一些低角度拍摄的时候，我们要把三角架就是我们的中轴这样倒置插下去，要么我们就是要把它趴低，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/153.jpg"><br>那对于我个人来说，像一些低角度拍摄的话，我会希望把我们的这个三角架进行一个趴低的一个使用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/154.jpg"><br>如果有中轴在这个地方，我们是没有办法把三脚架去趴到这么低的这么一个角度的，而我们把中轴拆掉之后换成短中轴，我们可以架到非常低的一个机位进行低角度非常冲击力的这么一个拍摄。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/155.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/156.jpg"><br>那么大家既然看到了我刚去把这个角度开合的这么一个开关，那就是我们现在上面这个可以抠出来的这么一个地方，是控制我们的这个角度开合的一个开关。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/157.jpg"><br>那我们通常可以直接默认把腿掰开，就是我们的一挡，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/158.jpg"><br>那如果我们想去调更倾斜角度的这个单位，你就需要把它拽出来，然后控制在这个地方把它摁回去。这样的话，是二档。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/159.jpg"><br>那么还可以继续就是我们刚刚趴到最低的这个三档的角度。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/160.jpg"><br>那大家可以看到开合控制我们这个角度的旁边，每一个这个脚架的旁边都会有一个螺丝，那这个螺丝是控制我们的三角架这个脚管开合的这个力度的，我们这根脚管使用很大劲，还是说很松就可以开开，那这个时候我们可以通过这两边的螺丝，用我们的这个六角或八角扳手来进行一个调节。</p>
<p>那这也是我后面会跟大家推荐一款扳手就在我们的这个日常生活当中非常实用的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/161.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/162.jpg"><br>那么在底下就是我们脚管集结的这个锁紧装置，我们的螺旋锁紧装置。那通常来说，我会习惯，一只手直接把我们这三个旋钮都拧松，然后我可以直接把这个三角架给展开，然后如果收的话，我可以习惯可以一只手顶住，或者说我们顶在地上都可以，直接一下，就可以把我三个架顶开，然后我们把它直接锁紧就可以了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/163.jpg"><br>那再下面，是我们的这个脚钉，底下的这个部位叫做我们脚钉。那我们可以通过旋转，把我们的这个脚钉给卸下来。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/164.jpg"><br>有一些情况下，比如说我们的这种冰面，我们这种橡胶脚钉是会很滑的，所以说我们会换另外一种脚钉。那比如说在这种刚刚说到的冰面以及我们的这种苔藓的这种石头都是非常滑，所以说我们会换这种梅花的脚钉，那我们可以直接通过把它装在这个地方，然后去旋转，</p>
<p>就像我们刚刚正常拧螺丝一样，我们就可以把它旋转上。这样我们就完成脚钉的更换。</p>
<p>这样的话，基本上就是对于这个三脚架的整体的介绍。那么，下面来跟大家去说一下我们三脚架的这个使用的一些正确的方法，在大家认识了我们这三架所有结构之后，跟大家说一下它的具体的这个使用指南。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/165.jpg"><br>那我们通常用三角架的时候，会两个腿这样冲自己，另外一个腿冲前，这样去使用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/166.jpg"><br>另外，大家还可以对三角架进行一些灵活的使用，比如说大看在有一些这个栏杆的这种地方，我们可以选择把三脚架一个腿放长，先把它放下来，然后我们可以把它搭上去，那这样的话，我们就会得到了一个非常稳固的一个支撑方式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/167.jpg"><br>那这个时候我们再把云台架在我们三脚架上就可以进行我们的一个非常稳固的一个拍摄。</p>
<p>然后我们最后一个使用脚架的要点，那就是我们如果有中轴的情况下，我们优先升脚管，只要在脚管不够的情况下，在提升我们的中轴，因为中轴会影响我们的这个稳定程度。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/168.jpg"><br>那第二个就是说，我们在生这个升脚管的时候，我们优先去升我们上面这些粗的脚管，比如说，我们想要一个一节脚管的高度，那我们一定是先升的是这一根脚管。那我们这样去使用是正确的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/169.jpg"><br>那我们如果先升的是底下这根细的脚管会降低我们的稳定度，这样的一个使用方法是错误的。</p>
<p>那么，以上就是想跟大家去分享的我们这个三脚架的使用的指南。那么大家认识了我们的这个结构以及我们的这个使用指南之后，我们来看一看如何去挑选一款适合自己的三脚架。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/170.jpg"><br>首先，我们买器材，第一点都是不变的，都是先确认自己的预算，因为预算是我们的上限的这么一个内容。</p>
<p>然后我们会去确认一下拍摄的题材以及使用场景，其实就是大家的需求以及偏好。那就是大家说，我可能会需要一个重装的三脚价，比如说我会去拍一些海景的题材，我为了稳定性会需要它的重量大一些。甚至说我可能会去买一些便宜点的铝合金材质的三脚架，因为海水的腐蚀性比较强。这些要根据大家的这个拍摄替代和使用场景来看，比如说我可能喜欢徒步，我可能会需要一个轻量型碳纤维的三角架。</p>
<p>那再下面就是我们的这个重量以及材质会看到我们的这个便携性，就像刚才我们的一个综合考量之后来去确定。</p>
<p>那么再下面就是我们会考虑一些高度，我们的粗细，我们的节数等等，这个决定了我们三脚架的一个稳定性。</p>
<p>那一般来说，高度选择我们比人的身高矮20到30公分，是一个比较合适的这个高度了，这里面我指的这个高度是三角架，裸三脚架的高度，不包含云台也不包含相机，因为我们云台跟相机大概还是会给我们提升20到30公分这么一个空间的。</p>
<p>然后粗细的话，我们觉得如果大家是有旅行，轻便型的需求，买1系的其实就可以，</p>
<p>对大家拍风光来说，2系也够了，扫海可能会需要3系的这个教管的粗细。</p>
<p>对于节数来说节数越少，当然越稳定，但是我们为了收纳长度的方便，一般会买到三到四节的这么一个脚架。</p>
<p>那对于功能性，你是要根据大家自己的这个需求来看，比如说我们需不需要反折，我们是不是会更容易收纳一些，我们需不需要中轴的倒置，中轴的横制等等的这些功能。</p>
<p>那么，在大家知道了如何去选购自己的三脚架之后，我们来跟大家去推荐几个比较优秀的三脚架品牌，比如说大家想买千元以内的三脚架，可以考虑一下像斯瑞，百诺等等的这些品牌，那如果大家想买，稍微好一点，可以考虑福涂宝，马小璐，来途，国内比较优秀的厂商，那如果大家想买更好一些的，比如说国外的曼富图、RRS以及接线，这都是非常好的一个选择。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/171.jpg"><br>那么，接下来我跟大家说一说，三脚架上面最重要的这个东西，云台，那云台可以分为四类，</p>
<p>分别是我们的球形云台，齿轮云台，悬臂云台以及液压云台。</p>
<p>那悬臂云台是是用于鸟类的拍摄，那我们一般来说，使用的频率并不高。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/172.jpg"><br>而液压运台大部分会用于饰品的拍摄，那对于液压云台，大家应该会非常好分辨，一般都会带有这么一个手柄。那我们可以通过液压的方式能够得到一个顺滑的一个移动，这个是更适合我们饰品拍摄的这么一个云台。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/173.jpg"><br>而我们的齿轮运台，那现在我手里拿的这个是我们的这个齿轮运台，那它可以进行非常精细的调整，那大家可以看到，在我不断的去旋转之后，他的这个上面的这个水平移动得非常的缓慢，那这就适合一些我们比较精细的拍摄，比如说我们室内建筑的拍摄以及我们一些近物题材的拍摄。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/174.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/175.jpg"><br>而我们最常用的云台是我们的球形云台，那也就是我现在手中拿的这种，我们会有一个球形的这么一个结构，我们可以在松了这个球的阻力之后，我们可以直接顺滑的去转动这个球，那这就是我们的这个球形云台。那球形云台可以应对所有的场景，包括说我们日常的这样的拍摄，我们的这个风光的拍摄等等，</p>
<p>同时它是可以进行一个非常快速的调节，像风光的拍摄，我会比较喜欢使用球形云台，因为它可以在我们这种瞬息万变的这种光线的情况下，进行最快速的调整，而齿轮云台适合，像我拍摄室内建筑这种精细的慢慢调整这么一个方法。</p>
<p>对于大家刚刚接触，想买云台的话，我会推荐大家去选购我们的这个球形云台。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/176.jpg"><br>那下面，我以这一款球形云台为例来跟大家去说一下我们这个球形云台通用的这么一个命名规则。那这上面大家看ppt上面列出来。RRS  BH55，RRS代表了我们的品牌，BH其实就代表了，是我们球形云台的英文缩写，然后我们的55代表了我们的这个云台的球的大小，是55mm的这么一个球。如果大家看到40，看到30，大家都知道球会更小一些，是30或者40mm的这个大小。</p>
<p>那对于云台的选购，大家如果去买的是三脚架的套装，它都会默认带有云台的，一般来说，大家可能1000&#x2F;2000价位的这个三脚架都是默认会配有云台的。</p>
<p>那如果大家去想单独购置云台的话，那我给大家推荐几个品牌，刚刚大家说的这个马小璐和曼富图的云台是ok的，是一个比较性价比的选择。当然，曼富图的云台，我个人会比较推荐，如果大家想买一款比较好的云台，在资金充裕的情况下去考虑这个RRS云台以及阿尔卡的云台。这二者可以说是云台当中的这个王者。</p>
<p>那么，下面我们就用球形云台为例，来跟大家去介绍一下我们的这个球形云台的结构，以及它的使用方法。</p>
<p>那么，跟大家去讲一下我们的这个云台。</p>
<p>我们先讲一下云台怎么去安装到我们三脚架上。首先，我们确定云台底下的这个螺丝和我们三角架上的这个螺丝的大小是匹配的，像现在都是3&#x2F;8螺丝，我们可以直接把它旋转上去。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/177.jpg"><br>那么，通常云台的使用，我习惯的是这些所有的这个操控的一些按钮都冲自己，这样的话，我们会获得一个更加好的便捷的操控方式。不然的话，我们会需要反着手在这边去拧，我们把它都冲自己。这样的话，就能够最快速的去进行我们的这个云台的调节了，</p>
<p>然后跟大家去讲一下我们的这个云台上面，球形云台上面所有的这个结构。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/178.jpg"><br>那首先我们看一下最上面的这个旋钮。那这个是控制我们的这个液位槽，是这个快装版座加的。那我们通常是把它松开之后，把快装板放到上面，然后把它锁紧。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/179.jpg"><br>那下面的一个，我们是会有一个我们上面的这个水平的调整和旋转。那这个水平调整的旋转会带来非常大的好处，我会在后面跟大家去具体演示一下</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/180.jpg"><br>然后上面会有一个水平仪的气泡，那这个气泡控制我们的这个水平的判断，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/181.jpg"><br>然后再底下就是我们主体的这个球了，我们可以通过左边最大的这个旋钮来控制我们球的这个旋转。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/182.jpg"><br>然后我们底下有两个凹槽，我们可以让球凹进去，然后来进行我们这个竖排的操作，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/183.jpg"><br>那右边上面的这个摁钮是控制我们球台的阻力，也就是控制我们球台的这个松紧度的，那比如说大家可以看我现在把这个拧紧一些，大家可以看到我可以动，但是我需要使很大力气才能去动，而如果我把它调松，大概他自己就会滑下去，那这是对于我们这个球台的一个阻力调节。</p>
<p>那大部分的球台都会有这个功能，那有些可能是会在我们的这个锁紧摁钮的这个旁边会有一个小的这个旋钮，然后来进行调整的，那我个人觉得把云台带一点点阻，会好，因为这样的话，一旦你忘记锁紧你的相机，不至于直接摔下去。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/184.jpg"><br>那么下面这个是控制了我们这个云台的第一个全景的旋转。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/185.jpg"><br>那上面这个是我们的第二个全景旋转。那么接下来就跟大家说一说，这个双全景旋转的好处在哪里?</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/186.jpg"><br>那现在我去模拟了一个在斜坡上的情况，那我收了一个这侧的脚管，所以说它现在是一个斜着的状态，但是我用这个球把它调平。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/187.jpg"><br>那跟大家去说，这个双全景的好处马上就能体现出来了，那如果我们想进行全景接片的话，那我们就需要去左右旋转相机。那如果说我们用底下的这个全景来去旋转的话，大家可以看到我现在相机是水平的，但我转下去，大家可以看到相机向下低头了。那如果往这边转，相机就向上扬头了，那这是一个非常烦的事情。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/188.jpg"><br>那我们在接片的时候，会损失很多的像素，但如果我们是双全景，我们去拧松上面的这个全景，大家可以看到我不管怎么旋转，它都是水平的。那这就是双全景的好处所在。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/189.jpg"><br>最后我们说到整个三脚架最上方的这个部分，快装板，我们的云台和相机连接的这个部分，快装板一共有两种标准，一种是我们的这个曼富图标准，大家可以看到是这么一个卡槽的设计是板扣卡进去的，而我们的第二种标准叫做阿卡标准，它是一个燕尾槽的标准，是插进去的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/190.jpg"><br>那这里面可以跟大家去演示一下，我现在手里有一个阿卡这个标准的快装板，大家可以看到两边是这个燕尾槽的设计。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/191.jpg"><br>那我们在这个云台当中是可以直接把我们的这个侧面这样直接插进去，然后直接卡住，然后把我们的这个云台直接锁紧就可以了，这是我们一个插入，然后去顶紧的这么一个阿卡的方式。</p>
<p>那么，如果你买的不是曼富图的云台的话，那大部分遇到的都是这么一个阿卡的标准，而曼富图的话，就是你把它卡进去，然后板扣把它锁住。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/192.jpg"><br>那除了我们这种大家看到的这种小型的这种单面的快装板之外，我们其实还会有两种快装板能够用到。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/193.jpg"><br>那么，我们除了大家看到的这种我们的这个小型的标准的快装板之外，我们还有两种特殊种类快装板。那第一种就是我现在手里拿的这么一个长板。那这个长板会在我们拍摄全景接片的时候，有一个很大的作用，它能够减少我们的视差，也就是让我们的接片更加的顺利。那这个是需要找到镜头的节点，这里面我先暂时不跟大家展开来讲 </p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/194.jpg"><br>我想跟大家去详细讲的是，另外一款对大家拍摄当中非常常用的这个快装板，就是我们这个L型快装板，大家可以看一下，我这边有一个L型的这么一个快装版的这么一个装置。那这个可以非常方便我们的竖拍以及横拍的切换，保持我们相机的稳定。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/195.jpg"><br>那下面用三脚架来跟大家去展示一下我们这个快装板的好处，那么，然后再跟大家演示一下我们这个L型的快装板的好处。那如果说我们一台相机想竖拍的时候，那如果我们普通的快装板，一般要这样进行竖拍。那如果你的脚架和云台足够好，这样没有什么太大问题，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/196.jpg"><br>但如果一旦不够好或你的相机过沉的话，你整体的重心就会向这边倾斜，那很可能造成不稳定。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/197.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/198.jpg"><br>但如果一旦你有了快装板的话，你就会做到一个非常轻松的操作。那也就是说我们可以非常快速的把我们的快装板卸下来，然后我们直接用这面把它侧过来，就可以快速进行横竖拍的这么一个切换。我们的重心始终还是保持在中心，我们整套设备是最稳定的这么一个状态。那这就是L型快装板带给我们的便利。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/199.jpg"><br>那么以上就是我们第一部分的内容，跟大家讲完了，我们整个相机的知识系统，下面我们来去跟大家说一说，我们在风光拍摄当中最常用的另外一个东西叫滤镜系统。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/200.jpg"><br>滤镜系统，我们可以把它分为两种形状的滤镜。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/201.jpg"><br>那第一种就是我们的圆形滤镜，那就是像我现在手里拿的这种圆形的这么一个滤镜。那这种滤镜的是要根据我们镜头的口径来看的。那么上节课，跟大家去讲过了，我们可以在这个镜头的这个前面的这些信息，看到我们镜头口径，那比如现在这是一个82mm的这么一个口径，那么这个时候，我们就要对应镜头的口径去选择我们的这个圆形的滤镜。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/202.jpg"><br>那么第二种就是我们的这个方形滤镜，那它的好处是可以通用我们不同的这个口径，但是，也会根据我们最大口径以及我们的镜头，前面是平面的镜面还是球面突出的这个经验来去决定我们用哪一种方形的系统？</p>
<p>那比如现在我用的是一个100mm的这个方形的系统，那它还有更大的，比如说150mm，170mm的这么一个系统。</p>
<p>那么，这二者其实画质上并没有谁好谁坏，一个是看通用性，一个是看个人的这个使用习惯。那我们知道了，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/203.jpg"><br>这个滤镜可以分为圆形和方形之外，我们来看一看，具体都有哪几种滤镜。首先，第一种滤镜叫做UV镜，那其实就是一片薄的这个透明的玻璃片，那UV镜基本都是圆形的，因为它是要根据我们的口径去选择，然后在我们镜头前面的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/204.jpg"><br>那比如说大家可以看到我的这个2470前面就这样的一片UV镜的这么一个存在。那它的作用其实是可以保护我们的镜头不受损伤，那这也是UV镜的一个最大的作用了。</p>
<p>那至于你说要不要装UV镜，我觉得如果是一些价格比较低廉的镜头，那比如说像几百块，或者说几千块，一两千块的镜头，我们可以选择不装UV镜。</p>
<p>那再有一种情况就是我们镜头前面的这个镜阻是突出的，是球面的，叫做灯泡头。那这个我们有没有办法去安装UV滤镜，去保护我们的镜头。那除此之外，我们的镜头我还是建议大家去装一些UV滤镜，但是我建议大家去选购高质量的UV镜，而不要去选择一些劣质的UV镜，因为劣质的UV镜会严重的损伤我们的画质，而高质量的话，对画质的损伤几乎是可以忽略不计的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/205.jpg"><br>除了UV镜，我们还有一个叫做CPL滤镜，就是我们的这个偏振镜，可以消除我们的反光。那大家可以看一下我们的ppt上的画面，左图和中间这幅图，大家可以看到这个石头上的这个反光，明显左图用了我们这个CPL之后会更暗一些，而右图的杂光会非常的多。</p>
<p>我们CPL在拍摄蓝天白云、透的水面、在拍摄一些瀑布，这种有反光题材的时候，会比较常用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/206.jpg"><br>那么第三种滤镜就叫做ND滤镜，那它其实叫做减光镜，作用就是延长我们的曝光时间。</p>
<p>大家顾名思义，觉得减光镜是让曝光时间缩短，它是反着，它是会让我们的曝光时间延长。那大家其实可以去简单的去想一下我们的这个墨镜的作用。那会让我们的整个光线变得更暗，会延长我们的这个曝光时间。</p>
<p>那对于减光镜来说，分为可变的减光镜和不可变减光镜。当然，它更多的是分为我们的方形和圆形了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/207.jpg"><br>那我个人建议大家不要去选择这个可变的ND滤镜，或者说劣质的ND滤镜，因为这样的话，会严重影响了我们的画质，因为可变的ND滤镜很有可能会带来我们画面当中这个十字的这个黑叉，可以看到我现PPT图就是因为利用了可变的ND滤镜去拍照带来这么样的一个麻烦。</p>
<p>那至于说方形和圆形怎么选，我觉得看大家个人喜好，那方形的可能更加通用一些，我们不同的这个口径也可以通过我们转接环来做，能够进行一个通用的使用，但是有一些像灯泡头的滤镜，我们必须选用方形滤镜，而至于圆形的话，我们会携带更加方便。当然，我们圆形滤镜其实也是可以在一定程度上通用的，我们可以买一片更大的，然后通过转接环来向下转接，不过我个人是比较习惯在不同口径的时候用方形的这个滤境。</p>
<p>那现在我们的这个ND滤镜大部分有两种，一种是插片式的，就是我们有一个夹子，然后把片插进去。那第二种是磁吸式，我们可以直接贴上。这是我们市面上比较常见的两种方式。</p>
<p>那至于ND滤镜品牌上面，我推荐大家买一些国产品牌就可以。性价比较高，比如说我们卡瑟，海大等等这些都是可以选择的。</p>
<p>那我们ND的一个延展，还有一个叫做GND滤镜，那它是一个渐变滤镜。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/208.jpg"><br>那大家可以看到我现在刚刚跟大家去展示这一片就是纯黑的这么一个ND滤镜减光用的，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/209.jpg"><br>而我们的GND滤镜是我们渐变的，从黑到透明的这么一个滤境，大家可以看下这一片滤镜就是我们的这个GND的渐变滤镜。那这片滤镜，它是对于我们大光比的情况下去适应的，但是目前我们的这个后期技术其实已经足够先进了，能够代替我们这种渐变滤镜来进行一个操作，同时他有他自己的这个局限性，所以说这里我就不对他来过多来讲，我们平时使用的也不多。</p>
<p>这里面我就详细的来跟大家去介绍一下ND的这个名称，以及我们ND不同档位的选择。</p>
<p>那么，通过ND可以获得一些很好看的效果。比如说拉丝的水面、车流轨迹、我们这个云彩的流动等等这些效果。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/210.jpg"><br>那不同档位的ND会适应不同的情况。那我们首先来说一说，ND的档位是怎么来的？ND的档位，我们要怎么看？那ND挡位是通过二的N次方来计算出来的。从2开始，2481632一直到一千、两千，这样算下去的。那具体ND的表示方式会有两种，一个叫ND 1000，一个叫十档ND。那这二者说的实际是同一个事情，那不同的命名方式，ND1000是根据我们的这个快门速度来标注的，我们如果是一个1&#x2F;1000的快门速度，用了一片ND1000的这个减光镜，我们快门速度就会变成一秒，是以这个来进行定义的，而我们这个十档是根据我们曝光的挡位，后面会跟大家去讲到我们曝光这个挡位的事情来进行定义。那我们比如说有一个F1.4的光圈，然后放了一片ND1000的滤镜。那么这个时候我们需要一个F44的光圈来获得一个正确的曝光，那至于GND，简单跟大家去带一下，比如说常用的这种GND0.9，那它是以按十为底的这个自然对数来进行标记的。</p>
<p>那这里面我主要带大家去认识一下我们的这个ND滤镜，那至于ND实际的使用方法，后面在风光的这个拍摄当中，跟大家去详细的来讲。</p>
<p>那比如说，我们可以用app计算我们的这个曝光就是加ND之前和加ND之后的曝光，以及说我们如何进行一些ND暗的情况下的一个对焦的操作。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/211.jpg"><br>那么接下来跟大家说一下我们三个比较推荐大家常用的ND档位，首先第一个是三档的ND，叫做ND8，那利用这个档位，我们可以进行蓝调时刻的这种水面的模糊的拍摄，以及海水迸溅的这么一个效果的拍摄。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/212.jpg"><br>而我们ND64，6档的这个ND可以在我们的这个黄金时刻来拍摄我们更好看的，比如说车轨、车流等等的这些效果。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/213.jpg"><br>而最高档位的这个ND1000，十档的这个曝光适合在大白天来进行拍摄，拍摄出好看的这种白云的拉丝，我们水面模糊的效果，包括海水的雾化，都是可以进行ND1000的使用。</p>
<p>那么以上就是简单跟大家做了一个我们这个滤镜系统的概述，那至于具体讲解，我们会在后面风光拍摄当中来进行详细的阐述。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/214.jpg"><br>那么，讲完了风光常用的滤镜，我们来讲讲人像常用的灯光系统，这是我们的第三部分。那灯光可以分为不同的这个光源，比如说瞬间的这个光源，还有我们的这种持续光源。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/215.jpg"><br>那我们首先现在讲一讲瞬间光源，那也就是我们的闪光灯系统。那闪光灯我这里面分为四类，四种闪光灯。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/216.jpg"><br>第一种就是我们的机内闪光灯，那就是我们可以弹出来的这么一个闪光灯的系统，我们可以看一下，比如说我拿这个黑卡举例，我们就可以在机顶弹出来这样的一个闪光灯，我们可以进行一个机顶闪。那么这种闪光灯是我个人不太推荐大家去使用的，大家可以当机内没有这一种闪光灯，因为这种闪光灯闪出来的效果是不好看的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/217.jpg"><br>那第二种闪光灯就会比这种稍微好一些。那就是我前面所摆出的这样的一种机顶的这个外置的闪光灯。这种闪光灯我们会在拍摄像比如说活动拍摄，婚礼拍摄等等进行使用，那这种是我个人比较推荐的。</p>
<p>大家如果想玩闪光灯，可以入手的第一只闪光灯就是这样的，那除此之外，还有我们的这个外拍灯以及影棚灯。那这二者看起来长得差不多，那外拍灯和影棚灯有什么区别？外拍灯是可以有电池的，我们可以不接任何的电源线来进行拍摄，我们适合外拍大功率的进行使用，而我们影棚灯是需要连接我们的电源线来进行使用的。</p>
<p>那对于闪光灯来说，我们的这个闪光强弱，我们可以用功率来表示。那对于我们的这个外拍灯和影棚灯来说，我们会有，比如说300瓦，600瓦，400瓦，200瓦等等这样的一个功率的标注，那功率的数字越大，我们这个闪光灯就越强。</p>
<p>那目前来说，我个人比较推荐大家买的闪光灯国产品牌，像这种机顶闪推荐大家去买神牛或者允诺，而如果是影棚的这种闪光灯，大家可以考虑神牛、金贝。如果大家想购买一些更加高端的品牌，可以去看宝富图以及布朗。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/218.jpg"><br>那说完了闪光灯这种瞬间光源，我们再说一下常亮灯，这种持续光源，那长亮灯我们有两种，这里面跟大家去介绍，一种叫做LED光源，另外一种叫做钨丝灯。那常见的就是LED光源，比如说现在我正在录课所打的这个光，那就是一个LED光源，所给我人脸去补的这么一个光。</p>
<p>那比如说最左边就是LED影视灯，那还有右面就比如说LED拍人像的那种灯棒，以及我们便携的手掌这么大的这种小型的LED灯，很多小型的LED灯，还有一些可以变色、全彩的这种RGB的功能，也是一个比较好玩的这么一个性能。</p>
<p>那还有一种就是钨丝灯，钨丝灯是一个暖光的光源，在拍摄一些暖光的这种，比如说模拟太阳的场景下是比较好用的一种灯光。</p>
<p>LED话，会比较推荐爱图仕或者南光，小灯的话，比如说我们的这种飓风灯等等这些产品都可以选择，而对于钨丝灯的话，大家可以去看红头灯，包括说阿来的这种钨丝灯。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/219.jpg"><br>那对于我们的灯光来说，我们除了要玩灯光的这个主体之外，我们还要去玩一些灯光附件，就像我们玩相机，其实是玩镜头一样，我们玩灯光的，其实是在玩附件，而这些灯光束光的附件，就是我们能够改变光形状的这些小的东西，它才是我们真正用光的一些技巧的体现。</p>
<p>常见改光的这种工具，比如说柔光箱，有八角的柔光箱，四角柔光箱，深抛的柔光箱等等。包括说我们可以在柔光箱前面加一些隔山，还有我们的输光筒，四叶板、色纸，标准罩、雷达罩、反光伞，柔光伞以及蜂巢射片等等这些所有的内容，那这些都可以去把我们的光线去改变一个形状，改变一个颜色，更加符合我们想要拍摄的效果。</p>
<p>那么关于灯光的具体的使用包括我们一些光位，一些常见的补光方法，我们会在后面光线的那节课来跟大家进一步的去讲解。</p>
<p>那同时这些附件也有一些不同的卡口，比如说常见的宝龙卡口，那保富图有自己的保富图卡口。那还有一些其他的，比如说神牛自己的卡口等等。那不同卡口之间也有一个卡盘可以进行我们转接的一个操作。那我们对于光线来说，除了这种改光的附件，还有一些反光补光的附件，比如说我们的反光板可以进行对于太阳光或者说闪光灯的光源进行一个反射，对于我们人物进行一个补光。</p>
<p>那在灯光系统当中还会有另外的一个小附件，叫做引闪器。那对于我们这种机顶灯是可选择使用引闪器或不可选择使用引闪器，这个是根据你自己的情况来用，它可以直接把我们的闪光灯直接架在我们机顶，插进去，然后锁紧就可以。那这个情况下我们是不需要引闪器，我们就可以直接进行我们闪光的，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/220.jpg"><br>而如果我们想把它离机进行使用。那比如说我想现在这个位置给我自己补一个光的话，那这个时候我们就需要在机顶去架设一个引闪器来进行引闪了，</p>
<p>所以说这里面它是可选择，也不可选择，我们可以进行自主的一个选择的。</p>
<p>而对于我们的外拍灯和影棚灯来说，我们就是必须要选择引闪器，不然是没有办法引闪的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/221.jpg"><br>那最后说一下灯光的支撑系统，我们相应的支撑系统是我们的三脚架，而灯光的支撑系统就是我们的灯架，那灯架最常见的就是我们在PPT当中中间的这种灯架。我们就是三角，然后会有一些旋钮可以控制我们的这个上升和下降。</p>
<p>那最左边是一个日清的便携式的灯架，在我们进行外拍的时候会比较方便，而最右面是一个重型的灯架，叫做魔术腿，我们可以有横杆，有一个重装的底座，我们可以进行更加稳固的一个架设，甚至说进行一个恒制的一个吊起的操作都是可以使用的。</p>
<p>那我们讲完了最主要的三个部分，我们来看一看最后一部分其他的一些小附件。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/222.jpg"><br>那首先第一个是快门线，那它可以控制我们的这个相机快门的触发，他就是一个握在手里的东西。</p>
<p>那它有两种，一种是无线的，我们可以远离相机多远，有一定距离，然后来进行触发。</p>
<p>那第二种是有线的，我们必须连线在相机上，然后来进行触发，那个人觉得这两种都可以，看你自己有没有这个无线的需求，那至于为什么用快门线，比如说在一些长曝光的场景下，我们用手去触碰相机，会带来一些震动，那这些会有可能导致我们照片拍虚，而我们使用快门线，他会远离相机，我们不会去让相机有这种震动的产生。那这是他的一大作用。</p>
<p>那除此之外，如果大家进行间隔拍摄，进行延时的拍摄，那快门线可以进行一个间隔的定时曝光。</p>
<p>再比如说我们在拍摄一些超长曝光的时候，像几分钟的曝光，我们也需要快门线的进行这个定时的操作，这是我们快门线的一些作用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/223.jpg"><br>除此之外，我们再说一说储存的设备，那目前常见的有几种储存卡，像SD卡，CF卡，CFexpress卡、Cfast卡以及XQD卡。那么目前大家应该买到的相机里面最常见的就是SD卡。那最近一些高端的相机里面会放了CFexpress以及XQD的卡。那大家可以在买相机的时候去对应看一下它的卡槽标准，然后去看一下自己去选购怎么样的一个卡的类型。</p>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影前期入门（1）</title>
    <url>/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>第一节课</p>
<span id="more"></span>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/1.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/2.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/3.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/4.jpg"><br>运动相机：大疆、GoPro<br>卡片：索尼的黑卡相机</p>
<p>微单与单反的区别<br>1.光学结构不同<br>我们可以从大小体积上可以看到微单可能会比单反稍微小那么一点点，那这也是得益于它的光学结构在单反上面少了反光板的结构以及五棱镜的结构<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/5.jpg"><br>单反的缩写：DSLR<br>微单的英文：Mirrorless</p>
<p>单反有两种成相的方式：<br>1.利用反光镜以及五棱镜来进行光学的取景<br>2.利用我们的这个和微单一样的方式直接将光线传到传感器上。</p>
<p>关于微单和单反上常见的误区：<br>1.有人说微单不如单反，这一点是绝对错误的，微单没有比单反差，同时相反微单现在来说，光学结构上是更强的，它的对焦方面等等，包括体积上的优势，是更多的，那么我们未来呢，微单应该会取代单反，成为我们目前拍摄的一个主流，2.那同时我们的画质以及包括说我们的专业程度，用微单还是单反，这样的选择也是完全没有关系的，并不是说单反就会更加的专业，并不是说买一台微单就会更加的便宜，希望这几个误区，在大家刚刚认识单反和微单的时候，能够区分和理解一下。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/6.jpg"><br>传感器：西姆斯<br>它会决定了我们画面的画幅</p>
<p>大画幅——中画幅——全画幅来区分的，并不是说我们的全画幅会比中画幅更大，可能有些会混淆概念，最大的大画幅会偏向于技术相机，日常的会比较少接触到，所以这里就不跟大家详细的来说了</p>
<p>那我们不同的传感器大小也会影响到我们相机的一些性能，比如后面会跟大家去讲到的宽容度、等效焦距、虚化程度、镜头卡口选择、画质等。</p>
<p>残幅有人会叫半画幅</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/7.jpg"></p>
<p>大部分APS–C的相机都是做（23.5mm×15.6mm）的尺寸，对于佳能来说，它是有一点特殊的，它是（22.3mm×14.9mm）的这么一个画幅，所以也会带来它有点等效焦距比例的变化。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/8.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/9.jpg"><br>佳能产品线（EOS）<br>数字的位数越少，就代表相机的等级越高</p>
<p>6D2相当于是一个入门的全画幅单反；<br>5D4是一款高端的全画幅单反相机；<br>1DX3是旗舰的体育速度型的全画幅单反相机</p>
<p>大家如果从入门去学习来说，建议大家选择850D以上的机型会相对性的好一些，操控性也会更好一些</p>
<p>佳能单反的产品线一般都是用D来命名，配合着全画幅的EF卡口和我们的非全画幅APS-C的EF-S卡口</p>
<p>还有微单的近几年更新比较猛，微单的产品线</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/10.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/11.jpg"><br>14:50<br>数字越少，等级越高，数字放在了D后面，单反F系列，有FX和DX两种卡口。</p>
<p>15:57</p>
<p>FX&#x2F;DX代表我们全画幅和非全画幅这个镜头系列</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/12.jpg"></p>
<p>16:37</p>
<p>A系列，FE卡口或者E卡口。</p>
<p>A7跟A9是我们的全画幅相机，A9是我们的旗舰微单，跟我们说的佳能的1DX3和尼康的D6单反，是速度型的，现在更新到我们A9的2代，画质型A7R，均衡型A7，视频型A7S。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/13.jpg"></p>
<p>18:09</p>
<p>ILCE7&#x2F;&#x2F;&#x2F;，ILC代表着可更换镜头相机的意思，E是代表索尼的卡口</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/14.jpg"><br>19:21</p>
<p>它们分别是从体积，从小到大来进行排列的，如果大家进行旅行拍摄的话，我现在比较推荐大家去选择Mavic御系列，高端一些可以选择2代和pro，家用的话可以选择air和mini。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/15.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/16.jpg"><br>20:47</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/17.jpg"></p>
<p>焦距其实就是控制我们的这个视野范围的区间</p>
<p>我们的焦距越短，我们镜头上会有一个数字，多少毫米的数字，那这个数字越小，我们的视角就会越大，也就是说我们看到的这个范围就会越大，我们画面当中所能够容纳的东西，就会越广阔，但是我们画面当中，单个主体的占比就会越小，那反之，如果我们的焦距越长，我们的数字就会越大，我们的视角会越窄，我们拍摄的内容也会越小，我们拍摄的容纳的范围就会越小，我们单个主体在画面当中的占比就会越大。</p>
<p>大家可以想一下，我们用的是一个焦段比较长的镜头，大家可以理解一下我们日常当中用望远镜🔭，就是那样一个感受</p>
<p>我们可以根据焦段长短不同的数字，我们把镜头大概会根据我们的视角分成几个类别，比如我们最广阔的超广角镜头以及稍微会收缩一点广角镜头、中焦镜头、中长焦镜头、长焦镜头、以及最窄视角的超长焦镜头。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/18.jpg"><br>22:17<br>光圈是镜头上的一个物理信息，光圈越大，那我们镜头上会有一个F值的数字，那个数字就会越小，我们恒定的光圈镜头会好于我们的浮动光圈镜头，而我们恒定的光圈镜头数字越小，恒定的光圈越大的话，那这只镜头一般等级就会越高。</p>
<p>那除此之外呢，对于一只变焦镜头来说，它有两种变焦方式可以分类，一种叫外变焦镜头，也就是说，我们在拧动变焦环的时候，镜头的长短是有变化的，而我们的内变焦镜头，就是我们在拧动变焦环的时候，我们镜头的长短是没有任何变化的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/19.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/20.jpg"><br>24:31<br>恒定光圈是代表我们相机在不同的变焦焦段都能够使用到这个最大光圈，而不是说我们相机就不能够调整光圈，它就锁死在一个光圈不能动了，大家会有一个误解的地方。</p>
<p>如果是一个浮动光圈的话，大家就会看到像变焦一样，会有F2.8-F5.6的这么一个标识。</p>
<p>IS是佳能防抖的意思，<br>如果是尼康镜头，叫做VR，<br>如果是索尼镜头，应该叫做OSS，<br>都代表的是防抖的这么一个标识</p>
<p>佳能里面，DO是表示里面加了特殊的镜片，RF代表RF卡口，TS–E是代表移轴镜头。</p>
<p>27:45<br>1.黑色的罩子，叫做遮光罩，最主要的作用是保护镜头以及防止一些在逆光情况下的炫光，我们会通过一个锁紧装置，可以把它进行一个旋转，听到咔哒一声，<br>就会把它锁在我们的镜头前面，遮光罩一般会有两种形状，一种是花瓣型，一种前面是平口的，不同的镜头会有两种不同的遮光罩。我们可以摁一下解锁的装置，然后去旋转，我们就能把我们的遮光罩卸下来。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/21.jpg"></p>
<p>2.前面这个是对焦环，后面那个是变焦环（有70-200的标识），对焦环和变焦环中间有个距离窗，在我们手动对焦的时候会用到。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/22.jpg"></p>
<p>3.对焦窗转过来，就会看到一些非常多的摁钮，就是一些功能性的选项，从上到下跟大家说一下，最上面是对焦距离1.2m到无穷远&#x2F;2.5m到无穷远，这个代表1.2m之内没有办法对上焦的，从1.2m到无穷远这个距离才可以对上焦，如果是2.5m到无穷远，是代表2.5m之外才可以对上焦，这个时候我们会有效的避免掉一些前景被对上焦的情况，这也是长焦镜头会设置的这么一个选项。<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/23.jpg"></p>
<p>4.再下来会有个AF和MF，这样的一个标识，AF代表自动对焦，MF代表手动对焦，如果是AF状态下，我们半按快门，一般都可以默认进行我们的对焦了，如果它是一只自动对焦镜头的话。<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/24.jpg"></p>
<p>5.那再下面，会有我们的一个镜头稳定的标识（防抖开关），它会有一个开和关的这么一个选项，那我们通过拨动可以去切换，那对于我们手持拍摄来说，我们建议大家可以把它切换到开的这么一个状态下。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/25.jpg"></p>
<p>6.那再下面，会有我们稳定的这么一个模式，像这只镜头会有1、2的这么一个模式，分别代表了我们不同方向的稳定，模式1是我们日常会容易用到的上下左右四个方向都会有防抖，而我们切换到模式2，是我们在进行一些横向的追随拍摄的时候，它只有我们上下方向的这个防抖，那还有一些会有我们3的这个防抖模式，它只是在拍摄的时候会有防抖。<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/26.jpg"></p>
<p>7.还有一些镜头上面会有锁定摁钮，锁定掉我们的变焦，一般会在一些外变焦的镜头上面，比如说我前面的这只佳能的2470镜头，大家可以看到侧面会有我们的这个lock，锁定的这么一个摁钮，那如果我们把它进行锁定，我们是没有办法进行变焦的，变焦环是锁死的，而只有我们把它解锁，我们才可以把它进行变焦的这么一个突出。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/27.jpg"></p>
<p>8.长焦镜头一般都会有这么一个装置，叫做脚架环，因为我们长焦镜头前的体积会比较长，像在相机上，如果我们把相机架在三角架上，会不太稳定，所以说我们会把这个快装板架在我们的脚架环上，然后我们用这个脚架环去上三脚架，这样的话重心会比较稳定的，那我们脚架环呢是可以通过这边旋转的旋钮去松开，然后我们可以去调整脚架环的位置，如果大家平时拍摄的时候觉得这样端着是不舒服的，我们可以把脚架环去切换到上面，然后把它进行这么一个锁紧，这样的话我们稍微在底下去握持这个镜头的时候，就会比较舒适，当然我们可以通过把脚架环松到最松，然后把它拆下来，那我们也可以看到，这个脚架环上会有这么一个黑色的标识，那我们两个黑色标识对准，就是我们可以能够把脚架环对到一个最正的位置，我们把它锁死就可以了。<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/28.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/29.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/30.jpg"></p>
<p>9.那再后面，就是我们镜头的卡口，黑色的盖子，这个叫做镜头的后盖，那我们拆开之后，就是我们镜头的后卡口了，像这只是EF卡口，就可以把它装到相机上了，那这样的话就是我们对于这只镜头的简单的介绍。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/31.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/32.jpg"><br>33:50<br>牙膏厂：代表的是佳能，因为它有时候会小幅度更新，比较容易挤牙膏，所以叫做牙膏厂<br>灭门：是代表把我们整个品牌的系统全部换掉，不管是这个品牌的相机，还是这个品牌的镜头，我们全都换掉，这叫做灭门。<br>出家为尼：家一般代表的是佳能的佳，谐音梗，出掉佳能，换成，尼一般代表的是索尼，就是从佳能这个品牌，灭门换掉索尼的这个品牌。<br>回家的诱惑：这个在今年会比较常玩的一个梗，那就是我们在EOSR5发布的这个时候，很多人在说佳能又回来了，回到佳能的怀抱。<br>牛头、狗头：这个代表的是我们镜头的好和坏，一些素质比较差的&#x2F;便宜的镜头叫做狗头，像刚刚跟大家去举例的这个红圈镜头可能就叫做这个牛头了。<br>大光定：大光圈定焦镜头的缩写，比如说我们的85–1.2这种镜头都是叫做大光定。<br>大三元&#x2F;小三元：其实就是一套组合的覆盖非常全的变焦镜。<br>红圈&#x2F;金圈&#x2F;G–Master：分别是佳能、尼康、索尼这个代表性非常优秀的镜头。尼康的这个红圈是用金圈来表示的，而索尼是用一个橙色的这个G–M的标识来去表示的。<br>天涯镜&#x2F;小痰盂：天涯镜是代表一个大的变焦比的镜头，比如说我们28–300镜头就是一个天涯镜，因为你可以一镜走天涯，用一只镜头会拍到所有的焦段。那小痰盂呢，包括说有一些饼干头，这些都是代表我们比较小的镜头，像小痰盂是特指，比如说50–1.8，像佳能50–1.8这只镜头叫做小痰盂。<br>饼干头&#x2F;大炮：而至于饼干头呢，都是一些个头比较小，比较薄的镜头叫做饼干头，像佳能的比如有一只40的薄的饼干头，40–2.8应该是我印象中就是一个饼干头，还有一些对应饼干头，就是体积非常庞大，像这种400-2.8定焦，又叫做428的这么一个东西，那这种就是叫做一个大炮，大炮就是代表我们的一些长的远射的这种镜头了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/33.jpg"><br>37:36<br>什么是变焦镜头：变焦镜头非常大的一个好处就是说覆盖了我们较多的焦段，我们的拍照是非常的方便，可以站住不动，直接去变焦来进行拍摄，可以去改变我们这个视角的宽窄，也是比较推荐大家刚刚接触摄影的话去用这个变焦镜头，一个是能帮助大家去熟悉焦段，一个也是真的非常方便。<br>套头：大家买的这个相机，套装里面跟的这个套机镜头，比如常见的18-55这只镜头，那就是一只变焦镜头，那还有一些其他的比如说，100-400，150-600等，这些都是我们常见的变焦镜头。</p>
<p>大三元：一般是指从16毫米一直覆盖到200毫米的这么一个焦段的三只镜头，同时这三只镜头，都是恒定的2.8光圈。</p>
<p>小三元：而小三元呢，覆盖焦段基本也是一致的，只不过它恒定光圈，恒定在了F4。</p>
<p>那通常来说呢，大三元镜头都是我们这个各个相机系列里面顶级的镜皇镜头了，当然也会有现在的这个佳能RF系列，出现了一个F2的这个三元镜头，出现了其中一元，那这个也有人会叫做超三元，如果大家听到这个名字的话，大家可能会知道它是F2的这么一个恒定光圈了。</p>
<p>那我们简单来说一说，大三元的焦段，比如说像佳能以及索尼都会有这个16-35F2.8这只，比如说我们适马镜头和尼康会有14-24F2.8的这么一只。</p>
<p>再有就是24-70F2.8或者说28-75F2.8，以及70-200F2.8，这三只组合成了我们这个大三元。</p>
<p>而我们小三元呢，是我们16-35或者叫做11-24F4，24-70F4，以及70-200F4组合成了我们这个小三元。</p>
<p>大家可以看到这个焦段覆盖真的是非常全面的，我们可以应对各种各样的拍摄题材，只要这三只镜头在我们身边。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/34.jpg"><br>40:03<br>常见的定焦镜头，也是覆盖了焦段非常广，但它只能覆盖单焦段，如果你想去，更改焦段的话，就需要去更换镜头，一个呢是如果大家买很多只的话，更换起来也比较麻烦，在一些拍摄当中会比较复杂，也会增加大家的背负的重量，同时也会比较费钱，这也是为什么大家在一开始的时候会推荐大家去使用变焦镜头。</p>
<p>首先是我们超广角的12毫米，这只老蛙的12毫米F2.8的镜头，非常的优秀，然后就是我们的适马14的这只镜头，也是非常优秀的一只超广的定焦镜头，非常适合我们的星空拍摄，在往下有我们的20F1.4，也是非常优秀的星空镜头，再往下有我们的索尼的这个G-Master，这么一个24毫米的镜头，还有我们像35的焦段，40的焦段，50、85这些人像比较常用的这么一个焦段，那这些焦段通常，都会有F1.8，F1.4以及少有一些焦段会有F1.2的选项。</p>
<p>那对于大家刚刚想去买定焦镜头的话，我比较推荐大家去买F1.8，如果资金比较充裕，可以去选择F1.4、F1.2，如果大家只是想去尝试一下大光圈的话，不如试试我刚刚提到的那个小痰盂50F1.8价格会比较的低廉，性价比会比较高，索尼的这个焦段会在55F1.8，尼康和佳能都是50F1.8。</p>
<p>那在85之上会有我们90和100这两个焦段，是我们的微距比较常用的焦段，会有两只非常优秀的微距镜头，再往上也会是我们人像会用到的焦段，但是可能没有那么常用，比如105以及135的这两个焦段，如果继续往上的话，就是一些远射的这个定焦了，都是拍野生动物、新闻赛事，我们日常拍摄就不太常用到。</p>
<p>这里面大家可以看到，在我们图表里面，适马出现的概率非常高，那适马做定焦镜头，做得真的是非常的不错的，适马ART的这个R系列，是我们在定焦镜头选择里面一个非常性价比的这么一个选择，当然像我们索尼自己的原厂，佳能自己的原厂，定焦镜头也是非常不错的，像佳能会有RF的这么一只85F1.2的镜头相当出色的画质表现</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/35.jpg"></p>
<p>那除了我们常规的这种变焦镜头和定焦镜头之外，我们还有一些特种镜头，那比如说我们的一些微距的特种镜头和老蛙24的长边镜头，就是一只非常常见的特种镜头，还有一些是拍建筑物空间或者玩一些创意拍摄可能会用到的移轴镜头，就是刚刚我们在讲镜头参数提到的TSE的镜头，这是我们的特种镜头，包括说鱼眼其实也算是一种特种镜头，它可以拍到这个弧形带有畸变，但是非常有冲击力的画面，在我们用到一些场景的时候，也会非常的有特色。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/36.jpg"></p>
<p>那最后来跟大家去推荐一下，如果我去选择第一只的全画幅镜头，我们该如何去选择，那这里面我建议大家，第一只镜头刚刚说过，去选择变焦镜头，那除此之外呢，我们建议大家去选择一个中焦焦段的变焦镜头，也叫做标准变焦镜头，可以去选择24-70F2.8或28-75F2.8这个大光圈的镜头。如果大家没有大光圈的需求，同时又想追求一些性价比或者轻便的话，我们可以选择F4的镜头，那我们可以选择24-70F4以及24-105F4。那如果大家是旅游或者家庭记录比较多的话，我其实挺推荐24-105F4这只镜头的，因为它会提供一个相对更长一些的焦段，在大家去旅行拍摄的时候，会提供一些便利 ，同时F4的光圈也不算很小，能够满足大多数的一个拍摄。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/37.jpg"><br>只选一只，就是刚刚的24-70或24-105<br>那如果选择两只，我会用16-35搭配70-200或者100-400，那这也是我风光会比较常用的组合，甚至说旅游我觉得也是一个不错的组合，因为我们可以覆盖大部分的焦段，要广我们可以拍摄具有冲击力的画面，要长我们可以拍摄一些特写简洁的画面。<br>那如果选择三只的话，我们可以加上刚刚的16-35、70-200这两只镜头，再加一只大光圈的定焦镜头，比如说50F1.8这样的镜头，可以帮助我们获得更好的虚化，去帮助我们拍摄更好看的这种糖水的人像照片，当然你可以选择把大三元配齐，配上24-70这个焦段，当然我个人觉得如果不是做商业拍摄的话其实并没有很大的必要，因为24-70的焦段，在16-35和70-200已经都有的情况下，会显得略有尴尬。如果三只以上，那慢慢的你就会去配定焦镜头了，会去买一只35，去买一只85等等，那我个人的话，会在人像拍摄上，会用35、50、85定焦的这么一个组合来去拍摄，那如果是旅拍，我会选择大三元的这么一个变焦的组合，这是我日常镜头的一个选择，这六只镜头是我在拍摄之中最常用的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/38.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/39.jpg"><br>在数码产品界，都有一个原则，叫买新不买旧，我们在相机里面也是一样，那我这边个人来说，推荐大家现在可以的话，尽量去选择我们的微单相机，微单的话，我们佳能、尼康、索尼这三个品牌也是比较主流的，除此之外，大家可以考虑，富士的微单相机。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/40.jpg"><br>不要被一些媒体和厂商的宣传所带偏，比如今年一台非常有名被带偏的机器，佳能EOS–R5，这是一台非常好的照相机，被宣传成了一台非常好的视频机，以至于很多人去忽略了它拍照的功能。</p>
<p>对于一个标准价格在哪里，可以去京东查询一下，京东的价格相对性还是比较公道的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/41.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/42.jpg"></p>
<p>如果我们刚刚入门，想买一台微单的话，可以去考虑索尼的a6100，再往上我们可以去考虑索尼的a6400，这些都是我们APS-C画幅的微单相机，包括佳能M62代也是可以考虑的，那如果我们想考虑高端的APS-C画幅的微单，可以看一下富士XT4，比较好的选择，非常好的色彩科学，如果我们想买全画幅，可以看一下佳能EOS–RP，非常性价比，非常便宜的一款全画幅相机，然后索尼的a73代，性能均衡，价格也不是非常高的这么一款，再往上呢，就会有我们的a7R3代或者4代，大家看有没有高像素的需求，有高像素可以买a7R4代，如果没有高像素需求可以买a7R3代，那至于高像素好还是坏，我会在后面一节课来跟大家去说，其实是各有利弊的这么一个事情，再有比如说一台均衡机，可以去考虑佳能EOS-R5，除此之外，如果大家对于宽容度有很好需求，想拍摄风光的话，我这里面推荐整个里面唯一的一台单反相机，尼康的D850。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/43.jpg"><br>这节课首先讲了相机的初步认识，知道相机的分类，然后跟大家说了镜头的认识，镜头的分类，跟大家去推荐了一些镜头，大家认识了镜头的功能，什么是变焦镜头、什么是定焦镜头，最后跟大家介绍如何去选购自己的第一台相机。</p>
<p>第二节课</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/44.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/45.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/46.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/47.jpg"></p>
<p>像素其实是数码影像的一个单位，照片都是由大量的像素构成的，那像素越高，那照片自然就会在屏幕上看起来感觉越清晰，但像素的高低并不决定相机是一台好相机还是坏相机，像素并不是我们判断的唯一标准，在日常生活当中，没有必要追求极高的像素，后面会马上去跟大家说为什么不要去追求极高的像素，它会有什么缺点呢？</p>
<p>右面两张图是对于左边这张图局部的放大，右上角这张图大家应该已经能够看到一些小的这个网格，这些网格其实就是像素，右下角这张图非常明显的有这种色块，一个小方格一个小方格的，那这样每一个方格就是一个像素，这些像素拼起来就是左边这张图了，这就是像素在我们画面当中的概念了。</p>
<p>高像素固然好，它会让我们照片看起来更加清晰，能够让我们有更多的裁剪空间，也可以进行大幅的打印输出，但是高像素会带来两大压力，在大家去选择高像素之前，一定要考虑这件事情，一个是储存压力，一张高像素的照片可能会上百兆，第二个就是我们的后期压力，高像素照片可能会需要更高的电脑处理性能，才能够进行后期修图，这是我们高像素的弊端。</p>
<p>常见的像素有我们的1800万，2400万，3000万，4500万，5000万，一个亿等等，就是刚刚跟大家提过的富士GFX100的相机。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/48.jpg"></p>
<p>动态范围其实是光的强度，我们越亮、越暗之间的范围。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/49.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/50.jpg"></p>
<p>宽容度好能够容纳更多的动态范围，帮我们记录更多的明暗细节，获得更好的画面。</p>
<p>大光比，高反差，高动态范围的这种情况之下。</p>
<p>大家可以看PPT上，举例的这个照片，这张照片就是一张原片，就是一个大光比的场景，前期进行了一个欠曝的向左曝光的操作，为了保护更多的高光细节，但因为整体的内容还在我们相机宽容度的容纳范围之内，所以说我们动态范围ok，然后我们去在后期当中提亮暗部，利用宽容度把我们记录下的所有细节给恢复回来，提升阴影，然后复原我们所有细节，然后就能够获得一张曝光正常的一张照片了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/51.jpg"><br>关于镜头大家都会知道索尼的相机其实是可以转接佳能镜头的，很多人也是这么做。</p>
<p>好处是我们可以省钱，我们可以同时有佳能相机和索尼相机，就可以用索尼相机去转接佳能的镜头，第二个就是我们刚刚说的，可以有一些特殊的功效，比如说后面去内置MD，或者说一周功能。</p>
<p>不好的就是说，会有一些不稳定的情况，比如说有一些限制，比如说索尼去转接佳能的这个镜头在拍视频的时候可能不能自动对焦，这些是一些限制性的内容，如果说可能像佳能自己RF去转接EF的时候，防抖功能会有一些限制。</p>
<p>那么大家可以看到我手上拿着的就是转接环，其实里面没有任何的光源结构，只是去转接了我们这么一个卡口，目前来说佳能转接索尼，应该是比较完备的这么一个技术，所以说大家如果想转接的话，是完全可以放心的，在拍照上面没有任何一个问题。同时，如果大家是自己的原厂，佳能自己的单反镜头转微单镜头的话，应该也是非常稳定，也是可以去选择的。那这个也是我们过度的选择，是一个很不错的省钱的性价比选择。</p>
<p>那我们说完了转接环，那我们再回到相机的评判要点，把上节课的内容作以补充和拓展。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/52.jpg"><br>02 关于器材，你必须要了解的那些事 P2 - 09:23<br>那首先呢，第一个要点就是外观以及重量，你会考虑相机的，比如说是材质啊？是不是这个铝合金呢？还是说塑料的这种壳，然后手感，包括说我们外面的这些加了这些增加阻力的胶，以及我们相机的体积，重量，配色等等。</p>
<p>那第二点就是我们的便捷性以及耐候性。那我们这个相机是否本身这个机身就足够，我们拍摄就能够带出去。还是说啊，还可能需要很多附件的这个辅助才能够进行正常的拍摄，那是否有三房的能力，是否在一些极端天气下能够有较好的这个防控性能。比如说，雨天的这个防雨滴溅，包括说我们在沙漠里面会进沙这些情况能不能得到一个有效的保护。</p>
<p>那第三点就是我们的体验以及操控性。那我们相机的握持的这个手感，按键的布局，我们的菜单是不是反人类，对吧？我们的取景器，包括说我们屏幕是否能够有一个高精度的这个还原的显示，我们屏幕能否触摸，能否翻转等等，这些都是我们的这个体验和操控的一些性能。</p>
<p>那在下面就是我们刚刚提到的画质以及像素，我们是需要怎样的画幅，我们要多高的像素，动态范围，我们的高感性能等等，包括我们色彩科学都会在这里面，大家可以去做一些考量。</p>
<p>那在之下就会比如说自动对焦，连拍等等，我们是不是能够很好的自动对焦的覆盖面积，我们的十字双生的对焦点以及我们是否能指示点空对焦，我们连发速度有多高，是否能够持续的高速连拍等等，如果说大家有视频需求的话，这里面我加了个星号，让大家可能也会考虑到一些视频，比如说我们这是怎样的格式，是怎样的编码，我们能够拍到怎样的帧率，怎样的分辨率，我们有没有logo的这个曲线，有没有超采样，有没有这个裁切等等这些相关的因素。</p>
<p>那最后一点可能大家去考虑就是我们的拓展接口以及镜头系统，你相机的接口是不是都满意，以及你的镜头系统是不是符合你想用到的这些，毕竟你玩相机其实更多玩的是这个镜头整体的这个系统，所以说你要看一下你的镜头系统是不是符合等等，这些都是我们判断的要点，那我们就可以根据这些评判的要点去结合上我们上节课，跟大家去讲的，我们的选购指南来进行加权来进行判断，我们自己到底需要怎样的相机，同时呢？我在这里跟大家去进行一个拓展，我们去推广到不只是自己的第一台相机，我们之后换机器都可以根据这样的一个方法去进行考量。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/53.jpg"><br>首先，第一点没有变啊，我们还是要确定预算，因为运算真的是能够卡住我们这个上线的这么一个内容。</p>
<p>第二个我们确认需求就是去结合我们的评判标准，去增加权重。</p>
<p>第三个确认我们偏好，是根据我们某个品牌的这个特性，因为某一个品牌型号可能去增加这个权重。</p>
<p>那第四，那接下来一个就是去根据自己的现有的这个器材情况来去权衡，比如说我先用这个佳能，那我可能更愿意去用佳能，那这样的话，就会去增加这样的一个权重。</p>
<p>那这四点结合我们刚刚评判标准去增加权重，就完成了自己去相机选购的这么一个完美的职能。</p>
<p>我也举一个我自己的例子去说一说我下一台相机的这么一个选择。那我下一台相应的选择应该是佳能的EOS–R5。那我去根据这几个评判要点来跟大家去说一下。那首先预算上限，那我可能觉得大概三万人民币以内。那这个时候我就基本排除了中华服务的GFX和50X，GFX100，然后像EDX，D5的这个旗舰的速度机。</p>
<p>那对于我个人需求来说，那我常拍风光照片，那风光需要一些高宽容度，高像素，出色的高感以及弱光的对焦性能，较好的耐候性，那工作上我可能会比较需要一样眼部对焦，在拍人像的时候，以及高速连拍在拍摄活动的时候，偶尔可能会兼顾一点点视频，视频并不是非常的重要。那个人的偏好上我会想买微单，然后我想尽量的轻便一些需要操控比较方便，比较符合我的单反的这种快速的操控，相机身上会有一些多的快速的操控的一些按钮，握持舒服会有一个翻转触摸屏，那只有我个人，其他情况就是有佳能相机，同时大量EF卡口的镜头群，并且暂时并不想换门，所以说这样的这个权衡下来，我就会增加很多的权重，最终能够去选择这样的一台佳能EOSR5的这么一台相机，那这样的话，就是大家自己去选购相机的这么一种分析方法了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/54.jpg"></p>
<p>那当然大家可以看更多的评测，那也跟大家去推荐几个评测的这个器材的网站，优质器材比如说，各个的官网，大家可以了解相机的本身内容，那除此之外呢一些评测的机构，权威机构，比如说DXO的评分啊，蓝tuer这个评测和评分。以及DPReview，相机笔记以及影像狗的公众号都是值得大家去观看的。</p>
<p>那么以上，就是我们这第一部分跟大家去说的这个相机和器材的这些名词的补充，对上节课补充的所有的内容都跟大家去说过。也跟大家去做一点的拓展，那么接下来就跟大家去讲解我们的下一部分，第二部分的内容了。那在第二部分当中呢，我会跟大家去说一些关于操作和拍摄的这些名词，那这也算是下节课的一个引子，因为下节课也会正式跟大家去讲到相机的操作，先给大家去铺垫一些基础的概念。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/55.jpg"></p>
<p>那首先先跟大家去说的这个概念叫做拍摄格式，那我目前常见两种拍摄格式就是RAW格式以及JPG格式。那我这里面的列了一个表格，在PPT上面大家可以去看一下这二者的这个异同的差别。那么RAW格式，其实是一个未经处理未经压缩的这么一个格式，可以把RAW的的概念理解为就是一个生肉的。这么一个概念，像英文的这个字面意思一样，是未经任何处理的原始的，或者形象你可以理解为就是一个底片，数码底片的这么一个概念，它的色彩信息会更加全面，我们的这个元数据信息，像相机拍摄的这些元数据信息也都会储存在我们的这个RAW文件当中，而RAW文件能在我们的后期调节当中，可调节的范围也是更大的，而我们的JPG照片，它其实是一种有损的压缩格式，但是是我们目前比较常用的一种有损压缩格式了。那它在后期的时候，局限性就会更大一些，所以说，这里面我会比较推荐大家在前期拍摄的时候，拍摄我们的这个RAW格式的文件，那同时，我们RAW格式在后期可以自定义非常多的东西，比如说我们的白平衡，在后期当中是可以随便更改的。而JPG就做不到这一点，那同时我们像相机里面会设置一些自定义的风格的这种色彩信息，我们的RAW格式是不能够保存的，而我们的JPG也是会应用这些信息的。</p>
<p>至于优缺点来说，我们的RAW格式体积大，信息全面，刚刚说过了，后期调整空间大，是最原始这么一个数据信息，而我们JPG的这个格式，是体积小，但是有损，后期空间调整比较小，它是会有一些相机的机内调整在的。</p>
<p>所以说我们这种直出的照片就是说，我们在相机直接拍完就想发送出来的照片，你可能JPG的观感会比RAW的观感更好一些，因为这JPG是有机内优化的，那这个后缀名，我们的这个RAW格式会根据不同的相机厂商有不同的后缀名，比如说佳能叫做CR2或者说CR3，而索尼叫做ARW，我们大疆叫做DMG，尼康叫做MEF，这是我们主流的几个后缀的这个RAW格式的名称，而JPG的话，就是.JPG或.JPEG了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/56.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/57.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/58.jpg"></p>
<p>那下面我会用这个实际的照片跟大家去看一下我们的这个RAW格式和JPG后期空间的这么一个区别，大家也看到左图是一个欠曝的原片，那我后期进行同等程度的一个提亮，而RAW格式大家可以看到这个树林的部分，提亮的细节是非常多的，同时画面的画质也很好，而如果我们使用JPG提亮它，明显觉得这个树林的部分暗部是提不起来的，没有细节了，而同时画面当中出现了非常严重的画质下降，出现了色块的这么一个现象，所以说我们RAW格式在后期当中会有着非常大的优势，那也给大家去看一下我们这张照片最终利用RAW格式后期出来的这么一个成片。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/59.jpg"></p>
<p>那当然我们还可以再举一个例子，我们在这些欠曝的情况下，我们RAW格式是可以记录非常多的信息，后期调整空间非常非常大的。那所以说我们可以获得一个结论，就是我们在拍摄的时候，到底要选用一个什么样的格式来拍，我个人刚刚建议大家拍RAW格式，但是很多同学可能会想快速预览或者快速去发朋友圈发给朋友，那这个时候就可以拍摄RAW加GJP的这么一个拍摄格式，RAW格式便于我们后期，那JPG便于我们预览以及发朋友圈，这样我们就把个个优势都结合起来了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/60.jpg"></p>
<p>那我们跟大家说完，我们去拍摄怎样的格式，再跟大家说下一个大家可能会遇到的这么一个名词叫做联机拍摄，那如果大家比较喜欢拍摄人像或者说静物产品等等这些内容，大家可能会在室内进行拍摄，那我通常都会涉及到这样的一个名字叫做联机拍摄了。那简单来说，就是把相机连用一根线连接到我们的电脑上，我们可以用电脑实时去查看相机拍摄过的照片，甚至说用电脑控制相机进行拍摄，那我们联机拍摄的软件，其实有很多的，比如说佳能和索尼都有原厂的联机拍摄软件。那我们大家熟知的NIKON也可以进行联机拍摄，但是我个人觉得，NIKON的联机拍摄功能非常的不好用，我这里面跟大家去推荐一款联机拍摄软件，叫做Capture one是知名的这个高端的相机厂商,飞思所做的这么一款软件,，简称了叫做CE。那么下面，我也会用佳能的5D4以及我的这台笔记本电脑和Capture one 的软件来跟大家去做一演示来跟大家去演示一下如何进行联机拍摄。</p>
<p>那至于联机拍摄的好处，就是我们可以进行一个实时的查看，我们可以看到画面的细节以及我们的这个实时拍摄到的照片，尤其包括我们在一些商业拍摄当中，我们可能会给客户来看，我们自己去看一些具体在电脑的细节或做一些简单的调整，并且应用预设，那这些都是我们联机拍摄的一大优势，我们在棚拍的时候，会比较多用。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/61.jpg"></p>
<p>那么下面我们就跟大家去来做这个演示。那我们首先把这个USB3.0这个连接线，我们连接到这个相机的连接接口，然后把另一端连接到我们这个电脑的USB接口就可以完成了我们的这个联机的这个操作非常的简单，</p>
<p>然后我们在这个电脑上去打开我们的这个Capture one这么一个软件，然后去新建这么一个会话，或者说目录都可以，大家看我现在已经做好了这么一步的操作，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/62.jpg"></p>
<p>然后我们可以看到我们去选择第二个面板，叫捕捉面板，咱们去点击它，那我们就会显示到我们这个相机，是我的佳能的5D4，然后镜头是16–35这些信息都可以识别出来，然后我们可以看到我们拍摄的这个模式，我们这个挡位，我们的这个电池信息，曝光补偿，ISO，我们的光圈都可以，包括说我们的这个驱动模式，测光模式等等，我们都可以在这个地方显示出来，并且我们都可以去点击更改。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/63.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/64.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/65.jpg"></p>
<p>那比如说我们可以点一下去改我们这个画面的ISO，包括说我们可以在这边去改白平衡，拍摄的是RAW还是什么样的都可以在这里面进行更改，然后我们去点击右边这个大的圆形，那我们就可以拍摄一张新的照片。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/66.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/67.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/68.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/69.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/70.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/71.jpg"></p>
<p>那我们如果去点击我们视频的这个按钮，那我们就可以去打开我们的这个实时预览的这个导航界面，那么大家可以看到我们会弹出一个新的这么一个窗口，然后我们可以在这个界面上面看到我们相机的这个实时预览。那大家可以看到，如果说我这边去晃动我的相机的话，那我们这个也可以进行我们的这个实时的这么一个晃动，包括说我们相机的这个变焦。大家可以看到，我们可以进行这样的一个实时的预览。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/72.jpg"></p>
<p>这里面我先把它去关掉，我们再进行看一下我们的这个进一步的操作。那底下，我们还有另外一个可以去调整我们这个相机的对焦。那我可以通过这个对焦的这个软件来去操控相机的这个对焦功能，当然，我们可以使用自动对焦没有任何问题。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/73.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/74.jpg"></p>
<p>那么，再底下一些的设置就是我们去保存的拍摄的命名以及我们保存的位置。那么这就是我们的基本的这个。那么下面的两个设置就是我们保存的命名以及保存的位置，就是我们相机的这个拍摄出来的照片会储存在电脑的哪一个地方。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/75.jpg"></p>
<p>而最上面就是我们对于每张照片的这么一个曝光的评估。那是我们一个直方图，是我们后面会讲到了这么一个功能。那大家可以去看，我们可以通过右边的这个窗格去选择我们的照片，我们会显示对应的这个直方图，有我们这个对应的显示，我们也会有对应的这么一个曝光的评估的这么一个内容在这上面去显示。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/76.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/77.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/78.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/79.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/80.jpg"></p>
<p>那么我们在拍摄完照片之后，我们就可以直接去使用到我们后面的这些面板来进行我们的这个进一步的这么一个调整了。</p>
<p>那么这样的话，就是我们整个对Capture one联机拍摄的这么一个面板的简单的介绍。那我们学会这个部分，我们使用capture one去进行我们的联机拍摄就没有任何问题了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/81.jpg"></p>
<p>那很多同学可能会说我不棚拍，我可能也不做商业拍摄，那联机拍摄对我来说作用好像不是很大。确实是，那我们还有另外一种，大家可能会更常用到的方式，就是我们用手机进行wifi连接的，或者说蓝牙连接的远程操控。</p>
<p>那这个时候，我们各个手机厂商都有不同的app，可以装在我们手机或者ipad上，那我在这个屏幕的左方跟大家列出了这个佳能、尼康和索尼这三家厂商的APP大家都可以在，不论是苹果还是安卓系统当中的这个应用商店，直接去查找，然后下载安装。</p>
<p>那这三款APP的作用，我个人觉得是非常大的。那首先，它是可以起到这么一个快门线的无线快门线的这么一个作用，我们可以在远程用手机去遥控相机进行一些拍摄以及参数的这么一个调节。那第二个就是非常简单，我们在自拍的时候，比如说我们在旅行当中，或者说跟家人拍全家福的时候，我们可以用它进行一个远程控制，同时还能监看到画面非常方便的这么一个选择。那除此之外呢，它还可以进行一个快速的传输。比如说旅行在这个转场的途中，我们可以直接用相机连接到我们手机，把照片去导入到我们手机，快速的修图发一个朋友圈。那这是我觉得大家可能会更加常用到的这么一个方式，就是利用我们的这个APP进行远程的操控以及文件的这么一个传输，我也非常推荐大家，如果相机是有wifi或者蓝牙功能的，去下载这个APP去试一下，你会发现一片新的天地，在日后的拍摄当中也会提供非常多的便利。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/82.jpg"></p>
<p>那么以上就是本节课的全部内容了，最后跟大家去做一个知识点总结，本节课主要跟大家去讲了两大点，第一点跟大家说了我们的这个器材的一些名词做上节课的一个补充，然后跟大家去讲到了我们的这个像素，讲到了我们的宽容度和动态范围，以及跟大家重新说了一遍我们器材的选购指南。</p>
<p>那么，在第二部分当中跟大家去说了我们拍照了一些名词，比如说我们拍摄的常用格式，RAW格式和JPG格式以及跟大家说的这个联机拍摄以及远程操控。</p>
<p>第三节课</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/83.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/84.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/85.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/86.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/87.jpg"><br>那至于说我们通用的一个设置思路。大部分来说，如果你有双卡槽的话，我建议大家进行双卡的一个记录，因为如果我们进行单卡记录的话，很容易会出现，比如说我们卡出现了损坏或者说操作被删除的一个情况，在这个情况下，如果我们进行一个双卡的记录，然后第二个备份来保证我们的数据安全。那第二个就是我们要设置RAW格式记录来获得我们最大的后期的细节。那这个记录方式我在上节课，跟大家去讲，RAW和JPG的时候，已经说的非常清楚了，这里面我就不再过多的叙述。那第三个建议大家关闭掉机内的这个长时间曝光降噪。那这个功能，其实是只针对JPG的照片生效的，但是如果你开启了他，那会耽误你的拍摄时间，为什么这么说，如果你拍摄的一个30秒的长曝光的夜景照片，那你的机内就会为你继续30秒的这个黑屏的状态下进行一个曝光降噪。那这30秒之内你是没有办法进行任何拍摄的，所以说你会耽误掉很多的时间，在这个拍摄当中，并且你会使用你的RAW照片来进行后期。那你对于JPG的这个曝光降噪也没有任何的作用，所以说，我建议大家把这个选项关闭掉，那至于第4个就是最重要的，也就是我们进行一些自定义，个人习惯的这个设置，这个我会在后面具体来跟大家讲设置的时候展开来说，自定义设置在每一个相机上都非常的重要。</p>
<p>像佳能相机，我会自定一些按键，自定一些自己习惯的。比如说，后键对焦，比如说我会把一些菜单着重的摘出来到我的自定义菜单里面，会自定义一些C1、C2的拍摄模式，那对于索尼相机来说也更是一样，因为索尼的菜单会比较复杂，你去进行你的自定义的菜单，把你重要菜单去定义出来，以及把你的像机身上的一些相机系列会有一个C1、C2、C3的自定义按键，你把你的按键的功能去定义好，会大大提升你的拍摄效率。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/88.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/89.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/90.jpg"></p>
<p>那知道我们这个设置思路之后，我们接着来说，第二部分相机基础操作的这么一个讲解。那首先，先跟大家去讲，就是我们相机正确的这个握持的这么一个姿势，那很多人新手的朋友，拿相机拿起单反或拿起微单的时候，都会保持这样的一个拍摄姿势。</p>
<p>那这样的一个拍摄姿势会降低我们相机的这个握持的稳定性。那我们正确的握持姿势，应该是把手托在我们的这个镜头的下方，然后我们右手去握住手柄，然后如果用我们的这个取景器来说，我们会把它贴在眼睛上。这样的是一个比较正确，比较稳定的一个握持姿势，竖的话，我们可以直接把相机转过来，然后进行这样的一个竖拍。<br><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/91.jpg"><br>03 告别说明书，基础相机操作指南 P3 - 04:08<br>佳能的5D4</p>
<p>那么接下来我就会用手里的这台5D4的相机，然后来跟大家去具体讲解下机身上的每一个摁钮都是什么作用，那么，现在就拿了一台佳能的5D4来跟大家去做一个演示，大家可以看到，现在前面是我们的这个镜头，后面是我们的这个相机的机身。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/92.jpg"></p>
<p>那跟大家先去演示一下我们如何把这个镜头去装在我们的机身上，大家可以看到，现在在我们机身上面，在最左侧会有这么一个按钮，那这个是我们的锁紧的摁扭。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/93.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/94.jpg"></p>
<p>然后在我们的这个上面会有一个红色的这个点，有的机器应该是一个白色的点，那这个是我们镜头的这个对准装置，大家可以看到我们镜头上面会有我们的这一个红色的这么一个圆点。那我们这个红色圆点去对相机上面这个红色圆点就是一个正确的安装的这么一个方式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/95.jpg"></p>
<p>那我们现在把机身盖和镜头盖都已经去摘掉了，然后我们直接红点去对红点，然后把它对上好，然后我们去往这边去旋转，我们听到咔的一声。这样的话，镜头就对在相机上安全地锁死了，我们以用手拧一下，是拧不动的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/96.jpg"><br>那如果卸掉的话，我们就去按这个锁紧的这个松掉安钮，然后我们去往回转就可以把镜头卸下了。那这样的话，就是我们的这个相机镜头的这么一个安装，然后大家可以看到整体上，相机现在可以分为三个部分，刚刚<br>跟大家讲完了我们的机身和镜头这个连接。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/97.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/98.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/99.jpg"></p>
<p>那后面还有我们的这个相机的这么一个肩带挂在这个相机上面，那我这边是装了一个相机肩带的这么一个快拆的装置，那会在第四节课跟大家去讲，附件的时候，讲到这么一个小东西，可以很快速的，我把它向下，去推一下，我们就可以把肩带卸下来，那这里面为了跟大家去演示方便，我直接就把肩带卸下来，来给大家去演示。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/100.jpg"></p>
<p>那我们下面就着重来讲一下，我们机身上几个面来跟大家去讲，我们先讲一下正面，大家能够看到的这一面。那这边是我们的这个快门的这么一个接口，我们可以选择半按或者按实，半按一般说是我们对焦，然后按实就是我们去把快门触发去拍一张照片。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/101.jpg"></p>
<p>然后我们在相机的这个部位，大家能看到这个部位，会有我们Z这个按钮在佳能这台相机上，是代表景深预览的这么一个摁钮，在我们拍摄一些微距的画面或者大光圈的这种定焦头，设定成一个小光圈拍摄的时候，我们会需要用到这么一个景深预览的这么一个功能。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/102.jpg"></p>
<p>然后大家可以看到相机的这个左边的摁钮，刚刚说过了，这个锁紧我们镜头的锁紧摁扭。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/103.jpg"><br>然后底下是5D4的一个设计，我们的这个快门线的这么一个接口，那快门线也会在下节课，跟大家去介绍到。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/104.jpg"></p>
<p>然后这边就是我们5D4的这个logo了，那这是我们相机正面的这么一个介绍。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/105.jpg"></p>
<p>我们可以看一下底面，底面就是我们去连接快装板的这么一个螺丝。那关于块装板以及三角架，也会在下节课来跟大家去详细的说明 。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/106.jpg"></p>
<p>然后再下面是我们的这个电池仓，那我们直接去抠一下，我们就可以把我们的这个电池仓打开，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/107.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/108.jpg"></p>
<p>然后我们去推一下这个白色按钮，我们电池就可以弹出我们这样就可以把电池卸下来，然后安装也很方便，直接把这个电池顶进去，我们去关电池仓这个盖就可以了 。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/109.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/110.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/111.jpg"></p>
<p>然后我们来看一下这一侧的这个相机，那我们这边是这样的一个卡槽，我们可以把这个卡槽向外推一下，直接把它打开，然后我们看到里面有两个卡槽。一个是大卡，是我们的cf卡，那我们可以直接把cf卡往里面去对准，然后摁下去就可以把cf卡装进去了，然后那个小卡的卡槽是我们的sd卡，然后我们可以把sd卡直接去插入，方法是一样的对准对正插入就可以了。那至于cf卡和sd卡我们会在第四节课，也是继续跟大家详细来说。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/112.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/113.jpg"><br>那么，如果想把卡退出来的话，我们sd卡很简单，直接再摁一下，我们就可以把卡弹出，然后我们可以去导入电脑了。而我们的这个cf卡，我们需要摁一下底下的这个灰色的按钮，我们才能把它弹出，然后我们把它放入电脑进行和读卡器的这么一个连接，然后导入到电脑就可以了。那这里面也跟大家说一下，我们日常去把相机的数据去导在我们电脑里，就是用我们这个卡，然后拔出，去连接我们读卡器这样进行操作。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/114.jpg"></p>
<p>当然我们也可以去使用我们机身这一侧的数据连接接口，不过个人不是很推荐大家这样去传输数据。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/115.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/116.jpg"></p>
<p>那我们来看一下，这边机身的接口都有什么，然后把这些接口都打开。那大家可以看到现在这边，我手指的这两个大的这个接口。那上面这个是我们的这minihdmi是去输出我们的这个视频信号到监视器上的这么一个接口。然后再底下，这个就是我刚刚跟大家去提到的，我们的数据传输接口，那我们可以把它连接到相机，进行我们上节课所说的这个联机拍摄，也可以进行数据的这么一个传输，我们可以把它用这个usb3.0的线去连接到电脑进行数据传输，或者说和我们上节课所讲过的一样，进行我们的这个联机拍摄。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/117.jpg"></p>
<p>然后我们这边最上面这个接口是我们这个pc同步端口，那是我们和闪光灯进行一个连接的这么一个端口。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/118.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/119.jpg"></p>
<p>然后再下面，是我们和麦克风的这么一个接口，一个是耳机的监听，一个是麦克风的这个输入。这边就是我们这个机身的全部接口。</p>
<p>那么我们现在整个机身上面还有两个面，没有跟大家去讲，我们来讲一下最后的背面以及上面。那我们从上面先来看。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/120.jpg"></p>
<p>上面这边是我们的这个开关，大家可以看到，可以进行一个拨动来去调整我们的开关机状态。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/121.jpg"><br>然后这个上方，我们电源上方是我们这个拍摄模式的拨盘。那后面会在第二章跟大家去详细去讲我们这些拍摄模式。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/122.jpg"><br>我们可以按住这个解锁按钮，然后来进行旋转拨盘去调整我们的拍摄模式。那有些机器可能没有这个解锁摁钮，我们直接去旋转拨盘就可以去调节我们的这个拍摄模式了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/123.jpg"></p>
<p>然后再上面是我们这个热靴，那我们这个可以去插一些附件，包括说我们和机顶闪光灯的这个连接也是插在这个地方的。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/124.jpg"></p>
<p>那么再往下，大家可以看到这个地方有一个小的波轮。那这个波轮是我们的这个屈光度的这个调节波轮，那有的同学可能会用这个取景器看我们的这些照片不管怎么拍，感觉对上焦或没对上焦都是虚的。那这个时候可能会需要去根据自己的这个情况去调下我们屈光度，有点像近视眼的这种原理。那我们去把它调节到一个自己合适的值，就像带到一副合适的近视眼镜一样，能够帮助我们去用取景器看到一个最清晰的画面。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/125.jpg"></p>
<p>然后再过来，这边就是我们一块肩屏，肩屏上会显示我们的这个各种各样的拍摄参数，比如说光圈、快门、ISO，我们是否进行连拍，我们对焦模式，电池信息、测光模式等等，全都会在这个肩屏上面呈现。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/126.jpg"><br>那这个肩屏的上方会有我们这些参数条件旋钮，比如说这个第一个我们可以按一下它，然后进行白平衡以及测光模式的调节。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/127.jpg"><br>我们可以利用前面这个波轮进行一个参数调解，比如说，我们的前波轮是进行我们测光模式调解，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/128.jpg"><br>而我们用这个后波轮就可以进行我们的这个白平衡的调节。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/129.jpg"><br>那后面也一样，我们的驱动模式、我们的对焦、</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/130.jpg"><br>我们的这个曝光补偿以及我们的ISO。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/131.jpg"><br>最后这个是我们的这个屏幕灯，在晚上暗的地方，可以把它点亮。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/132.jpg"><br>那在手动模式下，我们去旋转这个波轮在这个佳能相机上默认调的是我们的快门，而有些相机可能会调的是光圈，但是，反正大家记住，前后两个波盘，一般相机都会有前后两个波盘。那他们在手动式下默认都会一个是光圈，一个是快门。那像佳能，我这个前面是快门，那后面就一定是光圈。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/133.jpg"><br>那么再前面会有一个M–Fn，那这个默认去调整的是我们相机的这个对焦模式，那我们可以去点它来进行我们对焦模式。</p>
<p>那么这样的话，就跟大家去讲完了我们机顶的所有按钮。</p>
<p>那我们再来看一看最复杂的这个背面的这些摁钮，那么，背面从左往右跟大家去说。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/134.jpg"><br>那最左面这个menu是我们的菜单摁钮，我们摁它可以进入到我们相机菜单。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/135.jpg"><br>然后我们第二个INFO可以去控制我们屏幕显示的信息，比如说大家可以看这里，我可以去多摁几次INFO来切换我们屏幕上显示的信息，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/136.jpg"><br>我们顺着最左边这排继续向下看，那我通常使用的应该是最后两个按钮。那大家可以看到这个图标能够明显的体会到最后这个就是我们去查看我们的这个回放，看我们之前拍过的那些照片。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/137.jpg"><br>然后最底下这个是不满意的照片可以进行查询删除。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/138.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/139.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/140.jpg"><br>那么下面我们来看这个最左边这一排按键，我们最常用的应该就是最后两个按钮。那倒数第二个就是我们的播放键，我们摁他就可以快速回到我们的这个照片的回看，我们用这个刚刚讲过的INFO切换我们的这个控制信息</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/141.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/142.jpg"><br>然后再下面，这个就是我们的删除键，我们可以检查一下，然后去选择删除我们的这个照片。我们这里它触屏的，所以说我可以去点击取消。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/143.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/144.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/145.jpg"></p>
<p>然后我们讲回中间的这个。那我摁它可以进行我们照片的放大，然后我们看到这边有这个提示前面的这个转盘，我们可以通过前面这个转盘去控制我们的这个缩放的大小。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/146.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/147.jpg"><br>然后再上面这个是我们这个评分&#x2F;评星，就是说大家对于照片可以有一个等级。那一到五星，我们可以按它一到五次来进行我们这个星级的切换。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/148.jpg"><br>那么再上面这个按钮我们用处并不多，我们平时也不太会去动它。（创意图像&#x2F;对比回放，两张图像显示按钮）</p>
<p>然后我们往右看一点，我们看到这个地方，这个地方就是我们的取景器，我们可以通过它来进行取景，然后把眼睛去贴在这个上面就可以进行我们的这个取景了。</p>
<p>那对于单反来说，它是一个OVF光学的取景器。那对于微单来说，它是一个EVF，是一个电子取景器，那大家可以理解就是，我们如果是一台单反的话，大家取景器里看的画面就是我们肉眼看到的画面，</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/149.jpg"></p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/150.jpg"><br>而如果是一台微单的话，那我们从取景器里看到的画面就是我们通过相机这块屏幕，现在这个状态下能够看到的我们这个画面。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/151.jpg"><br>那对于这个取景器来说，我们对微单和单反应该都是可以拆卸的。那有的戴眼镜的同学可能会不太愿意去戴着这取景器。那我们可以捏住这两边，然后我们把它向上提，就可以把我们这个取景器卸下来。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/152.jpg"><br>那这样大家应该非常清楚地看到我们这个屈光度调节的这个转盘了，那如果把它装回去的话，就是摁住，把它插回去，听到一声咔哒，我们就可以把它装好了。</p>
<p><img src="/2023/11/05/%E6%91%84%E5%BD%B1%E5%89%8D%E6%9C%9F%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/153.jpg"></p>
<p>然后我们继续往右来看，我们看到刚刚我问过这个摁钮，这个摁钮，对于这台相机来说就是我们可以去切换我们的这个相机参数屏，我们用光学取景器以及切换成我们的微单模式，就是把我们的反光板抬起，大家还记不记得第一节课跟大家去讲的，我们这个单反的这个结构有那个反光板。那么按住这实时取景摁钮，我们就可以把这个反光板抬起进行这样的一个用屏幕的拍摄。那底下就是我们这块屏幕，我们就不多说，我们所有的参数信息显示，我们的这个菜单，以及我们这个实时取景都会在这里去显示到。</p>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习：ResNet网络，BN及迁移学习</title>
    <url>/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>ResNet（Residual Network）是一种深度卷积神经网络架构，用于图像识别和计算机视觉任务。它是由微软研究员提出的，并在2015年的一篇论文中首次提出。ResNet的主要特点是引入了残差连接（residual connections），允许神经网络在训练过程中更轻松地学习到深层特征表示。<span id="more"></span></p>
<h1 id="⛅ResNet"><a href="#⛅ResNet" class="headerlink" title="⛅ResNet"></a>⛅ResNet</h1><p><img src="/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/ResNet%E6%80%A7%E8%83%BD.png" alt="ResNet性能"><br><img src="/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/ResNet%E7%BB%93%E6%9E%84.png" alt="ResNet网络结构"></p>
<ul>
<li>一般情况下卷积神经网络的层数并不是越深越好，因为存在<strong>梯度消失或梯度爆炸</strong>问题，如上图在使用ResNet网络之后，随着网络深度加深，模型效果能够得到进一步提升。</li>
<li>网络的亮点：</li>
</ul>
<ol>
<li>超深的网络结构（1000+）</li>
<li>提出residual结构</li>
<li>使用Batch Normalization加速训练（不再需要dropout）</li>
</ol>
<h2 id="残差（residual）结构"><a href="#残差（residual）结构" class="headerlink" title="残差（residual）结构"></a>残差（residual）结构</h2><p><img src="/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/residual%E7%BB%93%E6%9E%84.png" alt="残差结构"></p>
<ul>
<li><p>如图，残差结构就是将主线和捷径相加进行输出，相当于输出和原本的输入进行相加。</p>
</li>
<li><p>左边这种残差结构应用于网络深度小的网络，右边这种残差结构能节省更多的参数，用于更深的网络。</p>
<blockquote>
<p>参数数目&#x3D;输入通道数×卷积核个数×长×宽</p>
</blockquote>
</li>
<li><p>观察ResNet网络图，其中捷径为虚线的残差结构，指的是如下图的结构，在捷径上新增一层卷积<br><img src="/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/%E8%99%9A%E7%BA%BF%E6%AE%8B%E5%B7%AE%E7%BB%93%E6%9E%84.png" alt="虚线代表的残差结构"></p>
</li>
</ul>
<h1 id="⛅Batch-Normalization"><a href="#⛅Batch-Normalization" class="headerlink" title="⛅Batch Normalization"></a>⛅Batch Normalization</h1><p>我们在图像预处理过程中通常会对图像进行标准化处理，这样能够加速网络的收敛，假设一个两层的卷积结构，对于第一层Conv来说输入的就是满足某一分布的特征矩阵，但对于第二次Conv而言输入的feature map就不一定满足某一分布规律了(注意这里所说满足某一分布规律并不是指某一feature map的数据要满足分布规律，理论上是指整个训练样本集所对应feature map的数据要满足分布规律)。而我们BatchNormalization的目的就是使我们的feature map满足均值为0，方差为1的分布规律<br><img src="/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/BN%E7%9A%84%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.png" alt="BN的计算公式"><br><strong>对于一个d维的输入x，我们将其每一个维度都进行标准化处理</strong>，如对于RGB图像，我们需要分别对三个通道都进行处理。运算公式如上图<br><img src="/2023/09/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%9AResNet%E7%BD%91%E7%BB%9C%EF%BC%8CBN%E5%8F%8A%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/%E6%A0%87%E5%87%86%E5%8C%96%E5%A4%84%E7%90%86.png" alt="标准化处理"></p>
<ul>
<li><p>上图是一个例子，两个通道，两个feature（特征矩阵），分别计算整个channel1和channel2的均值和方差，得到的值带入公式运算得到标准化后的结果。</p>
</li>
<li><p>使用BN时的注意事项：</p>
</li>
</ul>
<ol>
<li>训练时training设置为True，验证时设置为False（pytorch中通过创建模型model.train()和model.eval()进行更改）；</li>
<li>batch size尽可能大，因为一批次训练的越多，均值方差越接近于整个数据集；</li>
<li>bn层放在卷积层和激活函数层之间，卷积层不设置偏置bias，因为会被消掉。</li>
</ol>
<h1 id="⛅迁移学习"><a href="#⛅迁移学习" class="headerlink" title="⛅迁移学习"></a>⛅迁移学习</h1><p>使用他人预训练过的模型参数来训练，本质上可以认为是将一些浅层通用的特征直接拿来训练出自己需要的高层的特征识别能力，优势如下：</p>
<ol>
<li>可以快速训练出理想结果</li>
<li>当数据集小时也能有理想结果</li>
</ol>
<p><strong>注意当使用他人的模型训练，也要注意采取和他人相同的数据预处理</strong></p>
<p>常见方式：</p>
<ol>
<li>载入权重后训练所有参数</li>
<li>载入权重后只训练最后几层参数</li>
<li>载入权重后在原网络基础上再添加一层全连接层，仅训练该全连接层</li>
</ol>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>BN</tag>
        <tag>ResNet</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLO系列理论</title>
    <url>/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<p><em>YOLO</em>即<em>You Only Look Once</em>，是一种流行的目标检测算法，用于在图像中实时检测和定位多个对象。YOLO的主要特点是其速度和准确性，它可以在一张图像中同时检测多个不同类别的对象，而不需要多次运行模型，即看一眼就能看出所有目标。<span id="more"></span><br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLO.png" alt="YOLO"></p>
<h1 id="🔥YOLOv1"><a href="#🔥YOLOv1" class="headerlink" title="🔥YOLOv1"></a>🔥YOLOv1</h1><p>论文： You Only Look Once: Unified, Real-Time Object Detection<br>网址： <a href="http://pjreddie.com/yolo/">http://pjreddie.com/yolo/</a></p>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ol>
<li>将一幅图分割成S×S个网格（grid cell），若某个标注框（目标）的中心在这个网格中，这个网格就负责预测该<em>object</em></li>
<li>每个网格预测B个<em>bounding box</em>，即预测框，每个预测框除了预测位置（x，y，w，h），还要附带一个<em>confidence</em>（置信度，类似IoU，预测与实际框的交并比×预测概率），每个网格还要预测C个类别的分数（是该类目标的概率，各种独立，和不为1）。（x，y）是目标框的中心位置，是相对于负责预测的网格的，不会超过该网格<blockquote>
<p>举个例子：对于<em>PASCAL VOC</em>数据集（20类，即C&#x3D;20），取S&#x3D;7，B&#x3D;2，那么需要预测的参数个数就是7×7×30，即7×7个网格，每个网格测20个类、2个框（每个框是x，y，w，h，confidence五个值），20+2×5&#x3D;30</p>
</blockquote>
</li>
</ol>
<p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv1%E9%A2%84%E6%B5%8B%E5%8F%82%E6%95%B0.png" alt="YOLOv1预测参数"></p>
<h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv1%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="YOLOv1网络结构"></p>
<ul>
<li>网络结构如上，通过多个卷积层和最大池化层之后，通过展平（flatten）及全连接层（fc）得到4096大小的向量，再通过全连接变成7×7×30的参数</li>
<li>损失函数：Loss &#x3D; bounding box损失 + confidence损失 + classes损失</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>YOLOv1检测聚集的小目标时效果不好</li>
<li>当目标出现新的尺寸时检测效果差</li>
<li>主要的错误都来自于定位不准确</li>
</ol>
<h1 id="🔥YOLOv2"><a href="#🔥YOLOv2" class="headerlink" title="🔥YOLOv2"></a>🔥YOLOv2</h1><p>论文： YOLO9000: Better, Faster, Stronger<br>网址： <a href="http://pjreddie.com/yolo9000/">http://pjreddie.com/yolo9000/</a></p>
<ul>
<li>性能更好，可以检测超过9000个目标，mAP最大能到78.6（544×544输入，40FPS），比YOLOv1的63.4高出不少<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv2%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="YOLOv2网络结构"></li>
</ul>
<h2 id="Better"><a href="#Better" class="headerlink" title="Better"></a>Better</h2><ol>
<li><p>Batch Normalization：添加BN层（标准化）助于收敛，减少正则化处理，可以不用dropout来防止过拟合，上图网络结构当中，每个convolutional层都由卷积层、BN层、LeakyReLU函数组成</p>
</li>
<li><p>High Resolution Classifier：更高分辨率的分类器，之前是224×224，现在采用448×448</p>
</li>
<li><p>Convolutional With Anchor Boxes：v1定位效果不好，采用基于anchor的预测可以简化边界框预测问题，使网络更快学习收敛，提升了召回率（不漏测的概率）</p>
</li>
<li><p>Dimension Clusters：使用kmeans聚类获取anchor，减少人为操作对经验的要求</p>
<blockquote>
<p>Anchor boxes（锚框）是一组预定义的框，每个框具有固定的尺寸和长宽比。YOLO算法使用这些锚框来预测图像中的目标位置。在每个网格单元（Grid cell）上，YOLO会为每个锚框生成预测，以确定哪个锚框最适合包围图像中的目标。对于每个标注（GT,ground truth）可能会有多个不同尺寸的anchor来计算<br>这些anchor boxes允许模型在不同尺寸和长宽比的目标上进行预测，从而提高了模型的泛化能力。通过使用多个锚框，YOLO可以同时检测各种不同大小和形状的目标，而无需多个不同尺度的检测器。</p>
</blockquote>
</li>
<li><p>Direct Location Prediction：将预测位置通过sigmoid函数映射到0-1，保证每个anchor只负责预测目标中心有落在区域（grid cell）内的目标。提升稳定性，使得定位不会乱跑。</p>
</li>
<li><p>Fine-Grained Features：观察v2的网络结构，其中有一路分支将高低层的信息通过 <em>PassThrough Layer</em>进行融合，低层的信息往往具有更多细节（未池化），利于识别小目标<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/PassThrough%E5%B1%82%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B.png" alt="PassThrough层操作过程"><br>如上，通过将高分辨率的图像拆分成多个更小的矩阵，获得更高通道数的低分辨率（高层）的信息形式，这种采样即<strong>Focus</strong>操作</p>
</li>
<li><p>Multi-Scale Training：将图片缩放到不同尺度进行训练，提升鲁棒性。每迭代10个batch就随机地缩放图片，缩放因子是32，即尺寸是32整数倍，最小320×320，最大608×608</p>
</li>
</ol>
<h2 id="Faster"><a href="#Faster" class="headerlink" title="Faster"></a>Faster</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv2%E4%B8%BB%E5%B9%B2%E7%BD%91%E7%BB%9C.png" alt="YOLOv2主干网络"><br>使用Darknet-19（19个卷积层）网络，ImageNet数据集，训练达到72.9%的top-1准确度，91.2%的top-5准确度</p>
<blockquote>
<p>之前提到，预测目标时会对每个类都计算概率，Top-1指的是概率最大的类别就是该目标所属的类别（即正确的类别），Top-5指的是概率前5中有正确的类别</p>
</blockquote>
<h1 id="🔥YOLOv3"><a href="#🔥YOLOv3" class="headerlink" title="🔥YOLOv3"></a>🔥YOLOv3</h1><p>论文： YOLOv3: An Incremental Improvement<br>使用Darknet-53网络，速度比ResNet-152快两倍多，但是top-1准确率相当。</p>
<blockquote>
<p>Darknet和Resnet区别，虽然都有残差层，但是前者下采样（降低分辨率）不依靠池化层，而是使用卷积层</p>
</blockquote>
<p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv3%E9%A2%84%E6%B5%8B%E8%BE%B9%E7%95%8C%E6%A1%86.png" alt="YOLOv3预测边界框"></p>
<ul>
<li>和v2的一样，通过Sigmoid函数将bx和by限制在负责该目标检测的网格内，保证预测的目标中心不超过网格。图中虚线框是anchor，蓝色代表预测框</li>
</ul>
<p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv3%E6%AD%A3%E6%A0%B7%E6%9C%AC.png" alt="YOLOv3正样本"></p>
<ul>
<li>正样本扩充：如上图，将多个尺寸不同的anchor（AT）和GT进行IoU计算预测，若大于阈值，则确认是正样本，即此时GT中心落在的这个网格所对应的AT为正样本，如果有多个AT都符合则存在多个正样本。没匹配到目标的就是负样本</li>
<li>损失计算：Loss &#x3D; a×置信度损失 + b×分类损失 + c×定位损失，a、b、c是平衡系数</li>
</ul>
<h2 id="YOLOv3-SPP"><a href="#YOLOv3-SPP" class="headerlink" title="YOLOv3 SPP"></a>YOLOv3 SPP</h2><ul>
<li><p>YOLOv3 SPP 是 YOLOv3 模型的一个变种，其中的 “SPP” 意为 “Spatial Pyramid Pooling”（空间金字塔池化），它是一种池化层的结构。这个结构的主要目的是改进 YOLOv3 的感受野，使其能够检测不同尺寸的目标。</p>
</li>
<li><p>Mosaic图像增强：将多张图拼接起来，增加了数据多样性、目标个数，BN也可以一次性统计多个图像的参数</p>
</li>
</ul>
<p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/SPP%E6%A8%A1%E5%9D%97.png" alt="SPP模块"></p>
<ul>
<li><p>SPP模块如上，通过不同的池化层实现了不同尺度信息的融合</p>
</li>
<li><p>IoU Loss：基于IoU计算的损失，当两框完全不相交时无法计算<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/GIoU%E6%8D%9F%E5%A4%B1.png" alt="GIoU损失"></p>
</li>
<li><p>GIoU Loss（Generalized）：如上，A是指蓝框部分面积（能框住两框的最小矩形），u是指两框并集，这样GIoU可以计算两框完全不相交的时候的损失。但是GIoU和IoU都存在收敛慢的问题。<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/DIoU%E6%8D%9F%E5%A4%B1.png" alt="DIoU损失"></p>
</li>
<li><p>DIoU Loss（Distance）：通过对两框的欧氏距离的引入可以直接最小化两个boxes的间距，收敛快。<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/CIoU%E6%8D%9F%E5%A4%B1.png" alt="CIoU损失"></p>
</li>
<li><p>CIoU Loss（Complete）：将重叠面积、中心点距离、长宽比结合的优秀的回归定位损失。</p>
</li>
</ul>
<h1 id="🔥YOLOv4"><a href="#🔥YOLOv4" class="headerlink" title="🔥YOLOv4"></a>🔥YOLOv4</h1><p>论文： YOLOv4: Optimal Speed and Accuracy of Object Detection<br>网址： <a href="http://arxiv.org/abs/2004.10934">http://arxiv.org/abs/2004.10934</a></p>
<h2 id="网络结构-1"><a href="#网络结构-1" class="headerlink" title="网络结构"></a>网络结构</h2><p>采用了SPP结构，和v3的类似不再赘述<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv4%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84CSP%E7%BB%93%E6%9E%84.png" alt="CSP结构"><br>CSP结构能提升网络加快网络的推理速度、减少对显存的使用、提升学习能力，这种跳跃连接的分支结构和ResNet残差结构有异曲同工之处<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv4%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84PAN%E7%BB%93%E6%9E%84.png" alt="PAN结构"><br>在图中a部分的特征金字塔FPN（从高层向底层融合）的基础上增加了b部分的从低层向高层融合的部分<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv4%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="YOLOv4网络结构"><br>v4的整体结构如上，对于不同尺度都有对应的输出，即PAN</p>
<blockquote>
<p>一个卷积层中k代表卷积核大小，s代表卷积核移动的步长，p代表外补丁padding，c代表通道数（深度）</p>
</blockquote>
<h2 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv4%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5.png" alt="消除grid敏感度（Eliminate grid sensitivity）"></p>
<ul>
<li>以往，当GT（标注）的中心在网格的左上角时，我们希望bx中sigmoid函数（σ）的值为0，但是sigmoid函数只有当x接近负无穷时才能到达0。如上图，v4采用优化策略Eliminate grid sensitivity，将sigmoid的值乘以scale来扩大值域解决这个问题，通常scale取2，bx和by的范围也从(-1,1)扩充到(-0.5,1.5)。</li>
<li>同v3，v4也采用了图像拼接Mosaic来丰富数据集，不再赘述</li>
</ul>
<p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv4%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%89%A9%E5%85%85%E6%AD%A3%E6%A0%B7%E6%9C%AC.png" alt="YOLOv4进一步扩充正样本 "></p>
<ul>
<li>IoU threshold（match positive samples），v3中的正样本选取中，当一个网格有多个AT正样本时会同时分配，在v4中，由于之前提到的优化策略扩大了sigmoid的值域，使得bx和by的范围也从(-1,1)扩充到(-0.5,1.5)，负责预测的范围扩大了。所以如图，<strong>一个GT的中心可以处在三个网格的负责预测的范围之内</strong>。这就使得只有GT的中心在网格中心时，才会出现仅一个网格负责该GT的情况。</li>
</ul>
<h1 id="🔥YOLOv5"><a href="#🔥YOLOv5" class="headerlink" title="🔥YOLOv5"></a>🔥YOLOv5</h1><p>没有出论文<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv5%E4%BD%8E%E5%88%86%E8%BE%A8%E7%8E%87.png" alt="YOLOv5低分辨率"><br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv5%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87.png" alt="YOLOv5高分辨率"></p>
<ul>
<li>第一张图是针对低分辨率（640）的图像，第二张图带6的是针对高分辨率（1280）的图像。可以看到v5的速度是比较快的</li>
</ul>
<h2 id="网络结构-2"><a href="#网络结构-2" class="headerlink" title="网络结构"></a>网络结构</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv5%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="YOLOv5网络结构"></p>
<ul>
<li>同样采用了CSP、PAN结构<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/SPPF%E6%A8%A1%E5%9D%97.png" alt="SPPF模块"></li>
<li>v5中将SPP改成SPPF模块，将原本的并行输出改为串行后分别输出，两个k5最大池化和一个k9等效，3个k5和一个k13等效，上下完全等效，但是SPPF效率更高计算量下降（快了2倍以上）</li>
</ul>
<h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><ul>
<li>图像拼接Mosaic，同v3、v4<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/Copy_paste.png" alt="Copy paste"></li>
<li>Copy paste将图像中的目标分割出来，复制粘贴到其他图像中，需要有对目标分割的标签。</li>
<li>Random affine，随机变换，包括旋转、缩放、平移等基本操作</li>
<li>MixUp，将两个图片按不同透明度合成</li>
<li>Albumentations，滤波、直方图均衡化以及改变图片质量等图像处理操作</li>
<li>Augment HSV，调整饱和度、浓度等色彩属性</li>
<li>Random horizontal flip，水平翻转</li>
</ul>
<h2 id="训练策略"><a href="#训练策略" class="headerlink" title="训练策略"></a>训练策略</h2><ul>
<li>多尺度训练（0.5—1.5倍，且32倍数）</li>
<li>自动为尺度变化大的目标重新聚类生成新anchor</li>
<li>warmup，热身训练，学习率从很小的值逐渐增长到设定的值；余弦变化降低学习率（余弦退火）</li>
<li>EMA，为学习变量增加动量，使得参数变化平滑</li>
<li>Mixed precision，混合精度训练，减少对GPU显存占用，加快训练，需要GPU支持</li>
<li>Evolve hyper-parameters，超参数</li>
</ul>
<h2 id="损失计算"><a href="#损失计算" class="headerlink" title="损失计算"></a>损失计算</h2><p>分类损失：BCE Loss，只计算正样本的损失<br>obj损失：BCE Loss，obj是预测目标边界框和GT的CIoU，计算所有样本<br>定位损失：CIoU Loss，只计算正样本的损失</p>
<h2 id="优化策略-1"><a href="#优化策略-1" class="headerlink" title="优化策略"></a>优化策略</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv5%E9%99%90%E5%88%B6w%E5%92%8Ch.png" alt="YOLOv5限制w和h"></p>
<ul>
<li>v4当中，消除了grid的敏感度，但是w和h的值域不受限制，v5中更改了计算公式解决了这个问题<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOv5%E5%8C%B9%E9%85%8D%E6%AD%A3%E6%A0%B7%E6%9C%AC.png" alt="匹配正样本"></li>
<li>v5中使用多个尺度的anchor来匹配正样本，当GT在0.25倍到4倍anchor之间时匹配为正样本</li>
</ul>
<h1 id="🔥YOLOX"><a href="#🔥YOLOX" class="headerlink" title="🔥YOLOX"></a>🔥YOLOX</h1><p>论文：YOLOX: Exceeding YOLO Series in 2021<br>网址：<a href="https://arxiv.org/abs/2107.08430">https://arxiv.org/abs/2107.08430</a></p>
<p>对标YOLOv5，有一定性能提升。选择X和v5：分辨率高时使用v5（带6的权重模型），分辨率低两者皆可。</p>
<h2 id="网络结构-3"><a href="#网络结构-3" class="headerlink" title="网络结构"></a>网络结构</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOX%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="YOLOX网络结构"><br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/YOLOX%E8%A7%A3%E8%80%A6%E6%A3%80%E6%B5%8B%E5%A4%B4.png" alt="解耦检测头"></p>
<ul>
<li>与v5相比，使用不同的head（解耦检测头），这能加速收敛，提升AP。</li>
<li>解耦检测头：将输出分为类别检测（Cls）、预测目标回归（Reg）、预测obj（Obj&#x2F;IoU）三个分支，网络结构图中三个检测头参数不共享</li>
</ul>
<h2 id="Anchor-Free"><a href="#Anchor-Free" class="headerlink" title="Anchor-Free"></a>Anchor-Free</h2><p>YOLOX借鉴FCOS网络使用了Anchor-Free。<br>之前的这些YOLO系列网络都是Anchor-Base网络，基于Anchor的网络，存在一些问题：</p>
<ol>
<li>首先检测器性能与Anchor大小和高宽比相关性很大；</li>
<li>一般Anchor的大小和高宽比固定，很难处理形状变化大的目标（书本的横竖放置），迁移到其他任务还需要重新设计；</li>
<li>为了更高的召回率，需要生成上万个anchor boxes，这使得大部分boxes都会是负样本，正样本分布极度不均；</li>
<li>anchor也使得训练很繁琐，计算量大。</li>
</ol>
<p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/Anchor-Free.png" alt="Anchor-Free Regression"><br>head中可以看到，regression部分预测的4个参数，预测点与预测目标四侧的距离与预测点坐标进行运算，得到预测目标左上角和右下角的坐标。<br><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/Anchor-Free2.png" alt="Anchor-Free Centerness"><br>centerness预测的参数反映了预测点和预测目标中心的远近，centerness为0在边界，为1在中心。</p>
<h2 id="优化策略-2"><a href="#优化策略-2" class="headerlink" title="优化策略"></a>优化策略</h2><p><img src="/2023/09/06/Yolo%E7%B3%BB%E5%88%97%E7%90%86%E8%AE%BA/SimOTA.png" alt="SimOTA"></p>
<ul>
<li>正负样本匹配SimOTA，将匹配样本的过程视为以最低成本cost将GT分配给对应样本的问题</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>YOLO</tag>
        <tag>BN</tag>
      </tags>
  </entry>
  <entry>
    <title>四大优化算法——粒子群、蚁群、退火</title>
    <url>/2023/09/05/%E5%9B%9B%E5%A4%A7%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>四大算法指的是遗传算法GA、粒子群优化算法PSO、蚁群算法ACA、模拟退火算法SA，这里不记录遗传算法<span id="more"></span></p>
<h1 id="🔥粒子群优化算法"><a href="#🔥粒子群优化算法" class="headerlink" title="🔥粒子群优化算法"></a>🔥粒子群优化算法</h1><ul>
<li>粒子群优化(PsOparticle swarm optimization)算法是计算智能领域，除了蚁群算法，鱼群算法之外的一种群体智能的优化算法，该算法源自对鸟类捕食问题的研究</li>
<li>PSO算法首先在可行解空间中初始化一群粒子，每个粒子都代表极值优化问题的一个潜在最优解，<strong>用位置、速度和适应度值三项指标表示该粒子特征</strong></li>
<li>粒子在解空间中运动，通过跟踪个体极值Pbest和群体极值Gbest更新个体位置，个体极值Pbest是指个体所经历位置中计算得到的适应度值最优位置，群体极值Gbest是指种群中的所有粒子搜索到的适应度最优位置</li>
<li>粒子每更新一次位置，就计算一次适应度值，并且通过比较新粒子的适应度值和个体极值、群体极值的适应度值更新个体极值Pbest和群体极值Gbest位置</li>
<li>简单来说，粒子群算法PSO，通过个体极值Pbest和群体极值Gbest传递信息，最佳个体告诉其他个体自己的信息使得其他个体也会趋向于他移动。</li>
<li>与遗传算法不同点：</li>
</ul>
<ol>
<li>PSO算法没有选择、交叉、变异等操作算子</li>
<li>PSO有记忆的功能</li>
<li>信息共享机制不同，遗传算法是互相共享信息，整个种群的移动是比较均匀地向最优区域移动，而在PSO中，只有gBest或lBest给出信息给其他粒子，属于单向的信息流动，整个搜索更新过程是跟随当前最优解的过程。因此在一般情况下，<strong>PSO的收敛速度更快</strong></li>
</ol>
<p><img src="/2023/09/05/%E5%9B%9B%E5%A4%A7%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E8%BF%AD%E4%BB%A3%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png" alt="粒子群算法迭代更新公式"></p>
<ul>
<li>信息更新：如上图，每个个体的速度V和位置X按照上述公式进行不断迭代，其中两个P代表这个体极值和群体极值。<br><img src="/2023/09/05/%E5%9B%9B%E5%A4%A7%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="粒子群算法流程图"></li>
<li>PSO流程(初始化后)：速度更新(公式)-种群更新(原值加上速度)-适应度更新-个体最优更新-群体最优更新-将两个最优带回速度更新公式如此循环迭代</li>
<li>速度更新的权值变化，先大后小，利于先全局搜索再局部搜索，类似学习率下降的思路。</li>
</ul>
<h1 id="🔥蚁群算法"><a href="#🔥蚁群算法" class="headerlink" title="🔥蚁群算法"></a>🔥蚁群算法</h1><ul>
<li>一种用于最优路径规划、网络路由的算法，“走的人多了也便成了路”</li>
<li>蚂蚁在寻找食物源时，会在其经过的路径上释放一种信息素，并能够感知其它蚂蚁释放的信息素。信息素浓度的大小表征路径的远近，信息素浓度越高，表示对应的路径距离越短</li>
<li>通常，蚂蚁会以较大的概率优先选择信息素浓度较高的路径，并释放一定量的信息素，以增强该条路径上的信息素浓度，这样，会形成一个正反馈最终，蚂蚁能够找到一条从巢穴到食物源的最佳路径，即距离最短。</li>
<li>值得一提的是，生物学家同时发现，路径上的信息素浓度会随着时间的推进而逐渐衰减</li>
<li>三种模型：</li>
</ul>
<ol>
<li>ant cycle system，蚂蚁从i到j全路程释放的信息素总量不变，越长的路线，信息素浓度越低。</li>
<li>ant quantity system，蚂蚁从i到j（相邻两地）释放的信息素总量不变，也就是信息素浓度分段变化，同路段信息素浓度相同</li>
<li>ant density system，蚂蚁全程信息素释放浓度不变，越长信息素总量越大</li>
</ol>
<p><img src="/2023/09/05/%E5%9B%9B%E5%A4%A7%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="粒子群算法流程图"><br>流程：</p>
<ol>
<li>初始化：蚁群规模m，信息素重要程度因子α，启发函数重要程度因子β，信息素总量Q，最大迭代次数iter_max，迭代次数初值iter&#x3D;1</li>
<li>构建解空间：每个蚂蚁放到不同起点，对每个蚂蚁求得下一个待访问城市，直到所有蚂蚁访问完所有城市</li>
<li>更新信息素：计算每次迭代中的最优解（暂时的最短路径），更新每个路径段上信息素浓度</li>
<li>判断终止否</li>
</ol>
<p>特点：</p>
<ol>
<li>正反馈机制，不断收敛；</li>
<li>每个个体既可以改变环境也能感知环境，个体间以此间接地通信；</li>
<li>分布式计算，多个个体并行计算，效率高；</li>
<li>启发式概率搜索，和遗传算法的轮盘堵一样，不易陷入局部最优。</li>
</ol>
<ul>
<li>旅行商问题TSP：找到一个遍历所有城市的最短路径，是一种用于验证优化算法的标准</li>
</ul>
<h1 id="🔥模拟退火算法"><a href="#🔥模拟退火算法" class="headerlink" title="🔥模拟退火算法"></a>🔥模拟退火算法</h1><ul>
<li>模拟退火算法(Simulated Annealing,简称SA)最早是由Metropolis等提出的。其出发点是基于物理中固体物质的退火过程与一般的组合优化问题之间的相似性。模拟退火法是一种通用的优化算法，其物理退火过程由以下三部分组</li>
</ul>
<ol>
<li>加温过程。其目的是增强粒子的热运动，使其偏离平衡位置。温度足够高时，固体将熔为液体，从而消除系统原先存在的非均匀状态</li>
<li>等温过程。对于与周围环境交换热量而温度不变的封闭系统，系统状态的自发变化总是朝自由能减少的方向进行的，当自由能达到最小时，系统达到平衡状态</li>
<li>冷却过程。使粒子热运动减弱，系统能量下降，得到晶体结构。</li>
</ol>
<ul>
<li><p>加温过程对算法设定初温，等温过程对应算法的Metropolis抽样过程，冷却过程对应控制参数的下降。这里能量的变化就是目标函数，我们要得到的最优解就是能量最低态。其中Metropolis准则是SA算法收敛于全局最优解的关键所在，Metropolis准则以一定的概率接受恶化解，这样就使算法跳离局部最优的陷阱</p>
</li>
<li><p>简单来说，模拟退火算法，在加温过程中允许接受非更优解，防止局部最优，在冷却过程中逐渐不接受非更优解</p>
</li>
<li><p>流程：</p>
</li>
</ul>
<ol>
<li>初始化:取初始温度TO足够大，令T&#x3D;T，任取初始解S1。</li>
<li>对当前温度T，重复第(3)~(6)步。</li>
<li>对当前解S1随机扰动产生一个新解S2。</li>
<li>计算S2的增量df&#x3D; f(S2)-f(S1)，其中f(S1)为S1的代价函数（代价低者好）。</li>
<li>若df&lt;0，则接受S2作为新的当前解，即S1&#x3D;S2;否则计算S2的接受概率exp(-df&#x2F;T)， 即随机产生(0,1)区间上均匀分布的随机数rand，若exp(-df&#x2F;T)&gt;rand，也接受S2作为新的当前解S1&#x3D;S2，否则保留当前解S1。通过这个指数函数可以看出，温度高的时候接受概率更接近1，很容易接受非优解，反之亦然。</li>
<li>如果满足终止条件Stop，则输出当前解S1为最优解，结束程序，终止条件Stop通常取为在连续若千个Metropolis链中新解S2都没有被接受时终止算法或者是设定结束温度；否则按衰减函数衰减T后返回第(2)步。</li>
</ol>
<p><img src="/2023/09/05/%E5%9B%9B%E5%A4%A7%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95%E7%BB%8F%E5%85%B8%E8%BF%87%E7%A8%8B.png" alt="模拟退火算法经典过程"></p>
<ul>
<li>上面是模拟退火算法求最优解的过程，可以看到刚开始，波动变化大，说明易于接受更多的可能性，减少局部最优的出现可能性，后期则趋于稳定。</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>优化算法</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序云托管MySQL搭建</title>
    <url>/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><strong><a href="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/" title="微信小程序云托管数据传输（Python restful）">对应往期：微信小程序云托管数据传输</a></strong><br><strong><a href="/2023/03/19/Python-restful-API%E5%85%A5%E9%97%A8%E5%8F%8A%E8%B0%83%E8%AF%95/" title="Python restful API入门及本地调试">调试参考：Python restful API入门及本地调试</a></strong></p>
<blockquote>
<p>接着上次的云托管搭建，我们这次用MySQL替换原本的csv读取机制，因为用户是通过实例访问服务的，如果用户较多，需要多个实例才能保证服务的通畅，而实例的本质就是建立一个个独立的工程，也就是说csv文件也将通过这种方法被复制成独立的多份，数据就不同步了，所以还是需要MySQL搭建的数据库存储数据，才能使得数据被同步，服务的源码工程也能和数据相互独立，方便升级维护。<span id="more"></span></p>
</blockquote>
<h1 id="云托管MySQL搭建"><a href="#云托管MySQL搭建" class="headerlink" title="云托管MySQL搭建"></a>云托管MySQL搭建</h1><p><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E5%BE%AE%E4%BF%A1%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E7%95%8C%E9%9D%A2.png" alt="微信云托管MySQL界面"></p>
<ul>
<li>如上，点击微信云托管的MySQL界面，创建MySQL（我已经创建，过程很简单不展示）后会显示如图的界面，在<strong>账号管理</strong>部分会有一个root账号，可以自行添加账号，每个账号存储可以各自的数据表格。root账号不可编辑，其他账号可以编辑权限、名称、备注等信息。</li>
<li>下方的<strong>网络信息</strong>部分可以看到内外网地址，需要API通过这个地址进行数据访问，外网地址最初是关闭的，可以打开它，在本地调试过程中，我们可以通过这个地址访问，而微信小程序等线上服务访问通过内网地址即可。<br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%99%BB%E5%BD%95.png" alt="腾讯云数据库登录"></li>
<li>点击<strong>数据库管理</strong>，和云服务一样，数据库长时间没有运行访问需要一定时间启动，时间会比前者短。进入登录界面如上图，你的实例名称自动填写了，只需要输入你需要访问的MySQL账号及密码即可。<br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="数据库主界面"></li>
<li>进入后界面如上，点上面的新建建立新的库，我取名userinform，然后点击加号创建表格，<strong>基本信息</strong>没有硬性要求，至少填入名字即可，这里取名user。列信息即你的数据结构，需要设置变量名（列名）、对应的数据类型、备注信息等，如下。<br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E5%88%97%E4%BF%A1%E6%81%AF.png" alt="列信息"></li>
<li>如下图，接下来编辑表格数据，可以一条条新增数据并为每一列赋值。支持导出csv等格式、复制等操作。编辑完成最后提交。<br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E8%A1%A8%E6%A0%BC%E7%BC%96%E8%BE%91.png" alt="表格编辑"><br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C%E4%B8%BE%E4%BE%8B.png" alt="快捷操作举例"></li>
<li>右边提供了MySQL操作语言的快捷生成，能够通过简单的操作实现字段显示、筛选、排序等操作，并在下方生成对应的代码方便复制。如上图，我查询invitecode字段是CAO的数据，点击确定后自动为我筛出了对应数据。</li>
<li>至此我们搭建完成云端的数据库。</li>
</ul>
<h1 id="Python的restful工程"><a href="#Python的restful工程" class="headerlink" title="Python的restful工程"></a>Python的restful工程</h1><blockquote>
<p>linedetect:<br>——Dockerfile<br>——app:<br>————-main.py</p>
</blockquote>
<ul>
<li>如上，沿用上次的工程，可以删除csv文件，将main文件的代码进行更改，就是将原本的围绕csv的读写操作改成对于MySQL的一系列操作。这里我们需要按安装MySQL的库，线上的工程不会自带这种库的，更改dockerfile文件内容如下：</li>
</ul>
<pre class="line-numbers language-docker"><code class="language-docker"><span class="token keyword">FROM</span> tiangolo/uwsgi<span class="token punctuation">-</span>nginx<span class="token punctuation">-</span>flask<span class="token punctuation">:</span>python3.8
<span class="token keyword">RUN</span> pip install mysql<span class="token punctuation">-</span>connector<span class="token punctuation">-</span>python
<span class="token keyword">COPY</span> ./app /app
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>接下来是主要数据库操作的代码，操作函数的<strong>共有流程是访问数据库、获取需要的数据、数据处理操作、断开连接</strong>，我们可以将共有的访问数据库和断开连接做成装饰器，操作函数前添加装饰器即可，避免重复编写。装饰器如下，<code>host</code>和<code>port</code>在内、外网地址有，本地调试就用外网的，<code>user</code>需要填写数据库的账号名，<code>password</code>就是密码，<code>database</code>是要访问的库，这些信息即可访问到数据库了<code>if connection.is_connected()</code>分支即连接成功后的操作，即我们的获取对应数据、数据处理的函数。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response
<span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connector

<span class="token comment" spellcheck="true"># 创建数据库连接，装饰器</span>
<span class="token keyword">def</span> <span class="token function">database_connection</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
                host<span class="token operator">=</span><span class="token string">"11.11.111.111"</span><span class="token punctuation">,</span>
                port<span class="token operator">=</span><span class="token number">0000</span><span class="token punctuation">,</span>
                user<span class="token operator">=</span><span class="token string">"linedetect"</span><span class="token punctuation">,</span>
                password<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>
                database<span class="token operator">=</span><span class="token string">"userinform"</span>
            <span class="token punctuation">)</span>

            <span class="token keyword">if</span> connection<span class="token punctuation">.</span>is_connected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功连接到数据库"</span><span class="token punctuation">)</span>
                func<span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

        <span class="token keyword">except</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>Error <span class="token keyword">as</span> err<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"数据库连接错误：{err}"</span><span class="token punctuation">)</span>

        <span class="token keyword">finally</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">'connection'</span> <span class="token keyword">in</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> connection<span class="token punctuation">.</span>is_connected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库连接已关闭"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>接下来就举例之前的<strong>激活授权码</strong>操作，即将根据invitecode（授权码）查询对应数据并将其activation（激活状态）更新为1，首先调用装饰器，相当于完成了连接和断开数据库的部分，函数内只需要写查询或者更新字段，这里我们更改了字段，所以用UPDATE指令：<code>&quot;UPDATE user SET activation = %s WHERE invitecode = %s&quot;</code>，user是访问的表名（装饰器已经访问到具体的数据库了），activation是需要操作的变量，<code>WHERE</code>后面是操作的条件，即invitecode符合要求即可。</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">@database_connection
<span class="token keyword">def</span> <span class="token function">activateCode</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> invitecode<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 激活某个授权码</span>
    <span class="token comment" spellcheck="true"># 创建游标对象</span>
    cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 更新数据</span>
    update_query <span class="token operator">=</span> <span class="token string">"UPDATE user SET activation = %s WHERE invitecode = %s"</span>
    new_activation_value <span class="token operator">=</span> <span class="token number">1</span>
    target_invite_code <span class="token operator">=</span> invitecode
    <span class="token comment" spellcheck="true"># 执行指令</span>
    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>update_query<span class="token punctuation">,</span> <span class="token punctuation">(</span>new_activation_value<span class="token punctuation">,</span> target_invite_code<span class="token punctuation">)</span><span class="token punctuation">)</span>
    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"已成功激活 invitecode 为 {target_invite_code} 的行"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>接着是restful的函数，实现云服务，和之前的没有变化</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/activate'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 激活授权码</span>
<span class="token keyword">def</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        goal <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 要激活的授权码</span>
        activateCode<span class="token punctuation">(</span>goal<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 将该授权码激活状态置为1</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>调试可以使用ApiPost进行本地调试，不再赘述，可以通过参考链接查看。最后将数据上传git通过<strong>流水线</strong>更新服务。</li>
</ul>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><ul>
<li>之前的微信小程序也能实现结果，这次我们用上次没提到的云服务的调试。<br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E4%BA%91%E6%9C%8D%E5%8A%A1%E8%B0%83%E8%AF%95.png" alt="云服务调试"></li>
<li>调试界面如上，返回成功，查看MySQL得到如下图结果，77kk对应的激活状态变成1，成功实现。<br><img src="/2023/08/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1MySQL%E6%90%AD%E5%BB%BA/%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="调试结果"></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>API</tag>
        <tag>restful</tag>
        <tag>微信小程序</tag>
        <tag>云托管</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PSIM反激变换器的EMI分析及优化</title>
    <url>/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>使用PSIM进行反激式开关电源的EMI干扰分析与仿真，PSIM是一种电力电子专用的仿真软件，使用上手方便，操作和 Multisim 等其他仿真软件差不多。</p>
<span id="more"></span>
<h1 id="🔥电路搭建"><a href="#🔥电路搭建" class="headerlink" title="🔥电路搭建"></a>🔥电路搭建</h1><p><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E4%B8%BB%E7%94%B5%E8%B7%AF.png" alt="主电路"> </p>
<ul>
<li>主电路如上，反激电路为主体</li>
<li>包含原边的RCD吸收电路、副边二极管的RC吸收电路，变压器、MOSFET、副边二极管的都是非理想型。MOSFET本身参数中极间电容设置为0，其极间电容在电路中用并联电容形式表现，更直观。</li>
<li>电路输入是311V直流，输出是5V，<strong>DCM断续模式</strong></li>
<li>一些参数在图中已有显示，其他重要参数配置如下：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/MOSFET%E5%8F%82%E6%95%B0.png" alt="MOSFET参数"><br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E5%8F%98%E5%8E%8B%E5%99%A8%E5%8F%82%E6%95%B0.png" alt="变压器参数"><br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E5%89%AF%E8%BE%B9%E4%BA%8C%E6%9E%81%E7%AE%A1%E5%8F%82%E6%95%B0.png" alt="副边二极管参数"><br>驱动电路如下：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF.png" alt="驱动电路"> </li>
<li>使用比较器进行PWM波调制，直流源5V，三角波10kHz，10V（占空比0.5），调制出0.5占空比的PWM方波。</li>
<li>信号转能量的转换器使用的是多模式的，可以用于非理想MOSFET的驱动，也可以设置驱动电阻（无法直接通过电阻元件连接信号和栅极）。转换器一段接MOSFET栅极，另一端接源极。</li>
</ul>
<h1 id="🔥RCD吸收电路"><a href="#🔥RCD吸收电路" class="headerlink" title="🔥RCD吸收电路"></a>🔥RCD吸收电路</h1><ul>
<li>我们先看看非理想状态下开关管漏源电压：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%97%A0RCD.png" alt="无RCD"> </li>
<li>可以看得到每次关断，电压分为带尖峰的高频震荡1（如此命名方便后面再次提到），和低频的震荡2。前者是通过变压器原边漏感Lk和MOSFET的Cds谐振得到，后者则由于进入断续状态，原边励磁Lm和Lk一起与Cds震荡得到，L明显增加了所以震荡频率大大下降。</li>
<li>启用主电路图左上角的那部分RCD电路：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/RCD%E5%90%B8%E6%94%B6%E7%94%B5%E8%B7%AF%E6%95%88%E6%9E%9C.png" alt="RCD吸收电路效果"> </li>
<li>很明显，震荡1的尖峰从2k降低至1.75k以下，而且后续的震荡1振幅衰减明显，达到了不错的效果，这只是其中一种参数配置的结果，可以有更好的吸收效果。</li>
</ul>
<h1 id="🔥MOSFET驱动电阻"><a href="#🔥MOSFET驱动电阻" class="headerlink" title="🔥MOSFET驱动电阻"></a>🔥MOSFET驱动电阻</h1><p><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E5%BC%80%E5%85%B3%E6%8E%A7%E5%88%B6%E5%99%A8.png" alt="开关控制器"> </p>
<ul>
<li>停用RCD电路，打开上图的开关控制器（转换器）的面板<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%A0%85%E6%9E%81%E9%A9%B1%E5%8A%A8%E7%94%B5%E9%98%BB.png" alt="栅极驱动电阻"> </li>
<li>设置驱动电阻，可以取极小的数值如0.00000001代表没有驱动电阻，得到图像就是之前的没有RCD吸收电路的效果，我们加上不同大小的Rg。</li>
<li>对两次的尖峰部分进行FFT（傅里叶）分析，得到如下图像，绿色是没有Rg的图像，相比之下使用足够大的Rg能使谐波明显减少：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E9%A9%B1%E5%8A%A8%E7%94%B5%E9%98%BB%E6%95%88%E6%9E%9CFFT.png" alt="驱动电阻效果FFT"></li>
<li>结合驱动电阻和RCD吸收电路，得到如下效果：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/RCD+Rg100.png" alt="RCD电路+Rg100Ω"></li>
</ul>
<h1 id="🔥RC吸收电路"><a href="#🔥RC吸收电路" class="headerlink" title="🔥RC吸收电路"></a>🔥RC吸收电路</h1><ul>
<li>我们先看看漏源极电压和副边二极管电压的波形：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%BC%8F%E6%BA%90%E6%9E%81%E7%94%B5%E5%8E%8B%E5%92%8C%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%94%B5%E5%8E%8B.png" alt="漏源极电压和副边二极管电压"></li>
<li>可以看到MOSFET导通的时候二极管处于震荡1，有别于MOSFET的震荡1，这是变压器副边漏感Lk2和二极管结电容Cj谐振导致的，可以看得这个电路条件下其震荡频率比较高，振幅也比较剧烈。</li>
<li>将电路还原为最初的样子，启用副边的RC电路，我们使用不同的C和R值进行比较，接着截取了各自<strong>副边二极管电压</strong>震荡部分的波形：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E4%B8%8D%E5%90%8CC%E7%9A%84RC%E7%94%B5%E8%B7%AF%E6%95%88%E6%9E%9C.png" alt="不同C的RC电路效果"><br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E4%B8%8D%E5%90%8CR%E7%9A%84RC%E7%94%B5%E8%B7%AF%E6%95%88%E6%9E%9C.png" alt="不同R的RC电路效果"></li>
<li>可以看到无论RC电路对震荡的削弱作用很显著</li>
</ul>
<h1 id="🔥变压器漏感"><a href="#🔥变压器漏感" class="headerlink" title="🔥变压器漏感"></a>🔥变压器漏感</h1><ul>
<li>之前提到，各种震荡都有变压器漏感参与其中，如果我们调节漏感会得到如下结果（MOSFET漏源极电压）：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%94%B9%E5%8F%98%E5%8F%98%E5%8E%8B%E5%99%A8%E6%BC%8F%E6%84%9F%E6%95%88%E6%9E%9C.png" alt="改变变压器漏感效果"></li>
<li>可见合适的漏感很重要，有的取值可以大大消减震荡，而有的取值尖峰幅值将非常夸张。</li>
</ul>
<h1 id="🔥抖频"><a href="#🔥抖频" class="headerlink" title="🔥抖频"></a>🔥抖频</h1><ul>
<li>抖频是指改变驱动信号频率，使之在一个范围内不断改变，这可以让谐振无法完全地作用，降低一些频段谐波幅值，将其较合理地分摊给其他频段。</li>
<li>在PSIM实现抖频的方法是使用如下电路：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%8A%96%E9%A2%91%E7%94%B5%E8%B7%AF.png" alt="抖频电路"></li>
<li>最左边的是<strong>C模块</strong>即C语言模块，其输出和输入引脚可以自定义，也可以像这样加上引脚文字说明，输出是浮点型。</li>
<li>中间的模块是方波（可变频）产生器，其D脚输入的是0-1之间的占空比值。dalay是输出延迟，我们不需要直接接地，freq引脚输入的就是频率值。</li>
<li>用这个电路代替之前的PWM调制电路。主电路方便起见在原始状态下（第一张图）将MOSFET设为<strong>理想型</strong>（外面的极间电容保留），副边二极管也去掉并联的结电容，其他不变。</li>
<li><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/C%E6%A8%A1%E5%9D%97%E7%BC%96%E7%A8%8B%E7%95%8C%E9%9D%A2.png" alt="C模块编程界面"></li>
<li>C模块界面如上，在上面设置好输出2个（占空比和频率）</li>
<li>现在说说C模块如何编程，打开模块面板，除了文件引用，就是三个函数和详细的说明，三个函数如下：</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SimulationStep</span><span class="token punctuation">(</span>
        <span class="token keyword">double</span> t<span class="token punctuation">,</span> <span class="token keyword">double</span> delt<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>out<span class="token punctuation">,</span>
         <span class="token keyword">int</span> <span class="token operator">*</span>pnError<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> szErrorMsg<span class="token punctuation">,</span>
         <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> reserved_UserData<span class="token punctuation">,</span> <span class="token keyword">int</span> reserved_ThreadIndex<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> reserved_AppPtr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SimulationBegin</span><span class="token punctuation">(</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>szId<span class="token punctuation">,</span> <span class="token keyword">int</span> nInputCount<span class="token punctuation">,</span> <span class="token keyword">int</span> nOutputCount<span class="token punctuation">,</span>
         <span class="token keyword">int</span> nParameterCount<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> pszParameters<span class="token punctuation">,</span>
         <span class="token keyword">int</span> <span class="token operator">*</span>pnError<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> szErrorMsg<span class="token punctuation">,</span>
         <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> reserved_UserData<span class="token punctuation">,</span> <span class="token keyword">int</span> reserved_ThreadIndex<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> reserved_AppPtr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">SimulationEnd</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>szId<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> reserved_UserData<span class="token punctuation">,</span> <span class="token keyword">int</span> reserved_ThreadIndex<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> reserved_AppPtr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第一个<code>SimulationStep</code>函数将在仿真步长每一步都进行一次，也就是我们动态抖频需要进行的位置，第二个和第三个函数将分别在仿真开始和结束进行一次，这次没用到就可以删除。</li>
<li>模块的输入和输出分别放在<code>in</code>和<code>out</code>两个<strong>数组</strong>里面，对应各个引脚</li>
<li>本次的代码如下：</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;String.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Psim.h></span></span>

<span class="token comment" spellcheck="true">// PLACE GLOBAL VARIABLES OR USER FUNCTIONS HERE...</span>
<span class="token keyword">int</span> mosfre <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//固定频率</span>
<span class="token keyword">int</span> fre <span class="token operator">=</span> mosfre<span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//当前频率</span>
<span class="token keyword">int</span> direction <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//加或者减频率</span>
<span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>			<span class="token comment" spellcheck="true">//步长</span>
<span class="token keyword">int</span> uplim <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//向上抖频限制</span>
<span class="token keyword">int</span> downlim <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//向下抖频限制</span>

<span class="token keyword">void</span> <span class="token function">SimulationStep</span><span class="token punctuation">(</span>
        <span class="token keyword">double</span> t<span class="token punctuation">,</span> <span class="token keyword">double</span> delt<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>out<span class="token punctuation">,</span>
         <span class="token keyword">int</span> <span class="token operator">*</span>pnError<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> szErrorMsg<span class="token punctuation">,</span>
         <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> reserved_UserData<span class="token punctuation">,</span> <span class="token keyword">int</span> reserved_ThreadIndex<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> reserved_AppPtr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">// ENTER YOUR CODE HERE...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fre <span class="token operator">></span> <span class="token punctuation">(</span>mosfre <span class="token operator">+</span> uplim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        direction <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fre <span class="token operator">&lt;</span> <span class="token punctuation">(</span>mosfre <span class="token operator">-</span> downlim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        direction <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    fre <span class="token operator">+</span><span class="token operator">=</span> step <span class="token operator">*</span> direction<span class="token punctuation">;</span>
    out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> fre<span class="token punctuation">;</span>
    out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>代码逻辑很简单，就不再赘述。编程完按下<strong>检查代码</strong>进行编译，没有报错就退出面板，用探针检测方波波形：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%8A%96%E9%A2%91%E6%96%B9%E6%B3%A2.png" alt="抖频方波波形"></li>
<li>这次在10kHz为基准上下抖动5kHz，对整个漏源极电压波形进行FFT分析，得到如下对比效果：<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%8A%96%E9%A2%91%E6%95%88%E6%9E%9C.png" alt="抖频效果（漏源极电压Uds）"></li>
<li>看到波形有密有疏，说明成功实现。<br><img src="/2023/05/25/PSIM%E5%8F%8D%E6%BF%80%E5%8F%98%E6%8D%A2%E5%99%A8%E7%9A%84EMI%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/%E6%8A%96%E9%A2%91%E6%95%88%E6%9E%9C_FFT.png" alt="抖频效果_FFT"></li>
<li>可以看到从电压波形的角度，抖频的部分尖峰高于原来没有抖频的波形，而一部分是低于后者，这就需要RCD吸收电路等其他措施来消除更高尖峰的影响。</li>
<li>而从FFT分析的角度，中间部分数值较高的频段在加入抖频后会大大削弱，右边一簇小高峰也完全抹平，取而代之的是中频段有相当部分的数值有一定的上升，但是都在可接受范围内。也就是抖频达到了目的。</li>
</ul>
]]></content>
      <categories>
        <category>仿真</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>PSIM</tag>
        <tag>电磁兼容</tag>
        <tag>电力电子</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch机器学习知识</title>
    <url>/2023/04/15/Pytorch%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="🔥SummaryWriter"><a href="#🔥SummaryWriter" class="headerlink" title="🔥SummaryWriter"></a>🔥SummaryWriter</h1><p><code>SummaryWriter</code> 是 PyTorch 中的一个可视化工具，用于帮助开发者更好地理解和调试他们的模型。可以将训练过程中的结果写入到 TensorBoard 中，以便进行可视化展示和分析。<span id="more"></span></p>
<p>具体来说，<code>SummaryWriter</code> 用于创建一个写入器，将训练过程中的标量、图像、音频等数据写入到指定的目录下，以供 TensorBoard 进行可视化展示。其中，<code>log_dir</code> 参数指定了写入的目录。</p>
<p>使用 <code>SummaryWriter</code> 的一般流程如下：</p>
<ol>
<li>创建 <code>SummaryWriter</code> 对象，指定写入的目录：</li>
</ol>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

log_dir <span class="token operator">=</span> <span class="token string">"logs"</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span>log_dir<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>在训练循环中，将需要可视化的数据写入到 <code>SummaryWriter</code> 中：</li>
</ol>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 训练代码</span>
    loss <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    accuracy <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
    <span class="token comment" spellcheck="true"># 将训练结果写入 SummaryWriter</span>
    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train/loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train/accuracy"</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，<code>add_scalar</code> 方法用于将标量数据写入到 <code>SummaryWriter</code> 中，第一个参数是数据的名称，第二个参数是数据的值，第三个参数是数据所对应的步数（即训练的 epoch 数）。</p>
<ol start="3">
<li>训练结束后，关闭 <code>SummaryWriter</code>：</li>
</ol>
<pre class="line-numbers language-python"><code class="language-python">writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>关闭 <code>SummaryWriter</code> 会将写入的数据保存到指定的目录下，以供 TensorBoard 进行可视化展示。</p>
<p>需要注意的是，使用 <code>SummaryWriter</code> 需要先安装 TensorFlow 和 TensorBoard，可以使用以下命令进行安装：</p>
<pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> tensorflow tensorboard
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>另外，<code>SummaryWriter</code> 还有其他方法可以用于写入不同类型的数据，比如 <code>add_image</code> 用于写入图像数据，<code>add_audio</code> 用于写入音频数据等，具体可以参考 PyTorch 官方文档。</p>
<p>使用 <code>SummaryWriter</code> 产生的记录，需要使用 TensorBoard 进行可视化展示。TensorBoard 是 TensorFlow 提供的一个可视化工具，可以用于展示训练过程中的各种指标、模型结构、图像等信息。</p>
<p>要使用 TensorBoard 进行可视化展示，可以使用以下命令启动 TensorBoard：</p>
<pre class="line-numbers language-bash"><code class="language-bash">tensorboard --logdir<span class="token operator">=</span><span class="token operator">&lt;</span>log_dir<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中，<code>&lt;log_dir&gt;</code> 是 <code>SummaryWriter</code> 中指定的日志目录。启动后，可以在浏览器中访问 <code>http://localhost:6006</code>，即可看到 TensorBoard 的界面。</p>
<p>在 TensorBoard 的界面中，可以选择查看不同的指标、模型结构、图像等信息。比如，在 Scalars 标签页中，可以查看训练过程中的各种指标变化趋势；在 Images 标签页中，可以查看训练过程中生成的图像；在 Graphs 标签页中，可以查看模型结构等。</p>
<p>需要注意的是，TensorBoard 可以读取多个日志目录，可以使用以下命令启动 TensorBoard：</p>
<pre class="line-numbers language-bash"><code class="language-bash">tensorboard --logdir<span class="token operator">=</span><span class="token operator">&lt;</span>log_dir_1<span class="token operator">></span>:<span class="token operator">&lt;</span>log_dir_2<span class="token operator">></span>:<span class="token operator">&lt;</span>log_dir_3<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中，多个日志目录之间使用冒号分隔。这样，就可以将多个模型的训练结果同时展示在 TensorBoard 中，方便比较和分析。</p>
<h1 id="🔥数据集划分"><a href="#🔥数据集划分" class="headerlink" title="🔥数据集划分"></a>🔥数据集划分</h1><pre class="line-numbers language-python"><code class="language-python">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>features_scaled<span class="token punctuation">,</span> targets_scaled<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这是使用Scikit-learn库中train_test_split函数将一组特征和目标值数据集按照0.1的比例进行随机拆分，其中被拆分为测试集的数据占原始数据集的10%。该函数返回四个数据集：训练数据集（X_train, y_train）和测试数据集（X_test, y_test）。random_state&#x3D;22表示设置了随机数种子以确保结果可重现。而features_scaled是进行特征缩放后的特征数据集，targets_scaled是进行目标的缩放后的目标数据集。</p>
<h1 id="🔥dataset和dataloader"><a href="#🔥dataset和dataloader" class="headerlink" title="🔥dataset和dataloader"></a>🔥dataset和dataloader</h1><p>在PyTorch中，<code>Dataset</code>和<code>DataLoader</code>是用于数据处理和数据加载的两个关键类。</p>
<p><code>Dataset</code>类是将训练或测试数据加载到模型中的接口。它需要实现__len__()方法和__getitem__()方法，分别提供数据集的大小和数据。</p>
<p><code>DataLoader</code>类是通过批量加载和并行处理数据增加训练效率的工具。它接受一个Dataset，并允许使用多个进程或线程异步加载数据、并以一定的batch大小进行划分数据集。</p>
<p>简而言之，<code>Dataset</code>负责将数据准备好，<code>DataLoader</code>则从<code>Dataset</code>中获取数据，并将其整理成可供模型使用的批量数据。这样就可以对大规模数据集进行高效的训练了。</p>
<ul>
<li>以下是一个简单的使用<code>Dataset</code>和<code>DataLoader</code>的代码示例:</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader

<span class="token comment" spellcheck="true"># 创建自定义数据集类，继承自Dataset，并重载__len__()和__getitem__()方法</span>
<span class="token keyword">class</span> <span class="token class-name">CustomDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span>targets <span class="token operator">=</span> targets
        
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>targets<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 创建数据集对象，并设置超参数</span>
data <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
train_dataset <span class="token operator">=</span> CustomDataset<span class="token punctuation">(</span>data<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>
batch_size <span class="token operator">=</span> <span class="token number">32</span>

<span class="token comment" spellcheck="true"># 使用数据集对象创建数据加载器，并设置超参数</span>
train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 遍历数据加载器进行模型的训练</span>
<span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># ...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在此示例中，我们首先创建了一个自定义数据集类 <code>CustomDataset</code>，该类继承自<code>Dataset</code>并实现__len__()和__getitem__()方法。然后我们创建了数据集对象并设置了超参数。接下来，我们使用数据集对象创建了数据加载器，并将其用于多批数据的训练过程。在训练过程中，数据加载器会逐步从数据集中提取数据，每个batch大小为32。在此基础上，可以根据实际需求修改<code>Dataset</code>和<code>DataLoader</code>的实现方法和超参数，以优化模型训练的效率和精度。</p>
<h1 id="🔥batch"><a href="#🔥batch" class="headerlink" title="🔥batch"></a>🔥batch</h1><p>在机器学习中，通常会使用batch（批次）来处理数据。每个batch表示一组数据样本，通常是以矩阵的形式存储。这些样本被分成许多组，并且模型只能在一组中学习模型参数。在完成一组batch的所有样本的训练后，模型将根据损失函数计算一个平均梯度，然后使用这个平均值来更新网络的权重和偏差, 这个过程被称为”批量梯度下降”。</p>
<p>使用batch训练模型的好处包括：</p>
<ul>
<li>内存效率：每个batch的大小可以控制内存使用，从而避免计算机内存不足或过剩的情况。</li>
<li>训练速度：优化器可以更快地计算每个batch的梯度，从而使模型更容易收敛。</li>
<li>更好的泛化性能：使用batch可以减少过拟合的风险，因为训练数据的随机子集不太可能代表整个数据集，因此该方法有助于提高泛化性能。</li>
</ul>
<p>通常，batch的大小是可以调节的超参数，因此它可以根据具体问题的复杂性、可用的计算资源和时间限制进行调整。一般来说batch_size越大（即一个batch的数据越多）训练的会越快</p>
<h1 id="🔥正则化"><a href="#🔥正则化" class="headerlink" title="🔥正则化"></a>🔥正则化</h1><p>正则化是机器学习领域中用于控制模型复杂度，从而避免过拟合的技术。在许多情况下，我们的模型会以过高的复杂度来拟合训练数据，从而导致模型在新数据上表现不佳。为了解决这个问题，可以采用正则化技术。</p>
<p>正则化通过附加一些限制或惩罚项来约束模型参数的取值范围，从而使其更加趋向于简单的模型。常见的正则化方法有L1正则化和L2正则化。</p>
<ul>
<li>L1正则化：也称为L1范数正则化或Lasso正则化，它向损失函数中添加一个关于权重绝对值之和的惩罚项。L1正则化有助于在优化过程中将某些特征的权重归零，因此该方法还可以用于特征选择。</li>
<li>L2正则化：也称为L2范数正则化或Ridge正则化，它向损失函数中添加一个关于权重平方和的惩罚项。L2正则化有助于平滑和缩小权重，从而避免了权重的大幅波动。</li>
</ul>
<p>通过引入正则化项，我们可以有效控制模型的复杂度，从而减少过拟合并提高模型的泛化能力。因此，正则化被广泛用于机器学习领域中的各种模型中，例如线性回归、逻辑回归、神经网络等。</p>
<pre class="line-numbers language-python"><code class="language-python">optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>weight_decay</code> 即是正则化，过大可能导致收敛，过小可能没有作用</p>
<h1 id="🔥归一化"><a href="#🔥归一化" class="headerlink" title="🔥归一化"></a>🔥归一化</h1><p>Scaler归一化是机器学习中常用的数据预处理技术，它通过对特征值进行线性变换，将特征值缩放到一个给定的范围内。具体来说，Scaler归一化的主要目的是使数据分布在相同的尺度上，从而避免特征之间的数值差异过大而导致算法性能下降。</p>
<p>Scaler归一化方法有多种，其中较常见的有：</p>
<ul>
<li>Min-max Scaler: 缩放数据到指定的最小值和最大值之间（通常为0和1）。</li>
<li>Standard Scaler: 将数据缩放到均值为0、方差为1的标准正态分布。</li>
<li>Robust Scaler: 将数据缩放到中位数和四分位数之间的距离内，以避免异常值对数据的影响。</li>
</ul>
<p>反归一化则是将经过Scaler归一化后的结果还原回原始数据的过程。反归一化的目的是得到真实的数据范围和大小，以便对模型的预测结果进行实际含义的解释或可视化。</p>
<p>Scaler归一化和反归一化应该注意以下几点：</p>
<ul>
<li><p>归一化和反归一化操作的顺序应该相反，即先进行Scaler归一化处理，再进行反归一化处理。</p>
</li>
<li><p>参数的计算范围应该是基于训练数据计算，然后在训练数据、验证数据和测试数据上进行Scaler归一化和反归一化处理。</p>
</li>
<li><p>一些算法（如决策树）并不需要归一化处理，因为它们对特征之间的比例关系不敏感。相反，某些算法（如KNN）则非常敏感于不同特征的范围差异，因此需要进行Scaler归一化处理。</p>
</li>
<li><p>归一化前要先将所有离散变量数值转换为对应的数值编码，否则这些变量会被误认为连续变量而进行归一化。</p>
</li>
<li><p>下面是一个简单的使用sklearn库进行Scaler归一化的代码示例，它基于Min-max Scaler方法：</p>
</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaler

<span class="token comment" spellcheck="true"># 创建MinMaxScaler对象</span>
scaler <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 假设我们有一个2D数组X，我们要将每列特征都缩放到[0, 1]范围内</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 对数据进行Scaler归一化处理（fit并transform）</span>
X_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 输出归一化后的结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>X_scaled<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的代码中，我们首先导入了<code>MinMaxScaler</code>类，然后创建了一个该类的对象<code>scaler</code>。接着，我们通过提供一个2D数组<code>X</code>来演示Scaler归一化处理过程。最后，我们使用<code>fit_transform()</code>函数直接对数据进行归一化处理，并输出归一化后的结果。</p>
<p>需要注意的是，在实际应用中，<code>fit_transform()</code>函数的参数通常是训练集或验证集数据。然后，我们可以使用相同的Scaler对象对测试集数据进行Scaler归一化操作。这是因为Scaler对象根据训练集数据计算得出的缩放范围和参考点。</p>
<p><code>fit()</code>函数用于从训练数据中计算出一些参数或者所需的信息，在<code>fit()</code>函数调用之后，这些参数或信息将被保存在模型对象内部，以供后续的数据转换或预测使用。</p>
<p><code>transform()</code>函数则是对数据进行某种处理或变换，并输出相应的转换结果。transform()仅仅对数据进行转换处理，不会再次计算参数或信息并更新模型内部状态。</p>
<p>而<code>fit_transform()</code>函数则是将<code>fit()</code>和<code>transform()</code>两个函数合起来执行。即先使用训练数据来调整模型的参数，然后用该参数对训练数据进行转换得到新的训练数据。运行<code>fit_transform()</code>相当于依次调用<code>fit()</code>和<code>transform()</code>函数。</p>
<p>总的来说，<code>fit()</code>和<code>fit_transform()</code>适用于模型训练过程中，<code>transform()</code>则适用于模型预测和测试过程中。在使用Scikit-learn库时，通常先使用<code>fit()</code>函数计算训练集所需的参数，然后再使用<code>transform()</code>函数对训练集、验证集和测试集进行数值化处理。</p>
<p>需要注意的是，对于测试集数据需要使用训练集（或验证集）计算得到的参数进行相同的转换处理。这样才能确保训练集、验证集和测试集之间的特征范围一致，避免因特征缩放不一致而导致模型表现不佳。</p>
<h1 id="🔥损失函数和优化器"><a href="#🔥损失函数和优化器" class="headerlink" title="🔥损失函数和优化器"></a>🔥损失函数和优化器</h1><pre class="line-numbers language-python"><code class="language-python">    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这段代码是使用PyTorch构建神经网络模型时常用的两个组件，分别是误差函数（或损失函数）和优化器。</p>
<ul>
<li><p><code>nn.MSELoss()</code>是一个预定义的PyTorch损失函数类，它计算神经网络的MSE（均方误差），即预测值与目标值之间的平均二次差异。我们将使用此损失函数作为神经网络的误差函数来度量模型的训练效果。</p>
</li>
<li><p><code>torch.optim.Adam()</code>是一个预定义的PyTorch优化器类，它实现了Adam优化算法。Adam优化器是一种比较先进的随机梯度下降算法，具有自适应学习速率、加权聚合梯度等特点。我们使用该优化器来更新神经网络的参数，以最小化神经网络的误差函数。</p>
</li>
</ul>
<p>在这里，我们首先定义了一个误差函数<code>criterion</code>，并使用<code>nn.MSELoss()</code>类实例化了它。然后，我们定义了一个优化器<code>optimizer</code>，并使用<code>torch.optim.Adam()</code>类对卷积神经网络<code>model</code>的所有参数进行优化。</p>
<p>除了MSELoss（均方误差损失函数）之外，常见的神经网络损失函数还包括：</p>
<ul>
<li>交叉熵损失（Cross-Entropy Loss）：适用于分类问题的损失函数，通常与Softmax激活函数一起使用，可以度量模型输出概率和目标标签之间的差异。</li>
<li>二元交叉熵损失（Binary Cross-Entropy Loss）：适用于二分类问题的损失函数，输出结果限定在[0,1]范围内。可以看作是交叉熵损失在二分类问题上的简化版。</li>
<li>对数似然损失（Negative Log-Likelihood Loss）：也是一种适用于分类问题的损失函数，用于衡量模型预测值的概率与真实标签之间的差距。常用于多类别分类问题中，也常与Softmax神经网络结合使用。</li>
<li>Hinge Loss：适用于支持向量机（SVM）算法的损失函数，比较适用于处理二分类问题。</li>
<li>Kullback-Leibler散度损失（Kullback-Leibler Divergence Loss）：也称为KL散度损失或信息增益损失，用于衡量两个分布之间的差异。</li>
</ul>
<p>这些损失函数都有其适用的场景和特点，需要根据具体的问题和目标选择合适的损失函数进行神经网络训练。需要根据任务和数据类型选取相应的损失函数。</p>
<p>除了Adam优化器之外，还有一些其他常用的优化器，每个优化器适用于不同的神经网络场景：</p>
<ul>
<li>随机梯度下降（Stochastic Gradient Descent, SGD）：是最基本和广泛使用的优化方法之一。其基本思想是根据负梯度方向更新每个参数的值。</li>
<li>动量（Momentum）：通过增加之前梯度变化情况的动态平均来保持优化器的动量。它可以在缓解局部极小值和加速收敛两方面帮助优化。</li>
<li>Adamax：是Adam算法的一个变种，在横向加权时间步长上进行规范化，并放弃Adam算法的RMS Prop分母项。</li>
<li>Adagrad: 用于稀疏数据和问题，对历史梯度进行累积，可以自动调整模型中每个参数的学习率。具有Theano、Pandas 和 Numpy 这三个库</li>
<li>Adadelta: 是Adagrad改进的一个算法，将不断累加的历史梯度平方和替换为仅保存固定长度的平方渐变和。</li>
<li>AdaGradDelta-SGD、AdaMax和Nadam是针对特定情况和要求做出的修改和改进版本。</li>
</ul>
<p>需要根据具体情况和任务选择最适合的优化器。在实践中，需要通过反复实验和比较才能确定最优选择。</p>
<h1 id="🔥模型定义（LSTM为例）"><a href="#🔥模型定义（LSTM为例）" class="headerlink" title="🔥模型定义（LSTM为例）"></a>🔥模型定义（LSTM为例）</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LSTMModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>LSTMModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>hidden_dim <span class="token operator">=</span> hidden_dim
        self<span class="token punctuation">.</span>num_layers <span class="token operator">=</span> num_layers
        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        h0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        c0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        out<span class="token punctuation">,</span> <span class="token punctuation">(</span>hn<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>h0<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c0<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># lstm层</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 全连接层</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是一个基于LSTM（长短期记忆神经网络）的PyTorch模型。其中<code>__init__()</code>方法定义了LSTM的网络结构，<code>forward()</code>方法实现了LSTM网络的前向传播。输入特征<code>input_dim</code>映射的到lstm模块的<code>hidden_dim</code>个隐藏层神经元，中间经过<code>num_layers</code>层最后映射到<code>output_dim</code>个输出特征</p>
<p>在<code>forward()</code>过程中，输入数据<code>x</code>首先通过LSTM层<code>self.lstm</code>进行处理，得到每个时间步骤的隐状态（hidden state）和细胞状态（cell state）。其中，<code>h0</code>和<code>c0</code>是初始隐藏状态和细胞状态，通常设置为全零张量。</p>
<p>接着，通过取每个样本（batch）的最后一个时间步骤的隐状态，并通过全连接层<code>self.fc</code>将其映射到输出维度上，从而得到最终的输出。</p>
<p>具体而言，<code>out[:, -1, :]</code>表示取<code>out</code>张量中的每个batch的最后一行，也就是最终时间步骤的所有隐状态，并且通过<code>self.fc</code>层进行线性映射得到模型最终的输出结果。最终输出的形状是(batch_size, output_dim)。</p>
<p>需要注意的是，在PyTorch中的LSTM层中，默认情况下会返回所有时间步骤的输出，而不只是最后一个时间步骤的输出。因此，需要通过<code>out[:, -1, :]</code>来取出最后一个时间步骤的输出。</p>
<h2 id="nn-LSTM"><a href="#nn-LSTM" class="headerlink" title="nn.LSTM"></a>nn.LSTM</h2><p><code>nn.LSTM</code>是PyTorch中实现长短期记忆神经网络（LSTM）的模块。它接受以下参数：</p>
<ul>
<li><code>input_dim</code>：输入张量的特征维度（即每个时间步骤输入的特征数量）。在应用场景中，可以理解为一个样本输入数据的维度。</li>
<li><code>hidden_dim</code>：LSTM中隐藏状态的维度（也称作LSTM单元个数或输出大小），通常与<code>input_dim</code>的值相近或稍微大一些。</li>
<li><code>num_layers</code>：LSTM的层数，通常选择2层（默认值）到数十层之间，其数目会影响到LSTM提取特征的复杂度和表达能力。</li>
<li><code>batch_first</code>：布尔型变量，默认值是<code>False</code>，表示输入张量的第0维是沿着时间步的（即(batch_size, seq_length, input_dim)），如果将其设置为<code>True</code>，则第0维表示批次大小（即(seq_length,batch_size,input_dim)），在此时需要注意加改变维度。</li>
</ul>
<p><code>nn.LSTM()</code>方法还具有其他可选参数，例如<code>dropout</code>（控制在训练期间应用于LSTM输出的丢失率）和<code>bidirectional</code>（是否使用双向LSTM）等等。</p>
<p>该层的输入张量的形状为<code>(seq_len, batch, input_dim)</code>（如果<code>batch_first=False</code>），或者是<code>(batch, seq_len, input_dim)</code>（如果<code>batch_first=True</code>）。该层的输出张量形状为<code>(seq_len, batch, hidden_dim)</code>（如果<code>batch_first=False</code>），或者是<code>(batch, seq_len, hidden_dim)</code>（如果<code>batch_first=True</code>）。LSTM层的输出包括最终的隐状态和细胞状态，可以通过<code>return_sequence</code>和<code>return_state</code>参数进行控制。</p>
<h2 id="nn-Linear"><a href="#nn-Linear" class="headerlink" title="nn.Linear"></a>nn.Linear</h2><p><code>nn.Linear()</code> 是 PyTorch 中实现线性变换的模块。它接受两个参数：</p>
<ul>
<li><code>in_features</code>：输入张量的特征维度；在神经网络中通常是该层的输入维度。</li>
<li><code>out_features</code>：输出张量的特征维度；在神经网络中通常是该层的输出维度或者神经元的个数。</li>
</ul>
<p>在这里，<code>nn.Linear(hidden_dim, output_dim)</code> 表示一个将输入张量从大小为 <code>hidden_dim</code> 的空间转换为大小为 <code>output_dim</code> 的空间的全连接 (Fully Connected) 层或线性层。可以理解为对每个样本进行一次矩阵乘法，并加上偏置项(bias)。当然，可以根据需求添加其他功能，例如批标准化(Batch Normalization)、激活函数(Activation function)等等。注意到在运行前输入张量的形状应该是 <code>(batch_size, hidden_dim)</code> ，该层的输出将是 <code>(batch_size, output_dim)</code>。</p>
<h1 id="🔥张量"><a href="#🔥张量" class="headerlink" title="🔥张量"></a>🔥张量</h1><p>张量是多维数组的一种泛称，它是数学和计算机科学中一种十分重要的数据结构。在机器学习和深度学习中，张量是描述数据的基本结构。</p>
<p>可以将张量看作是一个高维数组，它包含了一个或多个数据元素，这些元素可以是实数、整数、布尔值等。通常情况下，我们使用张量来存储神经网络中的输入、输出、权重、偏置等参数。在 PyTorch、TensorFlow 等深度学习框架中，张量是非常重要的基础数据类型之一。</p>
<p>在机器学习中，张量最常见的应用就是存储和处理数据，包括训练数据、测试数据、模型参数以及计算输出结果等。以下是一些具体的例子：</p>
<ol>
<li>图像数据：在计算机视觉中，图像通常由 RGB 矩阵组成，可以转换成三维张量，其中第一维表示通道数（3），第二、三维分别表示图像的高和宽。</li>
<li>自然语言处理数据：在自然语言处理中，文本数据通常会转化为单词或者字符的序列，这些序列可以被编码为二维或三维张量，其中第一维表示序列长度，第二维表示单词或字符的嵌入向量的维度。</li>
<li>模型参数：神经网络中的权重和偏置通常被存储在张量中作为模型参数，在训练过程中不断更新，以优化模型效果。</li>
<li>计算输出结果：每个神经网络层的输入和输出都是张量，通过逐层传递张量，可以在神经网络中完成前向传播计算，得出最终的输出结果。</li>
</ol>
<p>在实际机器学习应用中，涉及到的数据可能是高维度的，因此需要将其转化为多维张量来方便存储和处理。</p>
<h1 id="🔥Yolo"><a href="#🔥Yolo" class="headerlink" title="🔥Yolo"></a>🔥Yolo</h1><h2 id="Yolov5"><a href="#Yolov5" class="headerlink" title="Yolov5"></a>Yolov5</h2><p>YoloV5（You Only Look Once Version 5）是一种目标检测算法，它可以实现快速准确地识别图像中的物体，并输出其在图像中的位置信息和类别。以下是对YoloV5算法的详细分析：</p>
<ol>
<li>网络结构：YoloV5采用卷积神经网络模型，整个网络由骨架网络、FPN（feature pyramid network）、head网络组成。骨架网络用于提取特征，FPN用于提取多尺度特征并加强低层次特征的表达能力，head网络用于预测每个anchor所对应的bounding box以及类别。</li>
<li>目标检测流程：YoloV5通过预测bounding box来实现目标检测。首先将输入图像通过骨架网络得到特征图，然后将特征图传入FPN网络中获取不同分辨率的特征图，最后将这些特征图输入到head网络中进行预测。每个anchor会计算与ground truth的IOU（Intersection over Union），如果IOU大于某一阈值，则视为正样本，否则视为负样本。</li>
<li>Anchor匹配：YoloV5引入了类似RetinaNet的anchor-free思想，但是不同之处在于YoloV5仍然采用了anchor的方式进行处理。具体来说，YoloV5通过k-means聚类的方法从训练集中选取若干个bbox作为anchor，并在网络中引入scale和aspect ratio来适应不同尺度和不同形状的物体。在推理阶段，每个anchor预测物体的类别和偏移量。</li>
<li>Loss函数：YoloV5使用GIoU（Generalized Intersection over Union）来计算bounding box的损失值，同时也采用了多个不同权重的loss函数包括置信度、类别识别等。其中，GIoU是目前行业内最流行的bounding box loss函数之一，并能够较好地考虑bounding box之间的相似性。</li>
<li>优化器：YoloV5使用AdaBelief来作为优化器，这是一种效果非常好的优化器，具有较强的收敛速度和通用性，并且能够抵抗梯度下降的噪声干扰。</li>
</ol>
<p>总之，YoloV5作为一款高精度、快速的目标检测算法，在工业界和学术界已经得到了广泛的应用和认可。其综合考虑尺度、形状和特征点信息的特点，使得它能够更加准确地检测出目标物体，并且在复杂环境下具备较好的鲁棒性。</p>
<h2 id="YoloX"><a href="#YoloX" class="headerlink" title="YoloX"></a>YoloX</h2><p>YoloX是一种目标检测算法，由腾讯AI Lab于2021年提出，其最大的特点是采用了多层金字塔感受野设计以及SE模块结构。以下是对YoloX算法的详细分析：</p>
<ol>
<li><p>网络结构：YoloX采用了多层级的金字塔网络结构，每个层级都可以感受到不同大小的物体。此外，YoloX还引入了精细化特征流结构，通过较大尺寸的卷积核来实现高分辨率的感受野和更大的场景背景。</p>
</li>
<li><p>目标检测流程：YoloX采用anchor-free的方式进行预测。具体来说，YoloX使用FCOS（Fully Convolutional One-Stage Object Detection）作为检测器，并采用YOLOv3作为基础模型，在输出特征图之后直接预测边界框及类别概率。</p>
</li>
<li><p>Anchor替代：YoloX放弃了传统的Anchor形式，使用FCOS的思路直接预测中心点、宽、高三个值，并且进一步加入IOU Loss以实现最小化输出与真实框间的IOU。</p>
</li>
<li><p>SE模块：YoloX还引入了SE（Squeeze-and-Excitation）模块，来增强特征表达能力和适应性。SE模块可以自适应地调整特征图通道间的相互依赖和关系，提升了模型的泛化能力。</p>
</li>
<li><p>Loss函数：YoloX采用IoULoss，在FCOS的输出与真实框之间进行最小化。</p>
</li>
<li><p>优化器：YoloX使用了不同于其他目标检测算法的Ranger优化器，它是一种基于RAdam和Lookahead two-stage训练的优化器，并具有较好的收敛速度和泛化性能。</p>
</li>
</ol>
<p>总体来说，YoloX在网络结构、Anchor替换、SE模块以及优化器等方面都有一些创新和改进。在COCO数据集上的测试，YoloX获得了目前最高的AP（average precision）值，表现出色。</p>
<h1 id="🔥IoU与GIoU"><a href="#🔥IoU与GIoU" class="headerlink" title="🔥IoU与GIoU"></a>🔥IoU与GIoU</h1><p>GIoU（Generalized Intersection over Union）是一种应用于目标检测算法中bounding box回归损失函数中的算法。与传统IoU（Intersection over Union）相比，GIoU在提高预测性能的同时，还保持可导性和计算效率。以下是对GIoU算法的详细分析：</p>
<ol>
<li>IoU算法：IoU是指交并比，用于评估真实边界框和预测边界框之间的重叠程度，其计算方式为两个边界框的交集面积除以它们的并集面积。IoU可以用来评价目标检测算法的准确性。</li>
<li>传统的bounding box损失函数：在目标检测算法中，最常用的bounding box损失函数是Smooth L1 Loss。然而，它存在较大的问题，如仅考虑坐标差异不够准确，特别是在小物体检测和密集布置物体的场景下更为明显。</li>
<li>GIoU算法：GIoU作为IoU的扩展，引入了如何惩罚非对齐的框之间计算出的IoU值的概念，即比如垂直的框之间的IoU值不应该等同于水平的框之间的IoU值。GIoU将IoU的差异与边界框内外形状的重叠程度相结合，提高了对bounding box回归的准确性和稳定性。</li>
<li>计算方式：GIoU计算时先根据IoU进行如下三项分别加权: $s_{iou}$ (IoU部分)，$s_{ub}$ (gt框与预测框最小面积并的关于最大区域的一致性测量) 和 $s_{inb}$ (预测框内部分的关于最大区域的不一致性测量)。然后依次计算$IoU, s_{ub}, s_{inb}$，最终得到GIoU为$1 - \frac{|(C_g\bigcap C_p)|}{|C_g \bigcup C_p|} + \lambda*(s_{ub} + s_{inb})$，其中$C_g$是真实框集合，$C_p$是预测框集合，$\lambda$是调整权重的超参数。</li>
</ol>
<p>总之，GIoU能够更好地考虑bounding box之间的相似性，并在目标检测中获得了很好的效果，被广泛应用于许多当前流行的目标检测算法中，如YoloV5、MMDetection、PaddleDetection等。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>机器学习</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LSTM</tag>
        <tag>Pytorch</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Pytorch的LSTM网络时序模型训练及预测</title>
    <url>/2023/04/15/%E5%9F%BA%E4%BA%8EPytorch%E7%9A%84LSTM%E7%BD%91%E7%BB%9C%E6%97%B6%E5%BA%8F%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%8F%8A%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="🔥概述"><a href="#🔥概述" class="headerlink" title="🔥概述"></a>🔥概述</h1><p>使用LSTM神经网络来预测风场发电量，输入特征是气象数据和预测信息等，输出则为两种测量方法下的功率。项目基于Pytorch框架。<span id="more"></span></p>
<h1 id="🔥数据结构"><a href="#🔥数据结构" class="headerlink" title="🔥数据结构"></a>🔥数据结构</h1><table>
<thead>
<tr>
<th align="center">DATATIME</th>
<th align="center">WINDSPEED</th>
<th align="center">PREPOWER</th>
<th align="center">WINDDIRECTION</th>
<th align="center">TEMPERATURE</th>
<th align="center">HUMIDITY</th>
<th align="center">PRESSURE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2&#x2F;11&#x2F;2021 00:00:00</td>
<td align="center">1.2</td>
<td align="center">8765</td>
<td align="center">99</td>
<td align="center">13.8</td>
<td align="center">93</td>
<td align="center">899</td>
</tr>
<tr>
<td align="center">2&#x2F;11&#x2F;2021 00:00:00</td>
<td align="center">1.2</td>
<td align="center">8847</td>
<td align="center">99</td>
<td align="center">13.8</td>
<td align="center">93</td>
<td align="center">899</td>
</tr>
<tr>
<td align="center">2&#x2F;11&#x2F;2021 00:15:00</td>
<td align="center">1.1</td>
<td align="center">8208</td>
<td align="center">100</td>
<td align="center">13.9</td>
<td align="center">93</td>
<td align="center">899</td>
</tr>
<tr>
<td align="center">2&#x2F;11&#x2F;2021 00:15:00</td>
<td align="center">1.1</td>
<td align="center">8421</td>
<td align="center">100</td>
<td align="center">13.9</td>
<td align="center">93</td>
<td align="center">899</td>
</tr>
<tr>
<td align="center">2&#x2F;11&#x2F;2021 00:30:00</td>
<td align="center">1.2</td>
<td align="center">7795</td>
<td align="center">95</td>
<td align="center">14.1</td>
<td align="center">92</td>
<td align="center">899</td>
</tr>
</tbody></table>
<ul>
<li>续表，在上表右边续</li>
</ul>
<table>
<thead>
<tr>
<th align="center">“ROUND(A.WS ｜ 1)”</th>
<th align="center">“ROUND(A.POWER ｜ 0)”</th>
<th align="center">YD15</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5.5</td>
<td align="center">14247</td>
<td align="center">13913</td>
</tr>
<tr>
<td align="center">5.5</td>
<td align="center">14247</td>
<td align="center">13913</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">12543</td>
<td align="center">12823</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">12543</td>
<td align="center">12823</td>
</tr>
<tr>
<td align="center">4.2</td>
<td align="center">9177</td>
<td align="center">8678</td>
</tr>
</tbody></table>
<ul>
<li>数据第一列是日期及时间，每隔 15 分钟一行到两行数据 “ROUND(A.POWER ｜ 0)” 和 YD15，最后两列是预测对象（输出特征），数据有上万条，汇集一整年的数据，数据末尾有一整天的数据缺少最后两列，这就是我们要最终预测的数据内容。中间理论上应该是输入特征，但是由于一些奇奇怪怪的原因<strong>倒数第三列不用</strong>，只用<strong>第二列开始的6个特征</strong></li>
</ul>
<h1 id="🔥LSTM模型"><a href="#🔥LSTM模型" class="headerlink" title="🔥LSTM模型"></a>🔥LSTM模型</h1><h2 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h2><p>LSTM（Long Short-Term Memory，长短时记忆网络）是一种递归式神经网络模型，广泛用于处理时间序列数据和自然语言处理任务。LSTM模型通过将特定的控制单元添加到普通的循环神经网络 (RNN) 模型中，来缓解简单 RNN 中出现的梯度消失问题。</p>
<p>与简单 RNN 不同，LSTM 模型包含三个门（input gate、forget gate 和 output gate），这些门帮助 LSTM 记住或遗忘先前的状态信息并输出新的隐藏状态；还有一个细胞状态，从而使得对时间序列的建模更加准确与可靠。</p>
<p>LSTM 模型的每一个 timestep 都涉及到四个变量：输入 (input)、遗忘 (forget)、更新 (update) 和输出 (output)。模型通过运行各种阶段组成的逻辑电路（logic circuits），以一系列操作对这些变量进行计算：</p>
<ul>
<li>输入门：该门控制着当前输入信息在什么程度上会影响当前时刻的细胞状态，进而影响后续状态的计算。</li>
<li>遗忘门：该门控制着从之前细胞状态应当被遗忘多少比例。</li>
<li>更新门：该门计算了当前输入及前一个时刻的隐藏状态对细胞状态的更新量，并结合输入门和遗忘门计算出当前时刻的细胞状态。 </li>
<li>输出门：该门控制着当前状态下，模型会在多大程度上输出当前时刻的隐藏状态。</li>
</ul>
<p>LSTM 模型广泛应用于时间序列数据分析（如股票价格预测和天气预报等），自然语言处理（如机器翻译、情感分析等）以及其他需要对序列进行建模的任务中。</p>
<p>实现 LSTM 模型可以使用 TensorFlow 或 PyTorch 等深度学习框架，在过去几年中，由于 LSTM 模型具有较高的鲁棒性和良好的效果，已经被广泛应用于各种实际场景中进行预测和分类等工作。</p>
<h2 id="搭建模型"><a href="#搭建模型" class="headerlink" title="搭建模型"></a>搭建模型</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># LSTM.py</span>
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 定义LSTM模型</span>
<span class="token keyword">class</span> <span class="token class-name">LSTMModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>LSTMModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>hidden_dim <span class="token operator">=</span> hidden_dim
        self<span class="token punctuation">.</span>num_layers <span class="token operator">=</span> num_layers
        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        h0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        c0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_layers<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        out<span class="token punctuation">,</span> <span class="token punctuation">(</span>hn<span class="token punctuation">,</span> cn<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>h0<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c0<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># lstm层</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 全连接层</span>
        <span class="token keyword">return</span> out
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Pytorch定义一个模型非常简单，继承<code>nn.Module</code>类后就能继承神经网络大部分模型的功能，比如反向传播，权值计算等，我们只要设定好隐藏层维度、LSTM层数、LSTM参数、全连接层</p>
<p><code>self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, batch_first=True)</code> 是一个在 PyTorch 中定义 LSTM 模型的语句，其中：</p>
<ul>
<li><code>input_dim</code> 是输入数据的特征维度（input dimension）；</li>
<li><code>hidden_dim</code> 是 LSTM 模型中隐藏层单元的数量（hidden dimension），也可以理解为每个时间步长的输出维度；</li>
<li><code>num_layers</code> 是 LSTM 模型中堆叠的层数（number of layers），可以使模型更加复杂；</li>
<li><code>batch_first=True</code> 表示输入张量的第一维度是 batch size，即输入数据的形状应该为 <code>(batch_size, sequence_length, input_dim)</code>。</li>
</ul>
<p>这条语句使用 nn.LSTM 类来定义 LSTM 模型。在 PyTorch 中，nn.LSTM 类实现了一个带有可训练参数的 LSTM 模型，可以用于处理序列样本，例如时间序列或序列化的文本数据。</p>
<p><code>self.lstm</code> 在实例化后成为神经网络模型的一个属性，可以在 <code>forward</code> 方法中被调用来处理输入数据。可使用 <code>input_tensor, _ = self.lstm(input_tensor)</code> 这种格式对数据进行 LSTM 处理。</p>
<h2 id="早停策略"><a href="#早停策略" class="headerlink" title="早停策略"></a>早停策略</h2><ul>
<li>当模型收敛时，训练的损失将长期不发生明显下降，这时我们要设置早停策略来提前终止训练</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 早停策略</span>
<span class="token keyword">class</span> <span class="token class-name">EarlyStopping</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> delta<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>patience <span class="token operator">=</span> patience
        self<span class="token punctuation">.</span>delta <span class="token operator">=</span> delta
        self<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>best_score <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>early_stop <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>val_loss_min <span class="token operator">=</span> np<span class="token punctuation">.</span>Inf

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val_loss<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 每当被调用就进行</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>best_score <span class="token keyword">is</span> None<span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 第一次最优损失</span>
            self<span class="token punctuation">.</span>best_score <span class="token operator">=</span> val_loss
        <span class="token keyword">elif</span> val_loss <span class="token operator">></span> self<span class="token punctuation">.</span>best_score <span class="token operator">+</span> self<span class="token punctuation">.</span>delta<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 若新的损失值比原来还大了delta就计1次</span>
            self<span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>counter <span class="token operator">>=</span> self<span class="token punctuation">.</span>patience<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 容忍次数达到就停止，标志位置true</span>
                self<span class="token punctuation">.</span>early_stop <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>                               <span class="token comment" spellcheck="true"># 如果出现新的最优损失值就记录，次数归零重新来</span>
            self<span class="token punctuation">.</span>best_score <span class="token operator">=</span> val_loss
            self<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token number">0</span>
            self<span class="token punctuation">.</span>val_loss_min <span class="token operator">=</span> val_loss
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>我们每次迭代都会将损失值输入到这个类进行判断，如果长期没发生改善即可终止迭代，delta是指损失值高于最优损失值多少时是可以容忍的，patience则是这种容忍的次数，到达次数即终止训练</li>
</ul>
<h1 id="🔥参数配置文件"><a href="#🔥参数配置文件" class="headerlink" title="🔥参数配置文件"></a>🔥参数配置文件</h1><ul>
<li>一个json文件（我命名为config），写着训练模型的必要参数，便于多文件读取并统一使用，不需要更改</li>
<li>依次是 隐藏层神经元（维度）数hidden_dim、LSTM层数num_layers、读取的文件路径file_csv、单个batch大小batch_size、学习率learning_rate、训练世代数num_epochs、日志存放间隔log_interval、日志路径文件夹log_dir、输入特征数input_dim</li>
</ul>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"hidden_dim"</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>
    <span class="token property">"num_layers"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">"file_csv"</span> <span class="token operator">:</span> <span class="token string">"data/01.csv"</span><span class="token punctuation">,</span>
    <span class="token property">"batch_size"</span> <span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">,</span>
    <span class="token property">"learning_rate"</span> <span class="token operator">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span>
    <span class="token property">"num_epochs"</span> <span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
    <span class="token property">"log_interval"</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token property">"log_dir"</span> <span class="token operator">:</span> <span class="token string">"./log"</span><span class="token punctuation">,</span>
    <span class="token property">"input_dim"</span> <span class="token operator">:</span> <span class="token number">6</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥训练模型"><a href="#🔥训练模型" class="headerlink" title="🔥训练模型"></a>🔥训练模型</h1><h2 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> json
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> TensorDataset
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_absolute_error
<span class="token keyword">from</span> LSTM <span class="token keyword">import</span> <span class="token operator">*</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>LSTM就是上面放模型的文件</p>
<h2 id="训练函数"><a href="#训练函数" class="headerlink" title="训练函数"></a>训练函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练模型操作</span>
<span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> val_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> device<span class="token punctuation">,</span> num_epochs<span class="token punctuation">,</span> log_interval<span class="token punctuation">,</span> log_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span>log_dir<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 创建一个TensorBoard的SummaryWriter对象，用于将训练过程中的指标写入事件文件</span>
    early_stopping <span class="token operator">=</span> EarlyStopping<span class="token punctuation">(</span>patience<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> delta<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 早停策略对象，容忍次数和容忍度</span>
    scheduler <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler<span class="token punctuation">.</span>ReduceLROnPlateau<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> factor<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> min_lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 学习率调节器</span>
    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 训练模式</span>
        train_loss <span class="token operator">=</span> <span class="token number">0.0</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 对每个batch分别进行的操作</span>
            inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 放到GPU</span>
            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 清零梯度，否则会累加</span>
            outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 前向传播</span>
            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 损失计算</span>
            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 反向传播</span>
            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 优化器迭代权值</span>
            train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
        train_loss <span class="token operator">/=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 平均损失计算</span>
        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'train_loss'</span><span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 训练记录写入TensorBoard</span>
        model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 进入验证模式</span>
        val_loss <span class="token operator">=</span> <span class="token number">0.0</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> val_loader<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 操作类似训练集，只不过不进行反向传播</span>
                inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
                targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
                outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
                loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>
                val_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
            val_loss <span class="token operator">/=</span> len<span class="token punctuation">(</span>val_loader<span class="token punctuation">)</span>
            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'val_loss'</span><span class="token punctuation">,</span> val_loss<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 写入验证记录</span>
            early_stopping<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 早停判断</span>
            scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 学习率更新</span>
            lr <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> epoch <span class="token operator">%</span> log_interval <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Epoch [{epoch}/{num_epochs}], Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Lr: {lr}'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> early_stopping<span class="token punctuation">.</span>early_stop<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Early stopping'</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 关闭记录</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如上我们先设定一个TensorBoard事件总结记录的实例，我们可以通过TensorBoard查看训练时的一些结果（不演示）</li>
<li>然后我们设定<strong>早停器</strong>和<strong>学习自动下降的调节器</strong>，前者不再赘述，后者是为了防止出现因学习率过大导致损失值长期不变（局部最优）的情况出现，适当下降学习率可以提升训练效果，<code>patience</code> 类似早停策略的patience也是容忍损失值的次数， <code>factor</code> 是下降时的比例，即新的学习率是旧的学习率的factor倍。<code>min_lr</code> 是最小的学习率。还有一些参数不在此展示</li>
<li>之后我们就可以开始训练，训练伴随着验证，<code>model.train()</code> 和 <code>model.eval()</code> 使模型分别进入训练和评估（验证）阶段，两者的操作类似，只不过验证不进行反向传播。记得判断早停。训练结束后关闭记录器</li>
</ul>
<h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 测试模型操作</span>
<span class="token keyword">def</span> <span class="token function">evaluate_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> test_loader<span class="token punctuation">,</span> scaler<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 进入测试模式（也就是验证模式）</span>
    y_true <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># 实际值</span>
    y_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># 预测值</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 和验证操作一样，没有反向传播</span>
        <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>
            inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
            y_true<span class="token punctuation">.</span>append<span class="token punctuation">(</span>targets<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            y_pred<span class="token punctuation">.</span>append<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    y_true <span class="token operator">=</span> scaler<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>y_true<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 反归一化真实结果</span>
    y_pred <span class="token operator">=</span> scaler<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 反归一化预测结果</span>

    mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 计算方差（均方根误差）MSE</span>
    mae <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 计算平均绝对误差MAE</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'方差: {mse:.4f}, 绝对误差: {mae:.4f}'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> y_true<span class="token punctuation">,</span> y_pred
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这次我们的验证集和测试集是一样的，所有测试操作其实就是和验证操作一样，只不过我们最后计算了方差和绝对误差，以便对模型的性能进行了解。</li>
</ul>
<h2 id="作图函数"><a href="#作图函数" class="headerlink" title="作图函数"></a>作图函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 画图</span>
<span class="token keyword">def</span> <span class="token function">plot_results</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>y_true<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'True1'</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>y_pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predicted1'</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>y_true<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'True2'</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>y_pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predicted2'</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>很简单的基于matplotlib的作图，分别画出两个功率的真实值和预测值曲线</li>
</ul>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 读取配置文件</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'config.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        config <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> config<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{key}: {value}'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">", "</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 设置设备</span>
    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'设备:'</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 读取CSV数据</span>
    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"file_csv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 去掉空数据</span>
    features <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>config<span class="token punctuation">[</span><span class="token string">"input_dim"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values         <span class="token comment" spellcheck="true"># 输入特征</span>
    targets <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values          <span class="token comment" spellcheck="true"># 预测特征，后两列</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>初始化及数据处理，读取config配置参数，设置GPU训练（没有就是用CPU），读取制作数据集，这里涉及pandas的df使用</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 归一化数据</span>
    scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 标准正态分布归一化</span>
    data_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>features<span class="token punctuation">,</span> targets<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># axis为1代表沿行合并输入特征和预测特征，进行归一化</span>
    features_scaled <span class="token operator">=</span> data_scaled<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># concatenate合起来的再拆开</span>
    targets_scaled <span class="token operator">=</span> data_scaled<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 划分训练集和测试集，随机划分</span>
    X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>features_scaled<span class="token punctuation">,</span> targets_scaled<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># dataset和dataloader</span>
    train_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输入特征、预测特征打包成Dataset</span>
    train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 数据集放进Loader</span>
    val_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证集也同理，但不洗牌方便看结果</span>
    val_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>上面完成了数据的基本处理，包括归一化、数据集划分、dataset和dataloader的生产</li>
<li>归一化这里我们用标准正态分布，将输入输出合并起来归一化，这样比分开归一化更好，归一化后再把数据拆开成输入输出</li>
<li>划分我们用自带的train_test_split，随机划分</li>
<li>dataset和dataloader部分：<blockquote>
<p>  创建Dataset数据集：<br>      torch.Tensor(X_train)将输入数据转换为PyTorch张量。<br>      unsqueeze(1)将输入数据张量的维度从(N, )变为(N, 1)，这是因为在PyTorch中，通常将数据视为一个张量序列，其中第一个维度是样本数量，第二个维度是特征数量。这里，我们将每个样本视为一个特征，因此需要在张量中添加一个新的维度。<br>      torch.Tensor(y_train)将标签数据转换为PyTorch张量。<br>      TensorDataset将两个张量打包成一个数据集对象，使得在训练时可以按照指定的batch_size逐批次进行训练<br>  数据集(Dataset)转换为一个可迭代的数据加载器DataLoader：<br>      batch_size是指每个批次的样本数量，即每次迭代从数据集中取出的样本数量。<br>      shuffle&#x3D;True表示每个epoch开始时是否对数据进行洗牌，即将数据集中的样本随机打乱，以使每个批次包含不同的样本，减少模型对数据的依赖性。</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 创建模型，放入GPU</span>
    model <span class="token operator">=</span> LSTMModel<span class="token punctuation">(</span>input_dim<span class="token operator">=</span>features_scaled<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hidden_dim<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'hidden_dim'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                      num_layers<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'num_layers'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 定义损失函数和优化器</span>
    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'learning_rate'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>以上是训练必要准备，首先实例化模型，定义损失函数和优化器，这种模型用Adam比较合适，输入初始学习率</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 训练模型</span>
    train_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> val_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> device<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'num_epochs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                config<span class="token punctuation">[</span><span class="token string">'log_interval'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'log_dir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 评估模型</span>
    scaler2 <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 只属于预测特征的归一化，标准正态分布归一化</span>
    targets_scaled2 <span class="token operator">=</span> scaler2<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>targets<span class="token punctuation">)</span>
    test_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 本项目，测试集和验证集其实是一样的</span>
    test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    y_true<span class="token punctuation">,</span> y_pred <span class="token operator">=</span> evaluate_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> test_loader<span class="token punctuation">,</span> scaler2<span class="token punctuation">,</span> device<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 绘制预测结果</span>
    plot_results<span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 保存模型</span>
    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lstm_model_v2_0.pt'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>最后进行模型训练，调用训练函数，传入参数。训练完进行评估（测试），这里测试我有定义一个新的归一化scaler2，因为原先是输入输出合并进行归一化，结构和这个预测的不一样，预测的只有两列结果而已。这个scaler2是用于预测结果反归一化。</li>
<li>预测结果最后画出来，进行可视化，保存模型即可。</li>
</ul>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2023/04/15/%E5%9F%BA%E4%BA%8EPytorch%E7%9A%84LSTM%E7%BD%91%E7%BB%9C%E6%97%B6%E5%BA%8F%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%8F%8A%E9%A2%84%E6%B5%8B/%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B.png" alt="训练过程"><br>如上，显示打印了配置参数，然后每个特定代就打印出训练状态，过一段时间损失变化不大，学习率下降<br><img src="/2023/04/15/%E5%9F%BA%E4%BA%8EPytorch%E7%9A%84LSTM%E7%BD%91%E7%BB%9C%E6%97%B6%E5%BA%8F%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%8F%8A%E9%A2%84%E6%B5%8B/%E6%97%A9%E5%81%9C.png" alt="早停"><br>发生了早停，输出了最终的测试误差和方差，损失值下降到0.0797<br><img src="/2023/04/15/%E5%9F%BA%E4%BA%8EPytorch%E7%9A%84LSTM%E7%BD%91%E7%BB%9C%E6%97%B6%E5%BA%8F%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%8F%8A%E9%A2%84%E6%B5%8B/%E8%AE%AD%E7%BB%83%E7%BB%93%E6%9E%9C.png" alt="训练结果"><br>结果打印出来，可以看到预测和真实值差别不大，可以调节更改画图函数的输入数据量，以更细致地观察结果</p>
<ul>
<li>改变学习率等各种参数可以进行更多的调试，训练出不同效果的模型，我这并不是最优的配置</li>
</ul>
<h1 id="🔥测试模型"><a href="#🔥测试模型" class="headerlink" title="🔥测试模型"></a>🔥测试模型</h1><ul>
<li>如果要将数据集所有数据进行预测并直观查看可以用运行下面这个文件</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> LSTM <span class="token keyword">import</span> LSTMModel
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> json

<span class="token comment" spellcheck="true"># 加载配置</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'config.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    config <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>

device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"设备："</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 读取csv数据</span>
data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"file_csv"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 排除空数据</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 定义特征和预测对象，最后两列是预测对象</span>
features <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>config<span class="token punctuation">[</span><span class="token string">"input_dim"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
target <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

<span class="token comment" spellcheck="true"># 归一化特征和预测对象</span>
scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 归一化   均值为0，标准差为1的正态分布</span>
features_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>features<span class="token punctuation">)</span>
target_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>target<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 训练参数</span>
input_dim <span class="token operator">=</span> features_scaled<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 输入参数维度，特征维度</span>
hidden_dim <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"hidden_dim"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 特征隐藏层神经元</span>
num_layers <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"num_layers"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># LSTM模型中LSTM层数的数量</span>
output_dim <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 输出数据的维度，即LSTM模型的输出特征（预测对象）数量</span>

<span class="token comment" spellcheck="true"># 实例化LSTM模型</span>
model <span class="token operator">=</span> LSTMModel<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 放到GPU</span>

model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'lstm_model_v2_0.pt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 预测测试集</span>
test_inputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>autograd<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>features_scaled<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> input_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 测试集张量</span>
predicted_targets <span class="token operator">=</span> model<span class="token punctuation">(</span>test_inputs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对目标模型走一次前向传播，即预测</span>
predicted_targets <span class="token operator">=</span> scaler<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>predicted_targets<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 反归一化得到真实大小的数据</span>

<span class="token comment" spellcheck="true"># 画图，部分区间</span>
begin <span class="token operator">=</span> <span class="token number">34000</span>
end <span class="token operator">=</span> <span class="token number">34096</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Actual1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 两个输出分别画出来</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicted_targets<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predicted1'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Actual2'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicted_targets<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predicted2'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicted_targets<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Loss1'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicted_targets<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Loss2'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>操作很简单，初始化一些配置，加载训练过的模型，然后把这个数据集丢进去进行一次前向传播得到数据，反归一化得到结果，绘图（设置好begin和end就可以观察不同区间点）。<br><img src="/2023/04/15/%E5%9F%BA%E4%BA%8EPytorch%E7%9A%84LSTM%E7%BD%91%E7%BB%9C%E6%97%B6%E5%BA%8F%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%8F%8A%E9%A2%84%E6%B5%8B/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果"></li>
<li>如图，红色调的两条预测曲线和蓝绿色两条实际曲线很相近，趋势上得到比较好的结果，而且没有过拟合的效果。紫色的是两条误差曲线</li>
</ul>
<h1 id="🔥预测数据"><a href="#🔥预测数据" class="headerlink" title="🔥预测数据"></a>🔥预测数据</h1><ul>
<li>跑下面文件即可预测数据文件空缺功率的日期的全部数据</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv
<span class="token keyword">import</span> json

<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> torch
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler

<span class="token keyword">from</span> LSTM <span class="token keyword">import</span> LSTMModel

<span class="token comment" spellcheck="true"># 加载配置</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'config.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    config <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>

device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"设备："</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span>

data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"file_csv"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 找到日期最靠后的数据对应的日期，即为预测日期</span>
dates <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'DATATIME'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'%d/%m/%Y %H:%M:%S'</span><span class="token punctuation">)</span>
latest_date <span class="token operator">=</span> dates<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%d/%m/%Y'</span><span class="token punctuation">)</span>
latest_date <span class="token operator">=</span> latest_date<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> latest_date<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 个位数的日期不带0</span>
    latest_date<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> latest_date<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> latest_date<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 个位数的月份不带0</span>
    latest_date<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> latest_date<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
latest_date <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>latest_date<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'被预测日期为：'</span><span class="token punctuation">,</span> latest_date<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出结果</span>

data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 排除空数据的数据用于归一化</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 除去第一列，即时间列</span>

<span class="token comment" spellcheck="true"># 空数据作为预测</span>
predict_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">"file_csv"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
predict_data <span class="token operator">=</span> predict_data<span class="token punctuation">[</span><span class="token operator">~</span>predict_data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span>
predict_data <span class="token operator">=</span> predict_data<span class="token punctuation">[</span>predict_data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>latest_date<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 预测最后日期</span>
predict_data <span class="token operator">=</span> predict_data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span>predict_data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'预测数量：{len(predict_data)}'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 定义特征和预测对象，最后两列是预测对象</span>
features <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>config<span class="token punctuation">[</span><span class="token string">"input_dim"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
target <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
predicts <span class="token operator">=</span> predict_data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>config<span class="token punctuation">[</span><span class="token string">"input_dim"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

<span class="token comment" spellcheck="true"># 归一化特征和预测对象</span>
scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 归一化   均值为0，标准差为1的正态分布</span>
features_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>features<span class="token punctuation">)</span>
predicts_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>predicts<span class="token punctuation">)</span>
target_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>target<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 训练参数</span>
input_dim <span class="token operator">=</span> features_scaled<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 输入参数维度，特征维度</span>
hidden_dim <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"hidden_dim"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 特征隐藏层神经元</span>
num_layers <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"num_layers"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># LSTM模型中LSTM层数的数量</span>
output_dim <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 输出数据的维度，即LSTM模型的输出特征（预测对象）数量</span>

<span class="token comment" spellcheck="true"># 实例化LSTM模型</span>
model <span class="token operator">=</span> LSTMModel<span class="token punctuation">(</span>input_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> output_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 放到GPU</span>

model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'lstm_model_v2_0.pt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 预测集</span>
predict_inputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>autograd<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>predicts_scaled<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> input_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 预测集张量</span>
predicted_targets <span class="token operator">=</span> model<span class="token punctuation">(</span>predict_inputs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对目标模型走一次前向传播，即预测</span>
predicted_targets <span class="token operator">=</span> scaler<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>predicted_targets<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 反归一化得到真实大小的数据</span>

<span class="token comment" spellcheck="true"># 输出csv文件</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'output/output.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>predicted_targets<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 画图，部分区间</span>
begin <span class="token operator">=</span> <span class="token number">0</span>
end <span class="token operator">=</span> len<span class="token punctuation">(</span>predicted_targets<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicted_targets<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predicted1'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicted_targets<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Predicted2'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>和测试类似，只不过预测数据是没有实际值的，预测前我们分析csv数据找到日期最后的数据，把这些数据传进model进行前向传播，再反归一化就是预测结果，我们作图并且存入新的csv文件，结果如下：<br><img src="/2023/04/15/%E5%9F%BA%E4%BA%8EPytorch%E7%9A%84LSTM%E7%BD%91%E7%BB%9C%E6%97%B6%E5%BA%8F%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%8F%8A%E9%A2%84%E6%B5%8B/%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C.png" alt="预测结果"></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>项目</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LSTM</tag>
        <tag>Pytorch</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫——b站笔记图文</title>
    <url>/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/</url>
    <content><![CDATA[<ul>
<li>通过 Python requests 库向ｂ站的任意笔记获取请求，得到 html 界面后用 BS 进行解析，获取图文信息。同时图片可以选择下载或者单纯地标注在对应位置，支持md格式的引用。<span id="more"></span></li>
</ul>
<h1 id="初始操作"><a href="#初始操作" class="headerlink" title="初始操作"></a>初始操作</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.44'</span>
<span class="token punctuation">}</span>
url <span class="token operator">=</span> <span class="token string">''</span>      <span class="token comment" spellcheck="true"># 这里填写需要爬取的文章的链接</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="元素结构"><a href="#元素结构" class="headerlink" title="元素结构"></a>元素结构</h1><p><img src="/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/%E5%86%85%E5%AE%B9%E6%9F%A5%E6%89%BE.png" alt="内容查找"></p>
<ul>
<li>如上图，正文内容的 class 为 opus-module-content<br><img src="/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/%E5%AD%90%E5%85%83%E7%B4%A0%E7%BB%93%E6%9E%84.png" alt="子元素结构"></li>
<li>同时，发现图片元素 img 在 div 下，文本在 p 下，即opus-module-content 包含 div 和 p，div 包含图片。</li>
</ul>
<h1 id="主体代码"><a href="#主体代码" class="headerlink" title="主体代码"></a>主体代码</h1><ul>
<li>初步解析，获取正文 html</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 BeautifulSoup 解析 HTML 标签</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 查找指定的 HTML 标签</span>
content <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"opus-module-content"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>接下来下载图片，封装成函数，传入图片元素和下载的文件保存的名称</li>
<li>注意，这里打印出 img_url 会发现是缺少 .webp 的，我们发现实际上img 的 src 在jpg后面带有这个后缀，需要补充成完整地址<br><img src="/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/%E5%9B%BE%E7%89%87src.png" alt="图片src"></li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">downloadImg</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 下载照片 (图片元素，文件取名）</span>
    <span class="token keyword">global</span> url<span class="token punctuation">,</span> headers
    img_url <span class="token operator">=</span> img<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取src属性（图片网络路径）</span>

    img_url <span class="token operator">=</span> f<span class="token string">'https:{img_url}.webp'</span>       <span class="token comment" spellcheck="true"># 完整的图片地址</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 发送HTTP请求并获取响应</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 请求图片</span>
    <span class="token comment" spellcheck="true"># 构造文件名</span>
    <span class="token comment" spellcheck="true"># filename = os.path.basename(img_url)</span>
    <span class="token comment" spellcheck="true"># 将图片保存到本地</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">'imgs/{name}.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 存入imgs文件夹</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>接下来，获取数据主函数，输入的是模式和下载与否，模式为1就获取图片信息，<strong>在此情况下</strong>下载为 true 就会把图片下载下来，否则只会在相应位置进行标注</li>
<li>其他情况下，只会把文本写下来</li>
<li>标注图片包括普通的分割线标识，和md引入，可用于hexo博客编写</li>
<li>请求到的数据结构要通过 print 逐步判断，而非一蹴而就</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>module<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 获取笔记数据，是否获取图片在文章的位置，以及下载图片与否</span>
    <span class="token keyword">global</span> content
    imgnum <span class="token operator">=</span> <span class="token number">0</span>          <span class="token comment" spellcheck="true"># 图片数量</span>
    <span class="token comment" spellcheck="true"># 图文获取，在图片处打上标记，可下载图片</span>
    <span class="token keyword">if</span> module <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'output.md'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token keyword">for</span> con <span class="token keyword">in</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> con<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'div'</span> <span class="token operator">and</span> con<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'opus-para-pic'</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 是图片</span>
                    imgnum <span class="token operator">=</span> imgnum <span class="token operator">+</span> <span class="token number">1</span>                 <span class="token comment" spellcheck="true"># 第n个图片</span>
                    img <span class="token operator">=</span> con<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> download <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                        downloadImg<span class="token punctuation">(</span>img<span class="token punctuation">,</span> imgnum<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 下载照片</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'---------图片{imgnum}--------\n'</span><span class="token punctuation">)</span>
                    <span class="token comment" spellcheck="true"># f.write(f'--------图片{imgnum}---------\n')</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">'![]( {imgnum}.jpg)\n'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># md格式引入</span>
                <span class="token keyword">elif</span> con<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'p'</span><span class="token punctuation">:</span>               <span class="token comment" spellcheck="true"># 是文本</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
                    <span class="token keyword">try</span><span class="token punctuation">:</span>
                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
                    <span class="token keyword">except</span><span class="token punctuation">:</span>
                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 只要文本</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        words <span class="token operator">=</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'output.md'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word<span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
                <span class="token keyword">except</span><span class="token punctuation">:</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>完整代码</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.44'</span>
<span class="token punctuation">}</span>
url <span class="token operator">=</span> <span class="token string">''</span>      <span class="token comment" spellcheck="true"># 需要爬取的文章</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 使用 BeautifulSoup 解析 HTML 标签</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 查找指定的 HTML 标签</span>
content <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"opus-module-content"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">downloadImg</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 下载照片 (图片元素，文件取名）</span>
    <span class="token keyword">global</span> url<span class="token punctuation">,</span> headers
    img_url <span class="token operator">=</span> img<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取src属性（图片网络路径）</span>

    img_url <span class="token operator">=</span> f<span class="token string">'https:{img_url}.webp'</span>       <span class="token comment" spellcheck="true"># 完整的图片地址</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 发送HTTP请求并获取响应</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 请求图片</span>
    <span class="token comment" spellcheck="true"># 构造文件名</span>
    <span class="token comment" spellcheck="true"># filename = os.path.basename(img_url)</span>
    <span class="token comment" spellcheck="true"># 将图片保存到本地</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">'imgs/{name}.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 存入imgs文件夹</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>module<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 获取笔记数据，是否获取图片在文章的位置，以及下载图片与否</span>
    <span class="token keyword">global</span> content
    imgnum <span class="token operator">=</span> <span class="token number">0</span>          <span class="token comment" spellcheck="true"># 图片数量</span>
    <span class="token comment" spellcheck="true"># 图文获取，在图片处打上标记，可下载图片</span>
    <span class="token keyword">if</span> module <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'output.md'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token keyword">for</span> con <span class="token keyword">in</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> con<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'div'</span> <span class="token operator">and</span> con<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'opus-para-pic'</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 是图片</span>
                    imgnum <span class="token operator">=</span> imgnum <span class="token operator">+</span> <span class="token number">1</span>                 <span class="token comment" spellcheck="true"># 第n个图片</span>
                    img <span class="token operator">=</span> con<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    <span class="token keyword">if</span> download <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                        downloadImg<span class="token punctuation">(</span>img<span class="token punctuation">,</span> imgnum<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 下载照片</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'---------图片{imgnum}--------\n'</span><span class="token punctuation">)</span>
                    <span class="token comment" spellcheck="true"># f.write(f'--------图片{imgnum}---------\n')</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">'![]( {imgnum}.jpg)\n'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># md格式引入</span>
                <span class="token keyword">elif</span> con<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'p'</span><span class="token punctuation">:</span>               <span class="token comment" spellcheck="true"># 是文本</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
                    <span class="token keyword">try</span><span class="token punctuation">:</span>
                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
                    <span class="token keyword">except</span><span class="token punctuation">:</span>
                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 只要文本</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        words <span class="token operator">=</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'output.md'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word<span class="token punctuation">.</span>string<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
                <span class="token keyword">except</span><span class="token punctuation">:</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

getData<span class="token punctuation">(</span>module<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><ul>
<li>运行代码，控制台打印出文本结构，md文件也写入文本，imgs文件夹下一张张下载下了图片<br><img src="/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%BB%93%E6%9E%9C.png" alt="控制台结果"><br><img src="/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/%E6%96%87%E6%9C%AC%E8%BE%93%E5%87%BA.png" alt="文本输出"><br><img src="/2023/03/31/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94b%E7%AB%99%E7%AC%94%E8%AE%B0%E5%9B%BE%E6%96%87/%E5%9B%BE%E7%89%87%E8%BE%93%E5%87%BA.png" alt="图片输出"></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Origin的入门</title>
    <url>/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><strong>视频链接：<a href="https://www.bilibili.com/video/BV1UR4y157aF/?vd_source=ffdcdc507fea7a7304037792491b5397">https://www.bilibili.com/video/BV1UR4y157aF/?vd_source=ffdcdc507fea7a7304037792491b5397</a></strong></p>
<h1 id="🔥03-软件窗口基本介绍"><a href="#🔥03-软件窗口基本介绍" class="headerlink" title="🔥03 软件窗口基本介绍"></a>🔥03 软件窗口基本介绍</h1><p>ctrl+z撤销</p>
<span id="more"></span>
<h1 id="🔥04-项目管理器和对象管理器"><a href="#🔥04-项目管理器和对象管理器" class="headerlink" title="🔥04 项目管理器和对象管理器"></a>🔥04 项目管理器和对象管理器</h1><p>文件合并-将文件导入于同一文件夹下<br>粘贴图、表-复制后，右击创建副本<br>项目拖拽入文件夹<br>两个图合并-保证行列均为1</p>
<h1 id="🔥13-二维图形绘制简单举例"><a href="#🔥13-二维图形绘制简单举例" class="headerlink" title="🔥13 二维图形绘制简单举例"></a>🔥13 二维图形绘制简单举例</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/1.jpg"><br>双击数据点，弹出的窗口左边点第二行（图层属性），在“显示，速度”数据里面也可以调-剪裁<br>双击刚才点击空白处出来的蓝色边框线，不要点蓝色点，在弹出的窗口点击“显示&#x2F;速度”，取消勾选裁剪图层框架外数据<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/2.jpg"><br>ctrl 选中一个点或标签进行删改</p>
<h1 id="🔥14-画布属性设置"><a href="#🔥14-画布属性设置" class="headerlink" title="🔥14 画布属性设置"></a>🔥14 画布属性设置</h1><p>断点：选中y坐标轴-断点-选择合适的断点数-可以自定义断点位置<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/3.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/4.jpg"><br>虚线变实线：双击左上数字1，选择所在数据组添加折线图即可</p>
<p>缺失数据：默认缺失值，跨缺失数据连成直线</p>
<h1 id="🔥15-图层属性设置"><a href="#🔥15-图层属性设置" class="headerlink" title="🔥15 图层属性设置"></a>🔥15 图层属性设置</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/5.jpg"><br>关联后左100紧紧相连</p>
<h1 id="🔥16-图形的偏移"><a href="#🔥16-图形的偏移" class="headerlink" title="🔥16 图形的偏移"></a>🔥16 图形的偏移</h1><p>偏移：组内对象偏移<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/6.jpg"><br>第一个柱子（非绝对偏移），源数据+0<br>2，  0+1<br>3 0+1+2<br>之后循环<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/7.jpg"><br>自动：值越大 线间距离越大<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/8.jpg"><br>非线性刻度（log，ln 指数等）勾选保持……比例<br>单独：组内才可以使用<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/9.jpg"><br>点击灰框1  ，选择数据，选择成组才1可使用<br>注释：分组-列1标签注释-偏移样式选择（自动？）-选择队使用自动的应用<br>累积……-同理</p>
<h1 id="🔥17-组的相关设置"><a href="#🔥17-组的相关设置" class="headerlink" title="🔥17 组的相关设置"></a>🔥17 组的相关设置</h1><p>绘图属性-组-任何增量选无代表选第一个<br>-独立-各条线内容线条可单独设置<br>从属时-要更改一个-选择线条样式-对应增量选择逐个<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/10.jpg"></p>
<p>子组-首先分组不选无-分组显示不同线条样式，可根据注释，自定义的设置<br>符号大小-逐个-1 2 3（表示以字号每条线以1 2 3字号循环，如第一条1,二 2）<br>9（+2）&#x3D;&#x3D;》一：1，二：1+2</p>
<h1 id="🔥18-自定义颜色"><a href="#🔥18-自定义颜色" class="headerlink" title="🔥18  自定义颜色"></a>🔥18  自定义颜色</h1><p>创建颜色-自定义颜色<br>删除自定义颜色：帮助-打开文件夹-选择用户文件夹-thermes-graph-选择需要删除的<br>百度下载官方的颜色（b站origin官方中搜配色-论文配色指南，有链接）-graph内容复制</p>
<p>到对应位置&#x2F;还可选择从文件夹导入选择<br>然后-绘图属性中-选择颜色-更多-选择复制</p>
<h1 id="🔥19-线条样式设置"><a href="#🔥19-线条样式设置" class="headerlink" title="🔥19 线条样式设置"></a>🔥19 线条样式设置</h1><p>双击线-绘图属性<br>线条-b-样条可能不过点<br>每段直线不同：样式选择”类别“等去定义巡回显示<br>符号点线颜色不一样：符号颜色不选自动<br>线条-颜色-索引类别第一个点会消失（选择的数据带0）<br>颜色映射：一个区间一个颜色-修改次级别映射可以使颜色过渡自然（选择时会多出一个颜色映射选项卡）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/11.jpg"></p>
<p>绘出图线颜色过渡自然-插值，增加y值<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/12.jpg"><br>颜色映射：链接到调色板-颜色不可以单独修改<br>如果桌面上有两张图：选一张复制，可以复制到另一个<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/13.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/14.jpg"><br>y正负：一个值上为+，下为-<br>设置值：双击轴-网格-附件线-设置值<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/15.jpg"><br>y-颜色映射&#x3D;&#x3D;颜色映射-y列（y轴值）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/16.jpg"><br>点击级别-查找max，min即可自动</p>
<h1 id="🔥20-填充颜色设置"><a href="#🔥20-填充颜色设置" class="headerlink" title="🔥20 填充颜色设置"></a>🔥20 填充颜色设置</h1><p>填充列值：菜单栏-列-填充列-一组数字<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/17.jpg"><br>修改数据<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/18.jpg"><br>选中所在数据线-填充以下区域-启用-图案-修改颜色</p>
<h1 id="🔥21-插值操作"><a href="#🔥21-插值操作" class="headerlink" title="🔥21 插值操作"></a>🔥21 插值操作</h1><p>菜单栏快捷分析-插值-内插外推<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/19.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/20.jpg"><br>点数&#x3D;19<em>10+1<br>（20行数据-1）</em>相邻两点间插10个数（包含初始点&#x3D;1个初始点+9个新建点）+1<br>之后点击确定<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/21.jpg"><br>单击向右箭头-扩展到……曲线-然后再单击右箭头-新建输出<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/22.jpg"><br>三次b样条-可能不过点—》调整平滑因子尽量过（平滑因子越小，曲线弯曲越不明显）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/23.jpg"><br>另一种方法-分析-数字-插值、外推<br>补全数字<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/24.jpg"><br>插值后选择数据-再进行绘图颜色映射-会有过渡<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/25.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/26.jpg"><br>过渡不够自然-修改次级别数增加</p>
<h1 id="🔥22-垂直线和间隔数据点作图"><a href="#🔥22-垂直线和间隔数据点作图" class="headerlink" title="🔥22 垂直线和间隔数据点作图"></a>🔥22 垂直线和间隔数据点作图</h1><p>双击图形点-绘图属性-垂直线-<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/27.jpg"><br>指定点 1 2（空格隔开）</p>
<h1 id="🔥23-标签样式设置"><a href="#🔥23-标签样式设置" class="headerlink" title="🔥23 标签样式设置"></a>🔥23 标签样式设置</h1><p>双击图形-标签<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/28.jpg"><br>数值显示格式 .2&#x3D;&#x3D;保留两位小数<br>.2*&#x3D;&#x3D;保留两位小数+若末位为0，则删除（1.00,1.10&#x3D;&#x3D;》1 ，1）<br><em>3</em> ：保留三位有效数字<br><em>“pi”：将数值转换为pi的形式<br>.2</em>“pi”：pi形式保留两位数字<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/29.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/30.jpg"><br>清空数值显示格式&#x3D;&#x3D;变为未修改前的<br>仅在指定点显示：显示最末数字&#x3D;0&#x2F;所需数字<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/31.jpg"><br>水平偏移&#x2F;垂直为正&#x3D;&#x3D;》右，上<br>指引线：值越大线越不明显（长度）<br>单独移动：按ctrl+点击所要移动的标签拖拽<br>一起：不用按ctrl<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/32.jpg"><br>标签样式-自定义<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/33.jpg"><br>book2……&#x3D;&#x3D;矩阵工作表使用，普通无法生效<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/34.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/35.jpg"><br>除此之外，标签还可以使用项目管理器-文本工具-输入<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/36.jpg"></p>
<h1 id="🔥24-符号点样式设置"><a href="#🔥24-符号点样式设置" class="headerlink" title="🔥24 符号点样式设置"></a>🔥24 符号点样式设置</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/37.jpg"><br>圆圈没有完全挡住后方线条：透明度&#x3D;0，取消勾选跟随线条透明度<br>重叠点偏移<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/38.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/39.jpg"><br>修改每条线的符号：组-符号类型-逐个<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/40.jpg"><br>气泡矩阵图-帮助-学习中心-搜索<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/41.jpg"><br>圈的大小对应c列的数值（a，b表示位置）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/42.jpg"><br>堆叠数据（使用于气泡图）：选中数据-工作表-堆叠列<br>注：x,y最好设置为类别列&#x3D;&#x3D;用于指示位置的两列</p>
<h1 id="🔥25-坐标轴设置介绍"><a href="#🔥25-坐标轴设置介绍" class="headerlink" title="🔥25 坐标轴设置介绍"></a>🔥25 坐标轴设置介绍</h1><p>设置轴位置<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/43.jpg"><br>双击轴-轴线与刻度线-<br>修改x轴位置（变成上图）：<br>网格-垂直-附加线-y&#x3D;<br>轴线与刻度线-修改<br>刻度-垂直-起始（修改y轴从那开始标度）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/44.jpg"><br>附加线-对面：类似边框效果<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/45.jpg"></p>
<h1 id="🔥26-坐标轴刻度设置"><a href="#🔥26-坐标轴刻度设置" class="headerlink" title="🔥26 坐标轴刻度设置"></a>🔥26 坐标轴刻度设置</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/46.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/47.jpg"><br>绿色1&#x3D;&#x3D;》图层1<br>浮动工具栏不剪裁<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/48.jpg"><br>显示x轴初始值：特殊刻度线-下轴-轴始端-显示<br>锚点刻度：坐标轴起始位置与坐标不一样</p>
<h1 id="🔥27-在图上添加参照线"><a href="#🔥27-在图上添加参照线" class="headerlink" title="🔥27 在图上添加参照线"></a>🔥27 在图上添加参照线</h1><p>双击轴-参照线<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/49.jpg"><br>输入对应的值-交替填充<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/50.jpg"><br>右下细节-修改填充颜色<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/51.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/52.jpg"><br>加均值</p>
<h1 id="🔥28-刻度标签设置"><a href="#🔥28-刻度标签设置" class="headerlink" title="🔥28 刻度标签设置"></a>🔥28 刻度标签设置</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/53.jpg"><br>小数位数为1时，希望0.0&#x3D;&#x3D;》1：菜单栏设置-选项-坐标轴-选择合适的<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/54.jpg"><br>除以因子：当前值均除以一个值<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/55.jpg"><br>前后缀<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/56.jpg"><br>若不勾选符号，则坐标轴0两边均为正<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/57.jpg"><br>x坐标轴显示文本：<br>1.刻度-水平-主刻度-类型-自定义-对应y值所在列<br>2.刻度线标签-类型-来自数据的文本-数据集名称-所对应的文本<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/58.jpg"><br>单独修改某一标签：之前选择的数据&lt;&#x3D;20</p>
<h1 id="🔥29-表格式刻度标签"><a href="#🔥29-表格式刻度标签" class="headerlink" title="🔥29 表格式刻度标签"></a>🔥29 表格式刻度标签</h1><p>a.b行均为标签行：建议修成文本&#x3D;&#x3D;》选中两列-右击-属性-格式-文本<br>双击轴-刻度线标签-表格式…-启用-2行<br>选择下2-数据集修改为对应<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/59.jpg"><br>标签-选择2,3（使A位于点中央）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/60.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/61.jpg"><br>间距-子集-按大小-分组显示</p>
<h1 id="🔥30-坐标轴标题设置"><a href="#🔥30-坐标轴标题设置" class="headerlink" title="🔥30 坐标轴标题设置"></a>🔥30 坐标轴标题设置</h1><p>轴标题下标：选中要下标的1-<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/62.jpg"></p>
<p>x轴：选择数据值-右击-单元格格式-富文本-选择要修改数值-设置下标<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/63.jpg"><br>复制图片即可显示然后添加</p>
<h1 id="🔥31-断点设置"><a href="#🔥31-断点设置" class="headerlink" title="🔥31 断点设置"></a>🔥31 断点设置</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/64.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/65.jpg"><br>断点前的刻度内容在刻度修改<br>后：断点-轴点后……<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/66.jpg"><br>选择轴须<br>直方图<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/67.jpg"></p>
<h1 id="🔥33-关联坐标轴"><a href="#🔥33-关联坐标轴" class="headerlink" title="🔥33 关联坐标轴"></a>🔥33 关联坐标轴</h1><p>上面直方图绘制：<br>绘制散点图-绘制x，y值的直方图（绘图选择-直方图）-菜单栏图-交换xy轴<br>拼合-对象管理器左侧-合并<br>如果要组合三个图-关联坐标轴-选择要关联的图（如散点图上面的直方图）-大小-单位-关联图层比例-宽100（两图等宽），左&#x3D;0完全与y轴对齐<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/68.jpg"><br>修改右面的（旋转）-关联……-关联到-自定义-x1-y1,x2-y2-图层面积与未旋转值相反<br>勾选-拖动……副也会</p>
<p>散点图<br>选择对象管理器左侧的添加上轴是在一个新图层上<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/69.jpg"><br>在图层2添加内容：点击图层2-添加对应数据<br>需要注意x，y对应<br>对-右-调整刻度-会使两个y轴发生变化<br>只一个：添加新图层<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/70.jpg"><br>右键调整：图层至页面–图形缩小到白色区域<br>页面至图层-页面放大到图形那么大<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/71.jpg"></p>
<p>嵌入图形：可以对-左–对原有图形局部放大：双击坐标轴-刻度-修改起始<br>cdl-图-固定缩放因子-设为1（看到&#x3D;&#x3D;实际字号）<br>柱状图<br>不必新建图层-点图层1-选中数据-若被覆盖-选中刚刚的数据-成组<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/72.jpg"><br>还可选中数据-绘图-多面板多-双y<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/73.jpg"><br>左下切换图类型</p>
<h1 id="🔥35-图层合并"><a href="#🔥35-图层合并" class="headerlink" title="🔥35 图层合并"></a>🔥35 图层合并</h1><p>右键-批量绘图<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/74.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/75.jpg"><br>添加所有图<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/76.jpg"><br>关联原图-234关联1<br>间距&#x3D;&#x3D;整体图距页边的值<br>标签-自定义&#x3D;图n$&#x3D;&#x3D;自动索引-图1，图2<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/77.jpg"><br>有嵌入图一定要勾选-排列设置-将每个作为一个整体</p>
<h1 id="🔥36-合并后图形的二次操作"><a href="#🔥36-合并后图形的二次操作" class="headerlink" title="🔥36 合并后图形的二次操作"></a>🔥36 合并后图形的二次操作</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/78.jpg"><br>存在间隙：图-排列图层-不含嵌入图-水平，垂直&#x3D;0<br>图-图层管理-排列图层-0<br>大小位置-交换-选择要交换的图层-重新排序<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/79.jpg"><br>点确定应用·<br>图-图层管理-全选内容-用统一尺度设置……（所有图具有相同的长&#x2F;宽）<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/80.jpg"><br>有嵌入图：图-图层管理-关联+重新定位-应用<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/81.jpg"><br>必须勾选：排列图层-将视为1组-保持宽高比-显示轴框-应用</p>
<p>对-左有对齐</p>
<h1 id="🔥37-图例"><a href="#🔥37-图例" class="headerlink" title="🔥37 图例"></a>🔥37 图例</h1><p>右击图例-属性<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/82.jpg"><br>重构图例添加图例（重构最原始的）<br>单独加间距：ctrl+拉图例<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/83.jpg"><br>可以选中内容单独设置<br>N：删除刚刚的设置-一次一个</p>
<h1 id="🔥38-颜色标尺"><a href="#🔥38-颜色标尺" class="headerlink" title="🔥38 颜色标尺"></a>🔥38 颜色标尺</h1><p>首先要有颜色映射：点数据点-线条-颜色-按点-映射<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/84.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/85.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/86.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/87.jpg"><br>右击-属性-修改<br>有范围时-属性-布局-布局-分离布局<br>设置每个色块范围：<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/88.jpg"><br>颜色映射中修改</p>
<h1 id="🔥39-气泡标尺"><a href="#🔥39-气泡标尺" class="headerlink" title="🔥39 气泡标尺"></a>🔥39 气泡标尺</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/89.jpg"></p>
<h1 id="🔥40-显著性标记"><a href="#🔥40-显著性标记" class="headerlink" title="🔥40 显著性标记"></a>🔥40 显著性标记</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/90.jpg"><br>paired-comparisonplot<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/91.jpg"><br>重新计算：手动<br>data数据:rav<br>若作图，无显著性关系–图无变化<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/92.jpg"><br>索引数据-分组<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/93.jpg"><br>修改箱型<br>无app：<a href="http://t.csdn.cn/OMDPf">http://t.csdn.cn/OMDPf</a></p>
<h1 id="🔥41-刻度标尺"><a href="#🔥41-刻度标尺" class="headerlink" title="🔥41 刻度标尺"></a>🔥41 刻度标尺</h1><p>项目-左-添加xy标尺&#x2F;插入-xy定标器</p>
<h1 id="🔥42-添加日期和时间"><a href="#🔥42-添加日期和时间" class="headerlink" title="🔥42 添加日期和时间"></a>🔥42 添加日期和时间</h1><p>项目-日期时间-多个时间-复制粘贴，仅点击日期和时间只会刷新</p>
<h1 id="🔥43-插入公式"><a href="#🔥43-插入公式" class="headerlink" title="🔥43 插入公式"></a>🔥43 插入公式</h1><h1 id="🔥44-插入特殊字符"><a href="#🔥44-插入特殊字符" class="headerlink" title="🔥44 插入特殊字符"></a>🔥44 插入特殊字符</h1><p>图-文本工具-右击-符号&#x2F;字符表-可输入编码搜索<br>在工作表双击-编辑模式-右击-字符<br>工作表不能修改上下标，一些符号字体不能修改-右击-设置长名称样式-修改为富文本-修改&#x2F;设置数据样式-富文本</p>
<h1 id="🔥45-图上距离测量"><a href="#🔥45-图上距离测量" class="headerlink" title="🔥45 图上距离测量"></a>🔥45 图上距离测量</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/94.jpg"><br>箭头工具-距离标注-点击拖动<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/95.jpg"><br>求图中两点距离<br>Image Area<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/96.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/97.jpg"><br>选择比例尺0输入实际值，单位<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/98.jpg"><br>新绘图选择直线工具<br>shift+拖动<br>选中直线<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/99.jpg"></p>
<h1 id="🔥46-散点图"><a href="#🔥46-散点图" class="headerlink" title="🔥46 散点图"></a>🔥46 散点图</h1><p>导入数据后需要对数据列值设置<br>误差设置为误差列<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/100.jpg"><br>列值决定符号大小<br>点击符号-绘图属性-符号-大小-选中值-缩放因子<br>边缘颜色-索引-按点-数据选择y大小<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/101.jpg"><br>标签形式-选择y标签列<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/102.jpg"></p>
<h1 id="🔥47-点线图"><a href="#🔥47-点线图" class="headerlink" title="🔥47 点线图"></a>🔥47 点线图</h1><p>先设置各列属于什么，xyyy，xyxy<br> 组-改单独-修改各线颜色-</p>
<h1 id="🔥48-曲线图局部颜色设置"><a href="#🔥48-曲线图局部颜色设置" class="headerlink" title="🔥48 曲线图局部颜色设置"></a>🔥48 曲线图局部颜色设置</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/103.jpg"><br>给耳朵上色<br>图形窗口-快速分析-集群分析-<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/104.jpg"><br>填充颜色+形状<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/105.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/106.jpg"></p>
<p>创建类别<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/107.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/108.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/109.jpg"><br>数据高亮显示-选中节点-另开一列（如c列）标记内容（c列，变色为一值，其他另一值）<br>点击数据点-颜色-按点-c列<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/110.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/111.jpg"><br>还可以指定显示范围<br>此外还可以通过直接确定节点来改变特定线段颜色</p>
<h1 id="🔥49-曲线连接-拟合"><a href="#🔥49-曲线连接-拟合" class="headerlink" title="🔥49 曲线连接+拟合"></a>🔥49 曲线连接+拟合</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/112.jpg"><br>报错：没有办法进行曲线绘制–》只可以使用拟合<br>app-simple fit-图窗口-官网注册邮箱即可下载后托如app窗口即可<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/113.jpg"></p>
<h1 id="🔥50-Y偏移堆叠线图"><a href="#🔥50-Y偏移堆叠线图" class="headerlink" title="🔥50 Y偏移堆叠线图"></a>🔥50 Y偏移堆叠线图</h1><p>把多条线分开-保证所有线在一个组里（成组）-堆叠-自动-重新标度<br>单独调整位置-堆叠-单独-选线拖动<br>将数据线分组：<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/114.jpg"><br>组-分组-按大小-堆叠-自动-勾选 对使用常量，自动……-修改间距<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/115.jpg"></p>
<p>解散成组-选择对象管理器-g1右击-解散</p>
<h1 id="🔥51-颜色填充"><a href="#🔥51-颜色填充" class="headerlink" title="🔥51 颜色填充"></a>🔥51 颜色填充</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/116.jpg"><br>线条-填充-启用-填充到数据图单色<br>颜色在图案修改<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/117.jpg"><br>填充到底部-基线-自动，下轴<br>填上部：在上轴添加一条线-下轴填充&#x2F;再添加同样的一条线覆盖<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/118.jpg"><br>双击添加的线-重新设置填充<br>一条线可设置一个填充</p>
<h1 id="🔥52-双Y轴点线图"><a href="#🔥52-双Y轴点线图" class="headerlink" title="🔥52 双Y轴点线图"></a>🔥52 双Y轴点线图</h1><p>再添加y轴-对<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/119.jpg"><br>移动后找不到图：新加数据范围不满足要求<br>调整刻度-对象（在需要显示的图层2中选择）<br>右击图例-属性设置图层图例<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/120.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/121.jpg"><br>取消次刻度-x坐标轴-刻度-次刻度-0&#x2F;轴线刻度线-次刻度-无<br>2.模板<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/122.jpg"><br>图例孔隙-图例属性-符号-间隙-0<br>符号点和线条存在空隙，显示不完全-图层属性-显示&#x2F;速度-不剪裁（两个图都要设置）<br>轴压在了数据点之上：双击图形-图层属性-显示&#x2F;速度-数据在坐标轴前（两个图都要设置）</p>
<h1 id="🔥53-带分析结果的散点图"><a href="#🔥53-带分析结果的散点图" class="headerlink" title="🔥53 带分析结果的散点图"></a>🔥53 带分析结果的散点图</h1><p>散点图-<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/123.jpg"><br>轴线刻度线设置-箭头<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/124.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/125.jpg"><br>灰色区域：双击y轴-参照线<br>上填充：水平-细节-追加-数值类型-统计-均值+标准差-自动格式取消-图案-填充-均值线（meanplot），取消勾选显示就没有线了，只有填充颜色<br>红线显示：追加-数值类型-统计-均值- –标签显示-标签格式–值-终点&#x2F;自定义-文本输入</p>
<ul>
<li>-均值-标准差-填充-图案-均值-标准差（mean-std），还可取消勾选显示<br>只选一个数据点-ctrl单击-修改</li>
</ul>
<h1 id="🔥54-重叠数据点的均值柱状图"><a href="#🔥54-重叠数据点的均值柱状图" class="headerlink" title="🔥54 重叠数据点的均值柱状图"></a>🔥54 重叠数据点的均值柱状图</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/126.jpg"><br>长名称–x值<br>下方为y值<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/127.jpg"><br>绘图-统计图-条形图+点重叠<br>双击柱子-修改<br>点的排布：箱线图-数据-排列点-随机-点的宽度-自动</p>
<h1 id="🔥55-普通柱状图"><a href="#🔥55-普通柱状图" class="headerlink" title="🔥55 普通柱状图"></a>🔥55 普通柱状图</h1><p>x列修改为类别，文本：选中列–右击-属性-格式-文本&#x2F;菜单栏-列-类别列<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/128.jpg"><br>修改柱子间隙：绘图属性-间距-间距-<br>x轴降序排列：双击坐标轴-水平-翻转<br>&#x2F;双击未排序-修改&#x2F;选中a列-右击-列排序-<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/129.jpg"><br>自定义-自定义移动</p>
<h1 id="🔥56-并排柱状图"><a href="#🔥56-并排柱状图" class="headerlink" title="🔥56 并排柱状图"></a>🔥56 并排柱状图</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/130.jpg"><br>加误差棒<br>误差列紧跟对应y值后<br>添加点线图<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/131.jpg"><br>绘图属性-显示-连接线，符号-后在线条-符号修改</p>
<h1 id="🔥57-多因子组柱状图-索引数据"><a href="#🔥57-多因子组柱状图-索引数据" class="headerlink" title="🔥57 多因子组柱状图-索引数据"></a>🔥57 多因子组柱状图-索引数据</h1><p>excel打开不影响导入<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/132.jpg"><br>绘制没有间隙的图-当数据不平衡-不等<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/133.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/134.jpg"><br>不希望有空白间隙：重新排版数据-工作表-堆叠列<br>多出1列时：<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/135.jpg"><br>取消重新计算模式，后删除<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/136.jpg"><br>删除空行：选中删除&#x2F;全选-删减行-删含缺失值的数据行<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/137.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/138.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/139.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/140.jpg"><br>也可以到菜单栏修改<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/141.jpg"><br>图例：右击-图例-更新图例&#x2F;图例-数据图-双击进入编辑模式进行修改</p>
<h1 id="🔥58-堆叠柱状图"><a href="#🔥58-堆叠柱状图" class="headerlink" title="🔥58 堆叠柱状图"></a>🔥58 堆叠柱状图</h1><p>注意数据排布<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/142.jpg"><br>堆叠柱状图<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/143.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/144.jpg"><br>对每个柱子内容排序：图层属性-堆叠-按大小排序显示<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/145.jpg"><br>使任意两季度连在一起：绘图属性-组-分组-子组大小-2-堆叠-累加-对使用累加，增量……应用</p>
<h1 id="🔥59-多Y轴柱状图"><a href="#🔥59-多Y轴柱状图" class="headerlink" title="🔥59 多Y轴柱状图"></a>🔥59 多Y轴柱状图</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/146.jpg"><br>3y轴-先选折线图-再修改<br>graph（画布层，页面属性-）-图层-柱状，条形……间距跨图层<br>选柱子修改<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/147.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/148.jpg"><br>多y轴图</p>
<h1 id="🔥60-普通箱线图"><a href="#🔥60-普通箱线图" class="headerlink" title="🔥60 普通箱线图"></a>🔥60 普通箱线图</h1><p>原始数据<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/149.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/150.jpg"><br>箱中间的线-百分位数</p>
<h1 id="🔥61-直方图"><a href="#🔥61-直方图" class="headerlink" title="🔥61 直方图"></a>🔥61 直方图</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/151.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/152.jpg"><br>组内数较大：数据-分格大小-<br>绘图属性-分布-设置曲线<br>还可直接选择分布图</p>
<h1 id="🔥62-饼图和环形图"><a href="#🔥62-饼图和环形图" class="headerlink" title="🔥62 饼图和环形图"></a>🔥62 饼图和环形图</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/153.jpg"><br>饼图从270度画，顺时针绘制<br><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/154.jpg"><br>楔子-合并一些类型<br>勾选需要合并的类型，组合-选择-应用</p>
<h1 id="🔥63-热图"><a href="#🔥63-热图" class="headerlink" title="🔥63 热图"></a>🔥63 热图</h1><p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/155.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/156.jpg"></p>
<p><img src="/2023/03/30/Origin%E7%9A%84%E5%85%A5%E9%97%A8/157.jpg"></p>
]]></content>
      <categories>
        <category>数据</category>
      </categories>
      <tags>
        <tag>Origin</tag>
        <tag>作图</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（七）ES6</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><span id="more"></span>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/%E6%A6%82%E8%BF%B0.png" alt="概述"></p>
<h1 id="1、严格模式"><a href="#1、严格模式" class="headerlink" title="1、严格模式"></a>1、严格模式</h1><ul>
<li>JavaScript 除了提供正常模式外，还提供了严格模式</li>
<li>ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码</li>
<li>严格模式在IE10 以上版本的浏览器才会被支持，旧版本浏览器会被忽略</li>
<li>严格模式对正常的JavaScript语义做了一些更改： <ul>
<li>消除了Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全</li>
<li>提高编译器效率，增加运行速度</li>
<li>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class, enum, export, extends, import, super 不能做变量名</li>
</ul>
</li>
</ul>
<h2 id="1-1、开启严格模式"><a href="#1-1、开启严格模式" class="headerlink" title="1.1、开启严格模式"></a>1.1、开启严格模式</h2><ul>
<li>严格模式可以应用到整个脚本或个别函数中。</li>
<li>因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况</li>
</ul>
<h3 id="1-1-2、为脚本开启严格模式"><a href="#1-1-2、为脚本开启严格模式" class="headerlink" title="1.1.2、为脚本开启严格模式"></a>1.1.2、为脚本开启严格模式</h3><ul>
<li><p>为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句</p>
</li>
<li><p><code>&quot;use strict&quot;</code> 或<code>&#39;use strict&#39;</code></p>
</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token string">'user strict'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是严格模式。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为<code>&quot;use strict&quot;</code>加了引号，所以老版本的浏览器会把它当作一行普通字符串而忽略。</p>
<p>有的 script 基本是严格模式，有的 script<br>脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token string">'use strict'</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-1-2、为函数开启严格模式"><a href="#1-1-2、为函数开启严格模式" class="headerlink" title="1.1.2、为函数开启严格模式"></a>1.1.2、为函数开启严格模式</h3><ul>
<li>若要给某个函数开启严格模式，需要把<code>&quot;use strict&quot;</code>或<code>&#39;use strict&#39;</code>声明放在函数体所有语句之前</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 为整个脚本(script标签)开启严格模式 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token string">'use strict'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//   下面的js 代码就会按照严格模式执行代码</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string">'use strict'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 为某个函数开启严格模式 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 此时只是给fn函数开启严格模式</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string">'use strict'</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 下面的代码按照严格模式执行</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 里面的还是按照普通模式执行</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>将<code>&quot;use strict&quot;</code> 放在函数体的第一行，则整个函数以 “严格模式”运行。</li>
</ul>
<h1 id="2、严格模式中的变化"><a href="#2、严格模式中的变化" class="headerlink" title="2、严格模式中的变化"></a>2、严格模式中的变化</h1><ul>
<li>严格模式对JavaScript的语法和行为，都做了一些改变</li>
</ul>
<h2 id="2-1、变量规定"><a href="#2-1、变量规定" class="headerlink" title="2.1、变量规定"></a>2.1、变量规定</h2><ul>
<li>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量</li>
<li>严格模式禁止这种用法，变量都必须先用var 命令声明，然后再使用</li>
<li>严禁删除已经声明变量，例如，<code>delete x</code> 语法是错误的</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token string">'use strict'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 我们的变量名必须先声明再使用</span>
        <span class="token comment" spellcheck="true">// num = 10;</span>
        <span class="token comment" spellcheck="true">// console.log(num);</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2.我们不能随意删除已经声明好的变量</span>
        <span class="token comment" spellcheck="true">// delete num;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-2、严格模式下this指向问题"><a href="#2-2、严格模式下this指向问题" class="headerlink" title="2.2、严格模式下this指向问题"></a>2.2、严格模式下this指向问题</h2><ol>
<li>以前在全局作用域函数中的<code>this</code>指向<code>window</code>对象</li>
<li>严格模式下全局作用域中函数中的<code>this</code> 是 undefined</li>
<li>以前构造函数时不加 <code>new</code> 也可以调用，当普通函数，<code>this</code>指向全局对象</li>
<li>严格模式下，如果构造函数不加 <code>new</code> 调用，<code>this</code>指向的是 <code>undefined</code> ，如果给它赋值，会报错</li>
<li><code>new</code> 实例化的构造函数指向创建的对象实例</li>
<li>定时器<code>this</code> 还是指向<code>window</code></li>
<li>事件、对象还是指向调用者</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token string">'use strict'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//3. 严格模式下全局作用域中函数中的 this 是 undefined。</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined。</span>
        <span class="token punctuation">}</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//4. 严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span>
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// Star();</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5. 定时器 this 还是指向 window </span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-3、函数变化"><a href="#2-3、函数变化" class="headerlink" title="2.3、函数变化"></a>2.3、函数变化</h2><ol>
<li>函数不能有重名的 <strong>参数</strong></li>
<li>函数必须声明在顶层，新版本的JavaScript会引入“块级作用域”（ES6中已引入）。为了与新版本接轨， <strong>不允许在非函数的代码块内声明函数</strong></li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token string">'use strict'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 6. 严格模式下函数里面的参数不允许有重名</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// fn(1, 2);</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="3、高阶函数"><a href="#3、高阶函数" class="headerlink" title="3、高阶函数"></a>3、高阶函数</h1><ul>
<li>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出</li>
</ul>
<p>接收函数作为参数</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 高阶函数- 函数可以作为参数传递</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是最后调用的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将函数作为返回值</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>此时 fn 就是一个高阶函数</li>
<li>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数</li>
<li>同理函数也可以作为返回值传递回来</li>
</ul>
<h1 id="4、闭包"><a href="#4、闭包" class="headerlink" title="4、闭包"></a>4、闭包</h1><h2 id="4-1、变量作用域"><a href="#4-1、变量作用域" class="headerlink" title="4.1、变量作用域"></a>4.1、变量作用域</h2><p>变量根据作用域的不同分为两种：全局变量和局部变量</p>
<ol>
<li>函数内部可以使用全局变量</li>
<li>函数外部不可以使用局部变量</li>
<li>当函数执行完毕，本作用域内的局部变量会销毁。</li>
</ol>
<h2 id="4-2、什么是闭包"><a href="#4-2、什么是闭包" class="headerlink" title="4.2、什么是闭包"></a>4.2、什么是闭包</h2><p>闭包指有权访问另一个函数作用域中的变量的函数</p>
<p>简单理解：一个作用域可以访问另外一个函数内部的局部变量</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span>
        <span class="token comment" spellcheck="true">// 闭包: 我们fn2 这个函数作用域 访问了另外一个函数 fn1 里面的局部变量 num</span>
        <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment" spellcheck="true">// fn1就是闭包函数</span>
            <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//10</span>
            <span class="token punctuation">}</span>
            <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3、在chrome中调试闭包"><a href="#4-3、在chrome中调试闭包" class="headerlink" title="4.3、在chrome中调试闭包"></a>4.3、在chrome中调试闭包</h2><ol>
<li><p>打开浏览器，按 F12 键启动 chrome 调试工具。</p>
</li>
<li><p>设置断点。</p>
</li>
<li><p>找到 Scope 选项（Scope 作用域的意思）。</p>
</li>
<li><p>当我们重新刷新页面，会进入断点调试，Scope 里面会有两个参数（global 全局作用域、local 局部作用域）。</p>
</li>
<li><p>当执行到 fn2() 时，Scope 里面会多一个 Closure 参数 ，这就表明产生了闭包。</p>
</li>
</ol>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/%E9%97%AD%E5%8C%85%E8%B0%83%E8%AF%95.png" alt="闭包调试"></p>
<h2 id="4-4、闭包的作用"><a href="#4-4、闭包的作用" class="headerlink" title="4.4、闭包的作用"></a>4.4、闭包的作用</h2><ul>
<li>延伸变量的作用范围</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span>
        <span class="token comment" spellcheck="true">// 一个作用域可以访问另外一个函数的局部变量 </span>
        <span class="token comment" spellcheck="true">// 我们fn 外面的作用域可以访问fn 内部的局部变量</span>
        <span class="token comment" spellcheck="true">// 闭包的主要作用: 延伸了变量的作用范围</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-5、闭包练习"><a href="#4-5、闭包练习" class="headerlink" title="4.5、闭包练习"></a>4.5、闭包练习</h2><h3 id="4-5-1、点击li输出索引号"><a href="#4-5-1、点击li输出索引号" class="headerlink" title="4.5.1、点击li输出索引号"></a>4.5.1、点击li输出索引号</h3><pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>榴莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>臭豆腐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>鲱鱼罐头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>大猪蹄子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 闭包应用-点击li输出当前li的索引号</span>
        <span class="token comment" spellcheck="true">// 1. 我们可以利用动态添加属性的方式</span>
        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.nav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// console.log(i);</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 2. 利用闭包的方式得到当前小li 的索引号</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 利用for循环创建了4个立即执行函数</span>
            <span class="token comment" spellcheck="true">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span>
            <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// console.log(i);</span>
                lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
<h3 id="4-5-2、定时器中的闭包"><a href="#4-5-2、定时器中的闭包" class="headerlink" title="4.5.2、定时器中的闭包"></a>4.5.2、定时器中的闭包</h3><pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>榴莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>臭豆腐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>鲱鱼罐头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>大猪蹄子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 闭包应用-3秒钟之后,打印所有li元素的内容</span>
        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.nav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/%E7%BB%93%E6%9E%9C2.png" alt="结果2"></p>
<h1 id="5、递归"><a href="#5、递归" class="headerlink" title="5、递归"></a>5、递归</h1><p><strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</strong></p>
<p>简单理解： 函数内部自己调用自己，这个函数就是递归函数</p>
<p>由于递归很容易发生”栈溢出”错误，所以必须要加退出条件 return</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 递归函数 : 函数内部自己调用自己, 这个函数就是递归函数</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我要打印6句话'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归里面必须加退出条件</span>
            <span class="token punctuation">}</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="6、浅拷贝和深拷贝"><a href="#6、浅拷贝和深拷贝" class="headerlink" title="6、浅拷贝和深拷贝"></a>6、浅拷贝和深拷贝</h1><ol>
<li>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用</li>
<li>深拷贝拷贝多层，每一级别的数据都会拷贝</li>
<li><code>Object.assign(target,....sources)</code> ES6新增方法可以浅拷贝</li>
</ol>
<h2 id="6-1、浅拷贝"><a href="#6-1、浅拷贝" class="headerlink" title="6.1、浅拷贝"></a>6.1、浅拷贝</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">,</span>
    msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        age<span class="token punctuation">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// k是属性名，obj[k]是属性值</span>
    o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 浅拷贝语法糖</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-2、深拷贝"><a href="#6-2、深拷贝" class="headerlink" title="6.2、深拷贝"></a>6.2、深拷贝</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 深拷贝拷贝多层，每一级别的数据都会拷贝</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">'andy'</span><span class="token punctuation">,</span>
    msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        age<span class="token punctuation">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span>
    color<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 封装函数</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">,</span>oldobj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> oldobj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 判断属性值属于简单数据类型还是复杂数据类型</span>
        <span class="token comment" spellcheck="true">// 1.获取属性值   oldobj[k]</span>
        <span class="token keyword">var</span> item <span class="token operator">=</span> obldobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2.判断这个值是否是数组</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 3.判断这个值是否是对象</span>
            newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 4.属于简单数据类型</span>
            newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>   
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">deepCopy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="7、-正则表达式"><a href="#7、-正则表达式" class="headerlink" title="7、 正则表达式"></a>7、 正则表达式</h1><p>正则表达式是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p>
<p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线，<br>昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p>
<h2 id="7-1、特点"><a href="#7-1、特点" class="headerlink" title="7.1、特点"></a>7.1、特点</h2><ul>
<li>实际开发，一般都是直接复制写好的正则表达式</li>
<li>但是要求会使用正则表达式并且根据自身实际情况修改正则表达式</li>
</ul>
<h2 id="7-2、创建正则表达式"><a href="#7-2、创建正则表达式" class="headerlink" title="7.2、创建正则表达式"></a>7.2、创建正则表达式</h2><p>在JavaScript中，可以通过两种方式创建正则表达式</p>
<ol>
<li><p>通过调用 RegExp 对象的构造函数创建</p>
</li>
<li><p>通过字面量创建</p>
</li>
</ol>
<h3 id="7-2-1、通过调用-RegExp-对象的构造函数创建"><a href="#7-2-1、通过调用-RegExp-对象的构造函数创建" class="headerlink" title="7.2.1、通过调用 RegExp 对象的构造函数创建"></a>7.2.1、通过调用 RegExp 对象的构造函数创建</h3><p>通过调用 RegExp 对象的构造函数创建</p>
<p><code>var 变量名 = new RegExp(/表达式/);</code></p>
<h3 id="7-2-2、通过字面量创建"><a href="#7-2-2、通过字面量创建" class="headerlink" title="7.2.2、通过字面量创建"></a>7.2.2、通过字面量创建</h3><p>通过字面量创建</p>
<p><code>var 变量名 = /表达式/;</code></p>
<p>注释中间放表达式就是正则字面量</p>
<h3 id="7-2-3、测试正则表达式-test"><a href="#7-2-3、测试正则表达式-test" class="headerlink" title="7.2.3、测试正则表达式 test"></a>7.2.3、测试正则表达式 test</h3><ul>
<li><code>test()</code>正则对象方法，用于检测字符串是否符合该规则，该对象会返回<code>true</code>或<code>false</code>,其参数是测试字符串</li>
</ul>
<p><code>regexObj.test(str)</code></p>
<ul>
<li><code>regexObj</code> 写的是正则表达式</li>
<li><code>str</code> 我们要测试的文本</li>
<li>就是检测<code>str</code>文本是否符合我们写的正则表达式规范</li>
</ul>
<p>示例</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 正则表达式在js中的使用</span>
        <span class="token comment" spellcheck="true">// 1. 利用 RegExp对象来创建 正则表达式</span>
        <span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/123/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 2. 利用字面量创建 正则表达式</span>
        <span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/123/</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3.test 方法用来检测字符串是否符合正则表达式要求的规范</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-3、正则表达式中的特殊在字符"><a href="#7-3、正则表达式中的特殊在字符" class="headerlink" title="7.3、正则表达式中的特殊在字符"></a>7.3、正则表达式中的特殊在字符</h2><h3 id="7-3-1、边界符"><a href="#7-3-1、边界符" class="headerlink" title="7.3.1、边界符"></a>7.3.1、边界符</h3><p>正则表达式中的边界符(位置符)用来提示字符所处的位置，主要有两个字符</p>
<table>
<thead>
<tr>
<th>边界符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>表示匹配行首的文本(以谁开始)</td>
</tr>
<tr>
<td>$</td>
<td>表示匹配行尾的文本(以谁结束)</td>
</tr>
</tbody></table>
<p>如果^ 和 $ 在一起，表示必须是精确匹配</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 边界符 ^ $</span>
<span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/abc/</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//正则表达式里面不需要加引号，不管是数字型还是字符串型</span>
<span class="token comment" spellcheck="true">// /abc/只要包含有abc这个字符串返回的都是true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^abc/</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>

<span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^abc$/</span>
<span class="token comment" spellcheck="true">// 以abc开头，以abc结尾，必须是abc</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-3-2、字符类"><a href="#7-3-2、字符类" class="headerlink" title="7.3.2、字符类"></a>7.3.2、字符类</h3><ul>
<li>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了</li>
<li>所有可供选择的字符都放在方括号内</li>
</ul>
<h4 id="①-方括号"><a href="#①-方括号" class="headerlink" title="①[] 方括号"></a>①[] 方括号</h4><p><code>/[abc]/.test(&#39;andy&#39;);     // true</code></p>
<p>后面的字符串只要包含 <code>abc</code> 中任意一个字符,都返回<code>true</code></p>
<h4 id="②-方括号内部-范围符"><a href="#②-方括号内部-范围符" class="headerlink" title="②[-]方括号内部 范围符"></a>②[-]方括号内部 范围符</h4><p><code>/^[a-z]$/.test()</code></p>
<p>方括号内部加上 - 表示范围，这里表示 a - z 26个英文字母都可以</p>
<h4 id="③-方括号内部-取反符"><a href="#③-方括号内部-取反符" class="headerlink" title="③[^] 方括号内部 取反符 ^"></a>③[^] 方括号内部 取反符 ^</h4><p><code>/[^abc]/.test(&#39;andy&#39;)   // false</code></p>
<p>方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 <code>false</code></p>
<p>注意和边界符 ^ 区别，边界符写到方括号外面</p>
<h4 id="④字符组合"><a href="#④字符组合" class="headerlink" title="④字符组合"></a>④字符组合</h4><p><code>/[a-z1-9]/.test(&#39;andy&#39;)    // true</code></p>
<p>方括号内部可以使用字符组合，这里表示包含 a 到 z的26个英文字母和1到9的数字都可以</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">//var rg = /abc/;  只要包含abc就可以 </span>
        <span class="token comment" spellcheck="true">// 字符类: [] 表示有一系列字符可供选择，只要匹配其中一个就可以了</span>
        <span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/[abc]/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> rg1 <span class="token operator">=</span> <span class="token regex">/^[abc]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[a-z]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 字符组合</span>
        <span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9_-]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 如果中括号里面有^ 表示取反的意思 千万和 我们边界符 ^ 别混淆</span>
        <span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex">/^[^a-zA-Z0-9_-]$/</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-3-3、量词符"><a href="#7-3-3、量词符" class="headerlink" title="7.3.3、量词符"></a>7.3.3、量词符</h3><p>量词符用来设定某个模式出现的次数</p>
<table>
<thead>
<tr>
<th>量词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 量词符: 用来设定某个模式出现的次数</span>
        <span class="token comment" spellcheck="true">// 简单理解: 就是让下面的a这个字符重复多少次</span>
        <span class="token comment" spellcheck="true">// var reg = /^a$/;</span>

        <span class="token comment" spellcheck="true">//  * 相当于 >= 0 可以出现0次或者很多次 </span>
        <span class="token comment" spellcheck="true">// var reg = /^a*$/;</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test(''));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('a'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('aaaa'));</span>

        <span class="token comment" spellcheck="true">//  + 相当于 >= 1 可以出现1次或者很多次</span>
        <span class="token comment" spellcheck="true">// var reg = /^a+$/;</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('')); // false</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('a')); // true</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('aaaa')); // true</span>

        <span class="token comment" spellcheck="true">//  ?  相当于 1 || 0</span>
        <span class="token comment" spellcheck="true">// var reg = /^a?$/;</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('')); // true</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('a')); // true</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('aaaa')); // false</span>

        <span class="token comment" spellcheck="true">//  {3 } 就是重复3次</span>
        <span class="token comment" spellcheck="true">// var reg = /^a{3}$/;</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('')); // false</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('a')); // false</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('aaaa')); // false</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('aaa')); // true</span>
        <span class="token comment" spellcheck="true">//  {3, }  大于等于3</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^a{3,}$/</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
        <span class="token comment" spellcheck="true">//  {3,16}  大于等于3 并且 小于等于16</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^a{3,6}$/</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aaaaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-3-4、用户名验证"><a href="#7-3-4、用户名验证" class="headerlink" title="7.3.4、用户名验证"></a>7.3.4、用户名验证</h3><p>功能需求：</p>
<ol>
<li>如果用户名输入合法, 则后面提示信息为 : 用户名合法,并且颜色为绿色</li>
<li>如果用户名输入不合法, 则后面提示信息为: 用户名不符合规范, 并且颜色为绿色</li>
</ol>
<p>分析：</p>
<ol>
<li><p>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为 6~16位.</p>
</li>
<li><p>首先准备好这种正则表达式模式 &#x2F;$[a-zA-Z0-9-_]{6,16}^&#x2F;</p>
</li>
<li><p>当表单失去焦点就开始验证.</p>
</li>
<li><p>如果符合正则规范, 则让后面的span标签添加 right 类.</p>
</li>
<li><p>如果不符合正则规范, 则让后面的span标签添加 wrong 类.</p>
</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>请输入用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">//  量词是设定某个模式出现的次数</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9_-]{6,16}$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个模式用户只能输入英文字母 数字 下划线 短横线但是有边界符和[] 这就限定了只能多选1</span>
        <span class="token comment" spellcheck="true">// {6,16}  中间不要有空格</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('a'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('8'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('18'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('aa'));</span>
        <span class="token comment" spellcheck="true">// console.log('-------------');</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('andy-red'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('andy_red'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('andy007'));</span>
        <span class="token comment" spellcheck="true">// console.log(reg.test('andy!007'));</span>
        <span class="token keyword">var</span> uname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.uname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        uname<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正确的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                span<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">;</span>
                span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'用户名格式输入正确'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'错误的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                span<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'wrong'</span><span class="token punctuation">;</span>
                span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'用户名格式输入不正确'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-4、括号总结"><a href="#7-4、括号总结" class="headerlink" title="7.4、括号总结"></a>7.4、括号总结</h2><ol>
<li>大括号 量词符 里面面表示重复次数</li>
<li>中括号 字符集合 匹配方括号中的任意字符</li>
<li>小括号 表示优先级</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 中括号 字符集合 匹配方括号中的任意字符</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[abc]$/</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// a || b || c</span>
<span class="token comment" spellcheck="true">// 大括号 量词符 里面表示重复次数</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^abc{3}$/</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 它只是让c 重复3次 abccc</span>
<span class="token comment" spellcheck="true">// 小括号 表示优先级</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^(abc){3}$/</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//它是让 abc 重复3次</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在线测试正则表达式：<a href="https://c.runoob.com/">https://c.runoob.com/</a></p>
<h2 id="7-5、预定义类"><a href="#7-5、预定义类" class="headerlink" title="7.5、预定义类"></a>7.5、预定义类</h2><p>预定义类指的是 某些常见模式的简写写法</p>
<table>
<thead>
<tr>
<th>预定类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>匹配0-9之间的任一数字，相当于[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配所有0-9以外的字符，相当于[ ^ 0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任意的字母、数字和下划线,相当于[A-Za-z0-9_ ]</td>
</tr>
<tr>
<td>\W</td>
<td>除所有字母、数字、和下划线以外的字符，相当于[ ^A-Za-z0-9_ ]</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格（包括换行符，制表符，空格符等），相当于[\t\t\n\v\f]</td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空格的字符，相当于[ ^ \t\r\n\v\f]</td>
</tr>
</tbody></table>
<h3 id="7-5-1、表单验证"><a href="#7-5-1、表单验证" class="headerlink" title="7.5.1、表单验证"></a>7.5.1、表单验证</h3><p>分析：</p>
<p>1.手机号码: <code>/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</code></p>
<p>2.QQ: <code>[1-9][0-9]&#123;4,&#125;</code> (腾讯QQ号从10000开始)</p>
<p>3.昵称是中文: <code>^[\u4e00-\u9fa5]&#123;2,8&#125;$</code></p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 座机号码验证:  全国座机号码  两种格式:   010-12345678  或者  0530-1234567</span>
        <span class="token comment" spellcheck="true">// 正则里面的或者 符号  |  </span>
        <span class="token comment" spellcheck="true">// var reg = /^\d{3}-\d{8}|\d{4}-\d{7}$/;</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^\d{3,4}-\d{7,8}$/</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-6、正则表达式中的替换"><a href="#7-6、正则表达式中的替换" class="headerlink" title="7.6、正则表达式中的替换"></a>7.6、正则表达式中的替换</h2><h3 id="7-6-1、replace-替换"><a href="#7-6-1、replace-替换" class="headerlink" title="7.6.1、replace 替换"></a>7.6.1、replace 替换</h3><p><code>replace()</code>方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式</p>
<p><code>stringObject.replace(regexp/substr,replacement)</code></p>
<ol>
<li>第一个参数: 被替换的字符串或者正则表达式</li>
<li>第二个参数：替换为的字符串</li>
<li>返回值是一个替换完毕的新字符串</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 替换 replace</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy和red'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">,</span><span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/andy/</span><span class="token punctuation">,</span><span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-6-2、正则表达式参数"><a href="#7-6-2、正则表达式参数" class="headerlink" title="7.6.2、正则表达式参数"></a>7.6.2、正则表达式参数</h3><p><code>/表达式/[switch]</code></p>
<p><code>switch</code>按照什么样的模式来匹配，有三种</p>
<ul>
<li><code>g</code>: 全局匹配</li>
<li><code>i</code>:忽略大小写</li>
<li><code>gi</code>: 全局匹配 + 忽略大小写</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（六）面向对象</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="1、面向对象"><a href="#1、面向对象" class="headerlink" title="1、面向对象"></a>1、面向对象</h1><p>面向对象更贴近我们的实际生活, 可以使用面向对象描述现实世界事物. 但是事物分为具体的事物和抽象的事物<span id="more"></span></p>
<p>面向对象的思维特点：</p>
<ol>
<li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</li>
<li>对类进行实例化, 获取类的对象</li>
</ol>
<h2 id="1-1、对象"><a href="#1-1、对象" class="headerlink" title="1.1、对象"></a>1.1、对象</h2><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p>
<p>对象是由属性和方法组成的</p>
<ul>
<li>属性：事物的 <strong>特征， <strong>在对象中用</strong> 属性</strong>来表示</li>
<li>方法：事物的 <strong>行为， <strong>在对象中用</strong> 方法</strong>来表示</li>
</ul>
<h2 id="1-2、类"><a href="#1-2、类" class="headerlink" title="1.2、类"></a>1.2、类</h2><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p>
<ul>
<li>类抽象了对象的公共部分，它泛指某一大类（class）</li>
<li>对象特指某一个，通过类实例化一个具体的对象</li>
</ul>
<h3 id="1-2-1、创建类"><a href="#1-2-1、创建类" class="headerlink" title="1.2.1、创建类"></a>1.2.1、创建类</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">name</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// class body</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>创建实例</li>
</ul>
<p>var XX &#x3D; new name();&#96;</p>
<p>注意：类必须使用<code>new</code> 实例化对象</p>
<h3 id="1-2-2、构造函数"><a href="#1-2-2、构造函数" class="headerlink" title="1.2.2、构造函数"></a>1.2.2、构造函数</h3><p>constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象，通过 new 命令生成对象实例时，自动调用该方法。如果没有显示定义,<br>类内部会自动给我们创建一个constructor()</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// 1. 创建类 class  创建一个 明星类</span>
    <span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// constructor 构造器或者构造函数</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 2. 利用类创建对象 new</span>
    <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>通过 class 关键字创建类，类名我们还是习惯性 <strong>定义首字母大写</strong></li>
<li>类里面有个 <code>constructor</code>函数，可以接收传递过来的参数，同时返回实例对象</li>
<li><code>constructor</code>函数只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数</li>
<li>最后注意语法规范 <ul>
<li>创建类➡类名后面不要加小括号</li>
<li>生成实例➡类名后面加小括号</li>
<li>构造函数不需要加 function 关键字</li>
</ul>
</li>
</ul>
<h3 id="1-2-3、类中添加方法"><a href="#1-2-3、类中添加方法" class="headerlink" title="1.2.3、类中添加方法"></a>1.2.3、类中添加方法</h3><p>语法：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>   
        <span class="token comment" spellcheck="true">// constructor 称为构造器或者构造函数</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>      
<span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
ldh<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意</strong> ： 方法之间不能加逗号分隔，同时方法不需要添加 function 关键字。</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// 1. 创建类 class  创建一个 明星类</span>
    <span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 类的共有属性放到 constructor 里面</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sing</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">+</span> song<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 2. 利用类创建对象 new</span>
    <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// (1) 我们类里面所有的函数不需要写function </span>
    <span class="token comment" spellcheck="true">// (2) 多个函数方法之间不需要添加逗号分隔</span>
    ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'李香兰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>类的共有属性放到<code>constructor</code> 里面</li>
<li>类里面的函数都不需要写 <code>function</code> 关键字</li>
</ul>
<h2 id="1-3-、类的继承"><a href="#1-3-、类的继承" class="headerlink" title="1.3 、类的继承"></a>1.3 、类的继承</h2><p>现实中的继承：子承父业，比如我们都继承了父亲的姓。</p>
<p>程序中的继承：子类可以继承父类的一些属性和方法。</p>
<p>语法：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span>
<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 子类继承父类</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看一个实例：</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// 父类有加法方法</span>
    <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 子类继承父类加法方法 同时 扩展减法方法</span>
    <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
        <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 利用super 调用父类的构造函数</span>
            <span class="token comment" spellcheck="true">// super 必须在子类this之前调用</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    son<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    son<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="1-4、super关键字"><a href="#1-4、super关键字" class="headerlink" title="1.4、super关键字"></a>1.4、super关键字</h2><ul>
<li><code>super</code> 关键字用于访问和调用对象父类上的函数，可以调用父类的构造函数，也可以调用父类的普通函数</li>
</ul>
<h3 id="1-4-1、调用父类的构造函数"><a href="#1-4-1、调用父类的构造函数" class="headerlink" title="1.4.1、调用父类的构造函数"></a>1.4.1、调用父类的构造函数</h3><p>语法：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> surname<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 子类继承父类</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> entends Person <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>surname<span class="token punctuation">,</span>firstname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment" spellcheck="true">//调用父类的 constructor(surname)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//定义子类独有的属性</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意： <strong>子类在构造函数中使用super,必须放到this前面（必须先调用父类的构造方法，在使用子类构造方法）</strong></p>
<p>案例：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父类</span>
<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> surname<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">saySurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的姓是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 子类继承父类</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> entends Father <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>surname<span class="token punctuation">,</span>firstname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment" spellcheck="true">//调用父类的 constructor(surname)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//定义子类独有的属性</span>
    <span class="token punctuation">}</span>
    <span class="token function">sayFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的名字是:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> damao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘'</span><span class="token punctuation">,</span><span class="token string">'德华'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
damao<span class="token punctuation">.</span><span class="token function">saySurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
damao<span class="token punctuation">.</span><span class="token function">sayFirstname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-4-2、调用父类的普通函数"><a href="#1-4-2、调用父类的普通函数" class="headerlink" title="1.4.2、调用父类的普通函数"></a>1.4.2、调用父类的普通函数</h3><p>语法：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'我是爸爸'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// super.say() super调用父类的方法</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'的儿子'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> damao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>damao<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>多个方法之间不需要添加逗号分隔</p>
</li>
<li><p>继承中属性和方法的查找原则：就近原则，先看子类，再看父类</p>
</li>
</ul>
<h2 id="1-4、三个注意点"><a href="#1-4、三个注意点" class="headerlink" title="1.4、三个注意点"></a>1.4、三个注意点</h2><ol>
<li>在ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li>
<li>类里面的共有属性和方法一定要加 <code>this</code>使用</li>
<li>类里面的<code>this</code>指向：<br>* constructor 里面的 <code>this</code>指向实例对象<br>* 方法里面的<code>this</code>指向这个方法的调用者</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> that<span class="token punctuation">;</span>
        <span class="token keyword">var</span> _that<span class="token punctuation">;</span>
        <span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>
            <span class="token function">constructor</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// constructor 里面的this 指向的是 创建的实例对象</span>
                that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// this.sing();</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sing<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 这个sing方法里面的this 指向的是 btn 这个按钮,因为这个按钮调用了这个函数</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token comment" spellcheck="true">// that里面存储的是constructor里面的this</span>
            <span class="token punctuation">}</span>
            <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 这个dance里面的this 指向的是实例对象 ldh 因为ldh 调用了这个函数</span>
                _that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that <span class="token operator">===</span> ldh<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ldh<span class="token punctuation">.</span><span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_that <span class="token operator">===</span> ldh<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</span>

        <span class="token comment" spellcheck="true">// 2. 类里面的共有的属性和方法一定要加this使用.</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="2、构造函数和原型"><a href="#2、构造函数和原型" class="headerlink" title="2、构造函数和原型"></a>2、构造函数和原型</h1><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h2><p>在典型的 OOP 的语言中（如 Java），都存在类的概念，类就是对象的模板，对象就是类的实例，但在 ES6之前， JS 中并没用引入类的概念。</p>
<p>ES6， 全称 ECMAScript 6.0 ，2015.06 发版。但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持<br>ES6，不过只实现了 ES6 的部分特性和功能。</p>
<p>在 ES6之前 ，对象不是基于类创建的，而是用一种称为构建函数的特殊函数来定义对象和它们的特征。</p>
<ul>
<li>创建对象有三种方式 <ul>
<li><strong>对象字面量</strong></li>
<li><strong>new Object()</strong></li>
<li><strong>自定义构造函数</strong></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 利用 new Object() 创建对象</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2. 利用对象字面量创建对象</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>；

<span class="token comment" spellcheck="true">// 3.利用构造函数创建对象</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ol>
<li>构造函数用于创建某一类对象，其首字母要大写</li>
<li>构造函数要和<code>new</code>一起使用才有意义</li>
</ol>
<h2 id="2-2、构造函数"><a href="#2-2、构造函数" class="headerlink" title="2.2、构造函数"></a>2.2、构造函数</h2><ul>
<li>构造函数是一种特殊的函数，主要用来初始化对象(为对象成员变量赋初始值)，它总与<code>new</code>一起使用</li>
<li>我们可以把对象中的一些公共的属性和方法抽取出来，然后封装到这个函数里面</li>
</ul>
<p>new 在执行时会做四件事</p>
<ol>
<li>在内存中创建一个新的空对象。</li>
<li>让 this 指向这个新的对象。</li>
<li>执行构造函数里面的代码，给这个新对象添加属性和方法。</li>
<li>返回这个新对象（所以构造函数里面不需要 return ）。</li>
</ol>
<h3 id="2-2-1、静态成员和实例成员"><a href="#2-2-1、静态成员和实例成员" class="headerlink" title="2.2.1、静态成员和实例成员"></a>2.2.1、静态成员和实例成员</h3><p>JavaScript<br>的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的<code>this</code>上添加。通过这两种方式添加的成员，就分别称为静态成员和实例成员。</p>
<ul>
<li>静态成员: 在构造函数本身上添加的成员为静态成员，只能由构造函数本身来访问</li>
<li>实例成员: 在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 构造函数中的属性和方法我们称为成员，成员可以添加</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 实例成员就是构造函数内部通过this添加的成员  uname age sing  就是实例成员</span>
<span class="token comment" spellcheck="true">// 实例成员只能通过实例化的对象来访问</span>
ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Star<span class="token punctuation">.</span>uname<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined     不可以通过构造函数来访问实例成员</span>

<span class="token comment" spellcheck="true">// 静态成员就是在构造函数本身上添加的成员 sex 就是静态成员</span>
<span class="token comment" spellcheck="true">// 静态成员只能通过构造函数来访问</span>
Star<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>
Star<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>
ldh<span class="token punctuation">.</span>sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined  不能通过对象来访问</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-2-2、构造函数的问题"><a href="#2-2-2、构造函数的问题" class="headerlink" title="2.2.2、构造函数的问题"></a>2.2.2、构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98.png" alt="内存问题"></p>
<ul>
<li><strong>我们希望所有的对象使用同一个函数，这样就比较节省内存</strong></li>
</ul>
<h2 id="2-3、构造函数原型-prototype"><a href="#2-3、构造函数原型-prototype" class="headerlink" title="2.3、构造函数原型 prototype"></a>2.3、构造函数原型 prototype</h2><ul>
<li>构造函数通过原型分配的函数是所有对象所共享的,这样就解决了内存浪费问题</li>
<li>JavaScript 规定，每一个构造函数都有一个<code>prototype</code>属性，指向另一个对象，注意这个<code>prototype</code>就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有</li>
<li>我们可以把那些不变的方法，直接定义在<code>prototype</code> 对象上，这样所有对象的实例就可以共享这些方法</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. 构造函数的问题. </span>
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//公共属性定义到构造函数里面</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// this.sing = function() {</span>
            <span class="token comment" spellcheck="true">//     console.log('我会唱歌');</span>
            <span class="token comment" spellcheck="true">// }</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//公共的方法我们放到原型对象身上</span>
        Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>sing <span class="token operator">===</span> zxy<span class="token punctuation">.</span>sing<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        zxy<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. 一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</li>
</ul>
<p>问答：原型是什么？</p>
<ul>
<li>一个对象，我们也称为 <code>prototype</code> 为原型对象</li>
</ul>
<p>问答：原型的作用是什么？</p>
<ul>
<li>共享方法</li>
</ul>
<h2 id="2-4、对象原型-proto"><a href="#2-4、对象原型-proto" class="headerlink" title="2.4、对象原型 __ proto __"></a>2.4、对象原型 __ proto __</h2><ul>
<li>对象都会有一个属性 <code>_proto_</code> 指向构造函数的<code>prototype</code>原型对象，之所以我们对象可以使用构造函数<code>prototype</code> 原型对象的属性和方法，就是因为对象有<code>_proto_</code>原型的存在。</li>
<li><code>_proto_</code>对象原型和原型对象 <code>prototype</code> 是等价的</li>
<li><code>_proto_</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 <code>prototype</code></li>
</ul>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B.png" alt="对象原型"></p>
<ul>
<li><code>Star.prototype 和 ldh._proto_</code> 指向相同</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment" spellcheck="true">// 对象身上系统自己添加一个 __proto__ 指向我们构造函数的原型对象 prototype</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Star<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing</span>
        <span class="token comment" spellcheck="true">// 如果没有sing 这个方法,因为有 __proto__ 的存在,就去构造函数原型对象prototype身上去查找sing这个方法</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-5、constructor-构造函数"><a href="#2-5、constructor-构造函数" class="headerlink" title="2.5、constructor 构造函数"></a>2.5、constructor 构造函数</h2><ul>
<li><p>对象原型(__ proto __) 和构造函数(prototype)原型对象 里面都有一个属性 constructor 属性， constructor 我们称为构造函数，因为它指回构造函数本身。</p>
</li>
<li><p><code>constructor</code>主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数</p>
</li>
<li><p><strong>一般情况下，对象的方法都在构造函数(prototype)的原型对象中设置</strong></p>
</li>
<li><p>如果有多个对象的方法，我们可以给原型对象<code>prototype</code>采取对象形式赋值，但是这样会覆盖构造函数原型对象原来的内容，这样修改后的原型对象<code>constructor</code>就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个<code>constructor</code>指向原来的构造函数</p>
</li>
</ul>
<p>具体请看实例配合理解</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span>
        <span class="token comment" spellcheck="true">// Star.prototype.sing = function() {</span>
        <span class="token comment" spellcheck="true">//     console.log('我会唱歌');</span>
        <span class="token comment" spellcheck="true">// };</span>
        <span class="token comment" spellcheck="true">// Star.prototype.movie = function() {</span>
        <span class="token comment" spellcheck="true">//     console.log('我会演电影');</span>
        <span class="token comment" spellcheck="true">// }</span>
        Star<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span>
            constructor<span class="token punctuation">:</span> Star<span class="token punctuation">,</span>
            sing<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            movie<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会演电影'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-6、构造函数、实例、原型对象三者关系"><a href="#2-6、构造函数、实例、原型对象三者关系" class="headerlink" title="2.6、构造函数、实例、原型对象三者关系"></a>2.6、构造函数、实例、原型对象三者关系</h2><p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E5%AE%9E%E4%BE%8B%E3%80%81%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B.png" alt="构造函数、实例、对象原型"></p>
<h2 id="2-7、原型链查找规则"><a href="#2-7、原型链查找规则" class="headerlink" title="2.7、原型链查找规则"></a>2.7、原型链查找规则</h2><ol>
<li>当访问一个对象的属性(包括方法)时，首先查找这个对象自身有没有该属性</li>
<li>如果没有就查找它的原型(也就是<code>_proto_</code>指向的<code>prototype原型对象</code>)</li>
<li>如果还没有就查找原型对象的原型(Object的原型对象)</li>
<li>依次类推一直找到Object为止(null)</li>
<li>__ proto __对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li>
</ol>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 只要是对象就有__proto__ 原型, 指向原型对象</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Star<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2.我们Star原型对象里面的__proto__原型指向的是 Object.prototype</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3. 我们Object.prototype原型对象里面的__proto__原型  指向为 null</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-8、原型对象this指向"><a href="#2-8、原型对象this指向" class="headerlink" title="2.8、原型对象this指向"></a>2.8、原型对象this指向</h2><ul>
<li>构造函数中的 <code>this</code>指向我们的实例对象</li>
<li>原型对象里面放的是方法，这个方法里面的<code>this</code>指向的是这个方法的调用者，也就是这个实例对象</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> that<span class="token punctuation">;</span>
        Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span>
        ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that <span class="token operator">===</span> ldh<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-9、扩展内置对象"><a href="#2-9、扩展内置对象" class="headerlink" title="2.9、扩展内置对象"></a>2.9、扩展内置对象</h2><ul>
<li>可以通过原型对象，对原来的内置对象进行扩展自定义的方法</li>
<li>比如给数组增加自定义求偶数和的功能</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 原型对象的应用 扩展内置对象方法</span>

        Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Array.prototype = {</span>
        <span class="token comment" spellcheck="true">//     sum: function() {</span>
        <span class="token comment" spellcheck="true">//         var sum = 0;</span>
        <span class="token comment" spellcheck="true">//         for (var i = 0; i &lt; this.length; i++) {</span>
        <span class="token comment" spellcheck="true">//             sum += this[i];</span>
        <span class="token comment" spellcheck="true">//         }</span>
        <span class="token comment" spellcheck="true">//         return sum;</span>
        <span class="token comment" spellcheck="true">//     }</span>

        <span class="token comment" spellcheck="true">// }</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li>数组和字符串内置对象不能给原型对象覆盖操作<code>Array.prototype = &#123;&#125;</code>，只能是<code>Array.prototype.xxx = function()&#123;&#125;</code>的方式</li>
</ul>
<h1 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h1><p>ES6 之前并没有给我们提供<code>extends</code>继承</p>
<ul>
<li>我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承</li>
</ul>
<h2 id="3-1、call"><a href="#3-1、call" class="headerlink" title="3.1、call()"></a>3.1、call()</h2><p>调用这个函数，并且修改函数运行时的 this 指向</p>
<p><code>fun.call(thisArg,arg1,arg2,......)</code></p>
<ul>
<li><code>thisArg</code>：当前调用函数 this 的指向对象</li>
<li><code>arg1,arg2</code>： 传递的其他参数</li>
</ul>
<p>示例</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// call 方法</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我希望我的希望有希望'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// Object{...}</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// 3</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'andy'</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// fn();</span>
        <span class="token comment" spellcheck="true">// 1. call() 可以调用函数</span>
        <span class="token comment" spellcheck="true">// fn.call();</span>
        <span class="token comment" spellcheck="true">// 2. call() 可以改变这个函数的this指向 此时这个函数的this 就指向了o这个对象</span>
        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-2、借用构造函数继承父类型属性"><a href="#3-2、借用构造函数继承父类型属性" class="headerlink" title="3.2、借用构造函数继承父类型属性"></a>3.2、借用构造函数继承父类型属性</h2><ul>
<li>核心原理: 通过 <code>call()</code> 把父类型的 this 指向子类型的 this，这样就可以实现子类型继承父类型的属性</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 借用父构造函数继承属性</span>
        <span class="token comment" spellcheck="true">// 1. 父构造函数</span>
        <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this 指向父构造函数的对象实例</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 2 .子构造函数 </span>
        <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this 指向子构造函数的对象实例</span>
            Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-3、借用原型对象继承父类型方法"><a href="#3-3、借用原型对象继承父类型方法" class="headerlink" title="3.3、借用原型对象继承父类型方法"></a>3.3、借用原型对象继承父类型方法</h2><ul>
<li>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法</li>
</ul>
<p>核心原理：</p>
<ol>
<li>将子类所共享的方法提取出来，让子类的 <code>prototype 原型对象 = new 父类()</code></li>
<li>本质： 子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象</li>
<li>将子类的<code>constructor</code>重新指向子类的构造函数</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 借用父构造函数继承属性</span>
        <span class="token comment" spellcheck="true">// 1. 父构造函数</span>
        <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this 指向父构造函数的对象实例</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>money <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2 .子构造函数 </span>
        <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this 指向子构造函数的对象实例</span>
            Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span>
        Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span>
        Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这个是子构造函数专门的方法</span>
        Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>exam <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'孩子要考试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-3-类的本质"><a href="#3-3-类的本质" class="headerlink" title="3.3 类的本质"></a>3.3 类的本质</h2><ol>
<li>class 本质还是 function</li>
<li>类的所有方法都定义在类的 <code>prototype</code>属性上</li>
<li>类创建的实例，里面也有<code>_proto_</code>指向类的<code>prototype</code>原型对象</li>
<li>所以 ES6 的类它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li>
<li>所以 ES6 的类其实就是语法糖</li>
<li>语法糖：语法糖就是一种便捷写法，简单理解</li>
</ol>
<h1 id="4、ES5新增方法"><a href="#4、ES5新增方法" class="headerlink" title="4、ES5新增方法"></a>4、ES5新增方法</h1><p>ES5 给我们新增了一些方法，可以很方便的操作数组或者字符串</p>
<ul>
<li>数组方法</li>
<li>字符串方法</li>
<li>对象方法</li>
</ul>
<h2 id="4-1、数组方法"><a href="#4-1、数组方法" class="headerlink" title="4.1、数组方法"></a>4.1、数组方法</h2><ul>
<li>迭代(遍历)方法：foreach() ，map()，filter()，some() ，every() ;</li>
</ul>
<h3 id="4-1-1、forEach"><a href="#4-1-1、forEach" class="headerlink" title="4.1.1、forEach()"></a>4.1.1、forEach()</h3><p><code>array.forEach(function(currentValue,index,arr))</code></p>
<ul>
<li>currentValue : 数组当前项的值</li>
<li>index: 数组当前项的索引</li>
<li>arr: 数组对象本身</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// forEach 迭代(遍历) 数组</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每个数组元素'</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每个数组元素的索引号'</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数组本身'</span> <span class="token operator">+</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-1-2、filter-筛选数组"><a href="#4-1-2、filter-筛选数组" class="headerlink" title="4.1.2、filter()筛选数组"></a>4.1.2、filter()筛选数组</h3><p><code>array.filter(function(currentValue,index,arr))</code></p>
<ul>
<li><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</li>
<li>注意它直接返回一个新数组</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// filter 筛选数组</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// return value >= 20;</span>
            <span class="token keyword">return</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-1-3、some"><a href="#4-1-3、some" class="headerlink" title="4.1.3、some()"></a>4.1.3、some()</h3><ul>
<li><code>some()</code>方法用于检测数组中的元素是否满足指定条件（查找数组中是否有满足条件的元素）</li>
<li>注意它返回的是布尔值，如果查找到这个元素，就返回true，如果查找不到就返回false</li>
<li>如果找到第一个满足条件的元素，则终止循环，不再继续查找</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// some 查找数组中是否有满足条件的元素 </span>
        <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> flag1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. filter 也是查找满足条件的元素 返回的是一个数组 而且是把所有满足条件的元素返回回来</span>
        <span class="token comment" spellcheck="true">// 2. some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查找到第一个满足条件的元素就终止循环</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-2、字符串方法"><a href="#4-2、字符串方法" class="headerlink" title="4.2、字符串方法"></a>4.2、字符串方法</h2><ul>
<li><code>trim()</code>方法会从一个字符串的两端删除空白字符</li>
<li><code>trim()</code>方法并不影响原字符串本身，它返回的是一个新的字符串</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// trim 方法去除字符串两侧空格</span>
        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'   an  dy   '</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> str <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3、对象方法"><a href="#4-3、对象方法" class="headerlink" title="4.3、对象方法"></a>4.3、对象方法</h2><h3 id="4-3-1、Object-keys"><a href="#4-3-1、Object-keys" class="headerlink" title="4.3.1、Object.keys()"></a>4.3.1、Object.keys()</h3><ol>
<li><code>Object.keys()</code>用于获取对象自身所有的属性</li>
<li>效果类似<code>for...in</code></li>
<li>返回一个由属性名组成的数组</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 用于获取对象自身所有的属性</span>
        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            pname<span class="token punctuation">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>
            price<span class="token punctuation">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>
            num<span class="token punctuation">:</span> <span class="token number">2000</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// id</span>
            <span class="token comment" spellcheck="true">// pname</span>
            <span class="token comment" spellcheck="true">// price</span>
            <span class="token comment" spellcheck="true">// num</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-3-2、Object-defineProperty"><a href="#4-3-2、Object-defineProperty" class="headerlink" title="4.3.2、Object.defineProperty()"></a>4.3.2、Object.defineProperty()</h3><ul>
<li><code>Object.defineProperty()</code>定义对象中新属性或修改原有的属性(了解)</li>
</ul>
<p><code>Object.defineProperty(obj,prop,descriptor)</code></p>
<ul>
<li>obj : 目标对象</li>
<li>prop : 需定义或修改的属性的名字</li>
<li>descriptor : 目标属性所拥有的特性</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// Object.defineProperty() 定义新属性或修改原有的属性</span>
        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            pname<span class="token punctuation">:</span> <span class="token string">'小米'</span><span class="token punctuation">,</span>
            price<span class="token punctuation">:</span> <span class="token number">1999</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 以前的对象添加和修改属性的方式</span>
        <span class="token comment" spellcheck="true">// obj.num = 1000;</span>
        <span class="token comment" spellcheck="true">// obj.price = 99;</span>
        <span class="token comment" spellcheck="true">// console.log(obj);</span>
        <span class="token comment" spellcheck="true">// 2. Object.defineProperty() 定义新属性或修改原有的属性</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'num'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            value<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
            enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            value<span class="token punctuation">:</span> <span class="token number">9.9</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果值为false 不允许修改这个属性值 默认值也是false</span>
            writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            value<span class="token punctuation">:</span> <span class="token string">'中国山东蓝翔技校xx单元'</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// 如果只为false 不允许修改这个属性值 默认值也是false</span>
            writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span>
            enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// configurable 如果为false 则不允许删除这个属性 不允许在修改第三个参数里面的特性 默认为false</span>
            configurable<span class="token punctuation">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>pname<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            value<span class="token punctuation">:</span> <span class="token string">'中国山东蓝翔技校xx单元'</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// 如果值为false 不允许修改这个属性值 默认值也是false</span>
            writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span>
            enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// configurable 如果为false 则不允许删除这个属性 默认为false</span>
            configurable<span class="token punctuation">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第三个参数 descriptor 说明：以对象形式{ }书写</li>
<li>value：设置属性的值，默认为undefined</li>
<li>writeable: 值是否可以重写 true | false 默认为false</li>
<li>enumerable: 目标属性是否可以被枚举 true | false 默认为false</li>
<li>configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false 默认为false</li>
</ul>
<h1 id="5、函数进阶"><a href="#5、函数进阶" class="headerlink" title="5、函数进阶"></a>5、函数进阶</h1><h2 id="5-1、函数的定义方式"><a href="#5-1、函数的定义方式" class="headerlink" title="5.1、函数的定义方式"></a>5.1、函数的定义方式</h2><ol>
<li>函数声明方式 function 关键字(命名函数)</li>
<li>函数表达式(匿名函数)</li>
<li>new Function()</li>
</ol>
<p><code>var fn = new Function(&#39;参数1&#39;,&#39;参数2&#39;,.....,&#39;函数体&#39;);</code></p>
<ul>
<li><p>Function 里面参数都必须是字符串格式</p>
</li>
<li><p>第三种方式执行效率低，也不方便书写，因此较少使用</p>
</li>
<li><p>所有函数都是 Function 的实例(对象)</p>
</li>
<li><p>函数也属于对象</p>
</li>
</ul>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1.png" alt="函数与对象"></p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">//  函数的定义方式</span>
        <span class="token comment" spellcheck="true">// 1. 自定义函数(命名函数) </span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 2. 函数表达式 (匿名函数)</span>
        <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 3. 利用 new Function('参数1','参数2', '函数体');</span>
        <span class="token comment" spellcheck="true">// Function 里面参数都必须是字符串格式，执行效率低，较少写</span>

        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'console.log(a + b)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 4. 所有函数都是 Function 的实例(对象)</span>
        console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 5. 函数也属于对象</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-2、函数的调用方式"><a href="#5-2、函数的调用方式" class="headerlink" title="5.2、函数的调用方式"></a>5.2、函数的调用方式</h2><ol>
<li>普通函数</li>
<li>对象的方法</li>
<li>构造函数</li>
<li>绑定事件函数</li>
<li>定时器函数</li>
<li>立即执行函数</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 函数的调用方式</span>

        <span class="token comment" spellcheck="true">// 1. 普通函数</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'人生的巅峰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// fn();   fn.call()</span>
        <span class="token comment" spellcheck="true">// 2. 对象的方法</span>
        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'人生的巅峰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3. 构造函数</span>
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 4. 绑定事件函数</span>
        <span class="token comment" spellcheck="true">// btn.onclick = function() {};   // 点击了按钮就可以调用这个函数</span>
        <span class="token comment" spellcheck="true">// 5. 定时器函数</span>
        <span class="token comment" spellcheck="true">// setInterval(function() {}, 1000);  这个函数是定时器自动1秒钟调用一次</span>
        <span class="token comment" spellcheck="true">// 6. 立即执行函数</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'人生的巅峰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 立即执行函数是自动调用</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-3、函数内this的指向"><a href="#5-3、函数内this的指向" class="headerlink" title="5.3、函数内this的指向"></a>5.3、函数内this的指向</h2><ul>
<li><code>this</code>指向，是当我们调用函数的时候确定的，调用方式的不同决定了<code>this</code>的指向不同，一般我们指向我们的调用者</li>
</ul>
<table>
<thead>
<tr>
<th>调用方式</th>
<th>this指向</th>
</tr>
</thead>
<tbody><tr>
<td>普通函数调用</td>
<td>window</td>
</tr>
<tr>
<td>构造函数调用</td>
<td>实例对象，原型对象里面的方法也指向实例对象</td>
</tr>
<tr>
<td>对象方法调用</td>
<td>该方法所属对象</td>
</tr>
<tr>
<td>事件绑定方法</td>
<td>绑定事件对象</td>
</tr>
<tr>
<td>定时器函数</td>
<td>window</td>
</tr>
<tr>
<td>立即执行函数</td>
<td>window</td>
</tr>
</tbody></table>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 函数的不同调用方式决定了this 的指向不同</span>
        <span class="token comment" spellcheck="true">// 1. 普通函数 this 指向window</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通函数的this'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. 对象的方法 this指向的是对象 o</span>
        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对象方法的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3. 构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象</span>
        <span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        Star<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 4. 绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</span>
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绑定时间函数的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 5. 定时器函数 this 指向的也是window</span>
        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 6. 立即执行函数 this还是指向window</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'立即执行函数的this'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-4、改变函数内部this指向"><a href="#5-4、改变函数内部this指向" class="headerlink" title="5.4、改变函数内部this指向"></a>5.4、改变函数内部this指向</h2><ul>
<li>JavaScript 为我们专门提供了一些函数方法来帮我们处理函数内部 this 的指向问题，常用的有 <code>bind(),call(),apply()</code>三种方法</li>
</ul>
<h3 id="5-4-1、call-方法"><a href="#5-4-1、call-方法" class="headerlink" title="5.4.1、call() 方法"></a>5.4.1、call() 方法</h3><ul>
<li><code>call()</code>方法调用一个对象，简单理解为调用函数的方式，但是它可以改变函数的<code>this</code>指向</li>
<li><code>fun.call(thisArg,arg1,arg2,.....)</code></li>
<li><code>thisArg</code>: 在 fun 函数运行时指定的 this 值</li>
<li><code>arg1,arg2</code>: 传递的其他参数</li>
<li>返回值就是函数的返回值，因为它就是调用函数</li>
<li>因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span>
        <span class="token comment" spellcheck="true">// 1. call()</span>
        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'andy'</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// call 第一个可以调用函数 第二个可以改变函数内的this 指向</span>
        <span class="token comment" spellcheck="true">// call 的主要作用可以实现继承</span>
        <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-4-2、apply-方法"><a href="#5-4-2、apply-方法" class="headerlink" title="5.4.2、apply()方法"></a>5.4.2、apply()方法</h3><ul>
<li><code>apply()</code>方法调用一个函数，简单理解为调用函数的方式，但是它可以改变函数的 <code>this</code>指向</li>
<li><code>fun.apply(thisArg,[argsArray])</code></li>
<li>thisArg: 在 fun 函数运行时指定的 this 值</li>
<li>argsArray : 传递的值，必须包含在数组里面</li>
<li>返回值就是函数的返回值，因为它就是调用函数</li>
<li>因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span>

        <span class="token comment" spellcheck="true">// 2. apply()  应用 运用的意思</span>
        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'andy'</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'pink'</span>

        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 也是调用函数 第二个可以改变函数内部的this指向</span>
        <span class="token comment" spellcheck="true">// 2. 但是他的参数必须是数组(伪数组)</span>
        <span class="token comment" spellcheck="true">// 3. apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求数组最大值 </span>
        <span class="token comment" spellcheck="true">// Math.max();</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// var max = Math.max.apply(null, arr);</span>
        <span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-4-3、bind-方法"><a href="#5-4-3、bind-方法" class="headerlink" title="5.4.3、bind()方法"></a>5.4.3、bind()方法</h3><ul>
<li><code>bind()</code>方法不会调用函数。但是能改变函数内部 <code>this</code>指向</li>
<li><code>fun.bind(thisArg,arg1,arg2,....)</code></li>
<li>返回由指定的 <code>this</code>值和初始化参数改造的 原函数拷贝</li>
<li>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span>

        <span class="token comment" spellcheck="true">// 3. bind()  绑定 捆绑的意思</span>
        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'andy'</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> f <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 不会调用原来的函数   可以改变原来函数内部的this 指向</span>
        <span class="token comment" spellcheck="true">// 2. 返回的是原函数改变this之后产生的新函数</span>
        <span class="token comment" spellcheck="true">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span>
        <span class="token comment" spellcheck="true">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span>
        <span class="token comment" spellcheck="true">// var btn1 = document.querySelector('button');</span>
        <span class="token comment" spellcheck="true">// btn1.onclick = function() {</span>
        <span class="token comment" spellcheck="true">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span>
        <span class="token comment" spellcheck="true">//     // var that = this;</span>
        <span class="token comment" spellcheck="true">//     setTimeout(function() {</span>
        <span class="token comment" spellcheck="true">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span>
        <span class="token comment" spellcheck="true">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span>
        <span class="token comment" spellcheck="true">//     }.bind(this), 3000); // 这个this 指向的是btn 这个对象</span>
        <span class="token comment" spellcheck="true">// }</span>
        <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-4-4、总结"><a href="#5-4-4、总结" class="headerlink" title="5.4.4、总结"></a>5.4.4、总结</h3><p>call apply bind 总结：</p>
<p>相同点：</p>
<ul>
<li>都可以改变函数内部的 <code>this</code>指向</li>
</ul>
<p>区别点：</p>
<ul>
<li><code>call</code>和<code>apply</code>会调用函数，并且改变函数内部的<code>this</code>指向</li>
<li><code>call</code>和<code>apply</code>传递的参数不一样，call 传递参数，apply 必须数组形式</li>
<li><code>bind</code>不会调用函数，可以改变函数内部<code>this</code>指向</li>
</ul>
<p>主要应用场景</p>
<ol>
<li><code>call</code>经常做继承</li>
<li><code>apply</code>经常跟数组有关系，比如借助于数学对线实现数组最大值与最小值</li>
<li><code>bind</code>不调用函数，但是还想改变this指向，比如改变定时器内部的this指向</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（五）BOM技术</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><span id="more"></span>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/%E6%A6%82%E8%BF%B0.png" alt="概述"></p>
<h1 id="1、BOM概述"><a href="#1、BOM概述" class="headerlink" title="1、BOM概述"></a>1、BOM概述</h1><ul>
<li>BOM &#x3D; Browser Object Model 👉浏览器对象模型</li>
<li>它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</li>
<li>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li>
<li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA, DOM 的标准化组织是 W3C, BOM最初是Netscape 浏览器标准的一部分</li>
</ul>
<table>
<thead>
<tr>
<th>DOM</th>
<th>BOM</th>
</tr>
</thead>
<tbody><tr>
<td>文档对象模型</td>
<td>浏览器对象模型</td>
</tr>
<tr>
<td>DOM 就是把 文档 当作一个对象来看待</td>
<td>把 浏览器当作一个对象来看待</td>
</tr>
<tr>
<td>DOM 的顶级对象是 document</td>
<td>BOM 的顶级对象是 window</td>
</tr>
<tr>
<td>DOM 主要学习的是操作页面元素</td>
<td>BOM 学习的是浏览器窗口交互的一些对象</td>
</tr>
<tr>
<td>DOM 是 W3C 标准规范</td>
<td>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</td>
</tr>
</tbody></table>
<h2 id="1-1、BOM的构成"><a href="#1-1、BOM的构成" class="headerlink" title="1.1、BOM的构成"></a>1.1、BOM的构成</h2><p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/BOM%E7%9A%84%E6%9E%84%E6%88%90.png" alt="BOM的构成"></p>
<ul>
<li><p>BOM 比 DOM 更大。它包含 DOM。</p>
</li>
<li><p>window 对象是浏览器的顶级对象，它具有双重角色</p>
</li>
<li><p>它是 JS 访问浏览器窗口的一个接口</p>
</li>
<li><p>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法</p>
</li>
<li><p>在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 <code>alert()、prompt()</code>等。</p>
</li>
<li><p><strong>注意</strong> ：window下的一个特殊属性 window.name</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义在全局作用域中的变量会变成window对象的属性</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 10</span>

<span class="token comment" spellcheck="true">// 定义在全局作用域中的函数会变成window对象的方法</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 11</span>

<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//不要用这个name变量,window下有一个特殊属性window.name</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="2、window-对象的常见事件"><a href="#2、window-对象的常见事件" class="headerlink" title="2、window 对象的常见事件"></a>2、window 对象的常见事件</h1><h2 id="2-1、窗口加载事件"><a href="#2-1、窗口加载事件" class="headerlink" title="2.1、窗口加载事件"></a>2.1、窗口加载事件</h2><p><code>window.onload</code>是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件（包括图像，脚本文件，CSS文件等），就调用的处理函数。</p>
<pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 或者</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li><p>有了<code>window.onload</code>就可以把JS代码写到页面元素的上方</p>
</li>
<li><p>因为<code>onload</code>是等页面内容全部加载完毕，再去执行处理函数</p>
</li>
<li><p><code>window.onload</code> 传统注册事件方式，只能写一次</p>
</li>
<li><p>如果有多个，会以最后一个<code>window.onload</code>为准</p>
</li>
<li><p><strong>如果使用addEventListener 则没有限制</strong></p>
</li>
</ul>
<p><code>document.addEventListener(&#39;DOMContentLoaded&#39;,function()&#123;&#125;)</code></p>
<p>接收两个参数：</p>
<ul>
<li><p>DOMCountentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等</p>
</li>
<li><p>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间</p>
</li>
<li><p>交互效果就不能实现，必然影响用户的体验，此时用 <code>DOMContentLoaded</code>事件比较合适。</p>
</li>
</ul>
<h3 id="2-1-1、区别"><a href="#2-1-1、区别" class="headerlink" title="2.1.1、区别"></a>2.1.1、区别</h3><ul>
<li><code>load</code>等页面内容全部加载完毕，包括页面dom元素，图片，flash，css等</li>
<li><code>DOMContentLoaded</code> 是DOM加载完毕，不包含图片 flash css 等就可以执行，加载速度比load更快一些</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// window.onload = function() {</span>
    <span class="token comment" spellcheck="true">//     var btn = document.querySelector('button');</span>
    <span class="token comment" spellcheck="true">//     btn.addEventListener('click', function() {</span>
    <span class="token comment" spellcheck="true">//         alert('点击我');</span>
    <span class="token comment" spellcheck="true">//     })</span>
    <span class="token comment" spellcheck="true">// }</span>
    <span class="token comment" spellcheck="true">// window.onload = function() {</span>
    <span class="token comment" spellcheck="true">//     alert(22);</span>
    <span class="token comment" spellcheck="true">// }</span>
    
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点击我'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span>
        <span class="token comment" spellcheck="true">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-2、调整窗口大小事件"><a href="#2-2、调整窗口大小事件" class="headerlink" title="2.2、调整窗口大小事件"></a>2.2、调整窗口大小事件</h2><p><code>window.onresize</code> 是调整窗口大小加载事件，当触发时就调用的处理函数</p>
<pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 或者</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>只要窗口大小发生像素变化，就会触发这个事件</li>
<li>我们经常利用这个事件完成响应式布局。<code>window.innerWidth</code> 当前屏幕的宽度</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>

                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'变化了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">&lt;=</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="3、定时器"><a href="#3、定时器" class="headerlink" title="3、定时器"></a>3、定时器</h1><p>window 对象给我们提供了两个定时器</p>
<ul>
<li><code>setTimeout()</code></li>
<li><code>setInterval()</code></li>
</ul>
<h2 id="3-1、setTimeout-定时器"><a href="#3-1、setTimeout-定时器" class="headerlink" title="3.1、setTimeout()定时器"></a>3.1、setTimeout()定时器</h2><p><code>setTimeout()</code>方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p>
<p><code>window.setTimeout(调用函数,[延迟的毫秒数]);</code></p>
<p><strong>注意</strong> ：</p>
<ul>
<li><code>window</code>可以省略</li>
<li>这个调用函数 <ul>
<li>可以直接写函数</li>
<li>或者写函数名</li>
<li>或者采取字符串 <strong>‘函数名()’</strong> （不推荐）</li>
</ul>
</li>
<li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li>
<li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li>
<li><code>setTimeout()</code> 这个调用函数我们也称为 <strong>回调函数</strong> callback</li>
<li>普通函数是按照代码顺序直接调用，而这个函数，需要等待事件，事件到了才会去调用这个函数，因此称为回调函数。</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. setTimeout </span>
        <span class="token comment" spellcheck="true">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span>
        <span class="token comment" spellcheck="true">// 1. 这个window在调用的时候可以省略</span>
        <span class="token comment" spellcheck="true">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span>
        <span class="token comment" spellcheck="true">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 '函数名()'</span>
        <span class="token comment" spellcheck="true">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字）</span>
        <span class="token comment" spellcheck="true">// setTimeout(function() {</span>
        <span class="token comment" spellcheck="true">//     console.log('时间到了');</span>

        <span class="token comment" spellcheck="true">// }, 2000);</span>
        <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爆炸了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> timer2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// setTimeout('callback()', 3000); // 我们不提倡这个写法</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-2、clearTimeout-停止定时器"><a href="#3-2、clearTimeout-停止定时器" class="headerlink" title="3.2、clearTimeout()停止定时器"></a>3.2、clearTimeout()停止定时器</h2><ul>
<li><code>clearTimeout()</code>方法取消了先前通过调用 <code>setTimeout()</code>建立的定时器</li>
</ul>
<p><code>window.clearTimeout(timeoutID)</code></p>
<p><strong>注意</strong> ：</p>
<ul>
<li><code>window</code>可以省略</li>
<li>里面的参数就是定时器的标识符</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击停止定时器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'爆炸了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-3、setInterval-定时器"><a href="#3-3、setInterval-定时器" class="headerlink" title="3.3、setInterval()定时器"></a>3.3、setInterval()定时器</h2><ul>
<li><code>setInterval()</code>方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</li>
</ul>
<p><code>window.setInterval(回调函数,[间隔的毫秒数]);</code></p>
<ul>
<li><code>window</code>可以省略</li>
<li>这个回调函数: <ul>
<li>可以直接写函数</li>
<li>或者写函数名</li>
<li>或者采取字符 ‘函数名()’</li>
</ul>
</li>
<li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. setInterval </span>
        <span class="token comment" spellcheck="true">// 语法规范：  window.setInterval(调用函数, 延时时间);</span>
        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'继续输出'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. setTimeout  延时时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器</span>
        <span class="token comment" spellcheck="true">// 3. setInterval  每隔这个延时时间，就去调用这个回调函数，会调用很多次，重复调用这个函数</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-4、clearInterval-停止定时器"><a href="#3-4、clearInterval-停止定时器" class="headerlink" title="3.4、clearInterval()停止定时器"></a>3.4、clearInterval()停止定时器</h2><ul>
<li><code>clearInterval ( )</code> 方法取消了先前通过调用 <code>setInterval()</code> 建立的定时器</li>
</ul>
<p><strong>注意</strong> ：</p>
<ul>
<li><code>window</code>可以省略</li>
<li>里面的参数就是定时器的标识符</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>begin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开启定时器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止定时器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> begin <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.begin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> stop <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.stop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局变量  null是一个空对象</span>
        begin<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ni hao ma'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        stop<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-5、this指向"><a href="#3-5、this指向" class="headerlink" title="3.5、this指向"></a>3.5、this指向</h2><ul>
<li><code>this</code>的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定<code>this</code>到底指向谁</li>
</ul>
<p>现阶段，我们先了解一下几个this指向</p>
<ul>
<li>全局作用域或者普通函数中<code>this</code>指向全局对象<code>window</code>(注意定时器里面的this指向window)</li>
<li>方法调用中谁调用<code>this</code>指向谁</li>
<li>构造函数中<code>this</code>指向构造函数实例</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span>

        <span class="token comment" spellcheck="true">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. 方法调用中谁调用this指向谁</span>
        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
            sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向的是 o 这个对象</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// btn.onclick = function() {</span>
        <span class="token comment" spellcheck="true">//     console.log(this); // this指向的是btn这个按钮对象</span>
        <span class="token comment" spellcheck="true">// }</span>
        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向的是btn这个按钮对象</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// 3. 构造函数中this指向构造函数的实例</span>
        <span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this 指向的是fun 实例对象</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="4、JS执行机制"><a href="#4、JS执行机制" class="headerlink" title="4、JS执行机制"></a>4、JS执行机制</h1><h2 id="4-1、JS是单线程"><a href="#4-1、JS是单线程" class="headerlink" title="4.1、JS是单线程"></a>4.1、JS是单线程</h2><ul>
<li>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</li>
<li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li>
</ul>
<h2 id="4-2、一个问题"><a href="#4-2、一个问题" class="headerlink" title="4.2、一个问题"></a>4.2、一个问题</h2><p>以下代码执行的结果是什么？</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么以下代码执行的结果又是什么？</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3、同步和异步"><a href="#4-3、同步和异步" class="headerlink" title="4.3、同步和异步"></a>4.3、同步和异步</h2><ul>
<li>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程</li>
<li>于是，JS 中出现了同步和异步。</li>
<li>同步: <ul>
<li>前一个任务结束后再执行后一个任务</li>
</ul>
</li>
<li>异步： <ul>
<li>在做这件事的同时，你还可以去处理其他事情</li>
</ul>
</li>
</ul>
<blockquote>
<p>同步任务</p>
</blockquote>
<ul>
<li>同步任务都在主线程上执行，形成一个 执行栈</li>
</ul>
<blockquote>
<p>异步任务</p>
</blockquote>
<ul>
<li>JS中的异步是通过回调函数实现的</li>
<li>异步任务有以下三种类型 <ul>
<li>普通事件，如<code>click</code>,<code>resize</code>等</li>
<li>资源加载，如<code>load</code>,<code>error</code>等</li>
<li>定时器，包括<code>setInterval</code>,<code>setTimeout</code>等</li>
</ul>
</li>
<li>异步任务相关回调函数添加到任务队列中</li>
</ul>
<ol>
<li>先执行执行栈中的同步任务</li>
<li>异步任务(回调函数)放入任务队列中</li>
<li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li>
</ol>
<p>此时再来看我们刚才的问题：</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>执行的结果和顺序为 1、2、3</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>执行的结果和顺序为 1、2、3</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 3. 第三个问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/%E5%BC%82%E6%AD%A5.png" alt="异步"></p>
<p>同步任务放在执行栈中执行，异步任务由异步进程处理放到任务队列中，执行栈中的任务执行完毕会去任务队列中查看是否有异步任务执行，由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（event loop）。</p>
<h1 id="5、location对象"><a href="#5、location对象" class="headerlink" title="5、location对象"></a>5、location对象</h1><ul>
<li>window 对象给我们提供了一个 <code>location</code>属性用于获取或者设置窗体的url，并且可以解析url。因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</li>
</ul>
<h2 id="5-1、url"><a href="#5-1、url" class="headerlink" title="5.1、url"></a>5.1、url</h2><p>&#x3D;&#x3D;统一资源定位符（uniform resouce locator）&#x3D;&#x3D;是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的<br>URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p>
<p>url 的一般语法格式为：</p>
<p><code>protocol://host[:port]/path/[?query]#fragment</code></p>
<p>例子：<code>http://www.itcast.cn/index.html?name=andy&amp;age=18#link</code></p>
<table>
<thead>
<tr>
<th>组成</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>protocol</td>
<td>通信协议 常用的http,ftp,maito等</td>
</tr>
<tr>
<td>host</td>
<td>主机(域名) <a href="http://www.itheima.com/">www.itheima.com</a></td>
</tr>
<tr>
<td>port</td>
<td>端口号，可选</td>
</tr>
<tr>
<td>path</td>
<td>路径 由零或多个<code>&#39;/&#39;</code>符号隔开的字符串</td>
</tr>
<tr>
<td>query</td>
<td>参数 以键值对的形式，通过<code>&amp;</code>符号分隔开来</td>
</tr>
<tr>
<td>fragment</td>
<td>片段 <code>#</code>后面内容 常见于链接 锚点</td>
</tr>
</tbody></table>
<h2 id="5-2、location对象属性"><a href="#5-2、location对象属性" class="headerlink" title="5.2、location对象属性"></a>5.2、location对象属性</h2><table>
<thead>
<tr>
<th>location对象属性</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>location.href</td>
<td>获取或者设置整个URL</td>
</tr>
<tr>
<td>location.host</td>
<td>返回主机（域名）<a href="http://www.baidu.com/">www.baidu.com</a></td>
</tr>
<tr>
<td>location.port</td>
<td>返回端口号，如果未写返回空字符串</td>
</tr>
<tr>
<td>location.pathname</td>
<td>返回路径</td>
</tr>
<tr>
<td>location.search</td>
<td>返回参数</td>
</tr>
<tr>
<td>location.hash</td>
<td>返回片段 #后面内容常见于链接 锚点</td>
</tr>
</tbody></table>
<p>重点记住： <code>href</code>和<code>search</code></p>
<p>需求：5s之后跳转页面</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.itcast.cn'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'您将在'</span> <span class="token operator">+</span> timer <span class="token operator">+</span> <span class="token string">'秒钟之后跳转到首页'</span><span class="token punctuation">;</span>
                timer<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-3、location对象方法"><a href="#5-3、location对象方法" class="headerlink" title="5.3、location对象方法"></a>5.3、location对象方法</h2><table>
<thead>
<tr>
<th>location对象方法</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>location.assign()</td>
<td>跟href一样，可以跳转页面（也称为重定向页面）</td>
</tr>
<tr>
<td>location.replace()</td>
<td>替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td>location.reload()</td>
<td>重新加载页面，相当于刷新按钮或者 f5 ，如果参数为true 强制刷新 ctrl+f5</td>
</tr>
</tbody></table>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 记录浏览历史，所以可以实现后退功能</span>
            <span class="token comment" spellcheck="true">// location.assign('http://www.itcast.cn');</span>
            <span class="token comment" spellcheck="true">// 不记录浏览历史，所以不可以实现后退功能</span>
            <span class="token comment" spellcheck="true">// location.replace('http://www.itcast.cn');</span>
            location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-4、获取URL参数"><a href="#5-4、获取URL参数" class="headerlink" title="5.4、获取URL参数"></a>5.4、获取URL参数</h2><p>我们简单写一个登录框，点击登录跳转到 index.html</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        用户名： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来我们写 index.html</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ?uname=andy</span>
        <span class="token comment" spellcheck="true">// 1.先去掉？  substr('起始的位置'，截取几个字符);</span>
        <span class="token keyword">var</span> params <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// uname=andy</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. 利用=把字符串分割为数组 split('=');</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["uname", "ANDY"]</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3.把数据写入div中</span>
        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'欢迎您'</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样我们就能获取到路径上的URL参数</p>
<h1 id="6、navigator对象"><a href="#6、navigator对象" class="headerlink" title="6、navigator对象"></a>6、navigator对象</h1><ul>
<li>navigator 对象包含有关浏览器的信息，它有很多属性</li>
<li>我们常用的是<code>userAgent</code>,该属性可以返回由客户机发送服务器的<code>user-agent</code>头部的值</li>
</ul>
<p>下面前端代码可以判断用户是用哪个终端打开页面的，如果是用 PC 打开的，我们就跳转到 PC 端的页面，如果是用手机打开的，就跳转到手机端页面</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//手机</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//电脑</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="7、history对象"><a href="#7、history对象" class="headerlink" title="7、history对象"></a>7、history对象</h1><ul>
<li>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互</li>
<li>该对象包含用户（在浏览器窗口中）访问过的 URL。</li>
</ul>
<table>
<thead>
<tr>
<th>history对象方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>可以后退功能</td>
</tr>
<tr>
<td>forward()</td>
<td>前进功能</td>
</tr>
<tr>
<td>go(参数)</td>
<td>前进后退功能，参数如果是 1 前进1个页面 如果是 -1 后退1个页面</td>
</tr>
</tbody></table>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我去往列表页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>前进<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// history.forward();</span>
            history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（四）DOM技术</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><span id="more"></span>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/%E6%A6%82%E8%BF%B0.png" alt="概述"></p>
<h1 id="1、DOM简介"><a href="#1、DOM简介" class="headerlink" title="1、DOM简介"></a>1、DOM简介</h1><h2 id="1-1、什么是DOM"><a href="#1-1、什么是DOM" class="headerlink" title="1.1、什么是DOM"></a>1.1、什么是DOM</h2><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口</p>
<p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/DOM%E6%A0%91.png" alt="DOM树"></p>
<ul>
<li>文档：一个页面就是一个文档，DOM中使用doucument来表示</li>
<li>元素：页面中的所有标签都是元素，DOM中使用 element 表示</li>
<li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</li>
</ul>
<p>DOM 把以上内容都看做是对象</p>
<h1 id="2、获取元素"><a href="#2、获取元素" class="headerlink" title="2、获取元素"></a>2、获取元素</h1><h2 id="2-1、如何获取页面元素"><a href="#2-1、如何获取页面元素" class="headerlink" title="2.1、如何获取页面元素"></a>2.1、如何获取页面元素</h2><p>DOM在我们实际开发中主要用来操作元素。</p>
<p>我们如何来获取页面中的元素呢?</p>
<p>获取页面中的元素可以使用以下几种方式:</p>
<ul>
<li>根据 ID 获取</li>
<li>根据标签名获取</li>
<li>通过 HTML5 新增的方法获取</li>
<li>特殊元素获取</li>
</ul>
<h2 id="2-2、根据ID获取"><a href="#2-2、根据ID获取" class="headerlink" title="2.2、根据ID获取"></a>2.2、根据ID获取</h2><p>使用 <code>getElementByld()</code> 方法可以获取带ID的元素对象</p>
<pre class="line-numbers language-js"><code class="language-js">doucument<span class="token punctuation">.</span><span class="token function">getElementByld</span><span class="token punctuation">(</span><span class="token string">'id名'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用 <code>console.dir()</code> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p>
<p><strong>示例</strong></p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2019-9-9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// 1.因为我们文档页面从上往下加载，所以得先有标签，所以script写在标签下面</span>
    <span class="token comment" spellcheck="true">// 2.get 获得 element 元素 by 通过 驼峰命名法</span>
    <span class="token comment" spellcheck="true">// 3.参数 id是大小写敏感的字符串</span>
    <span class="token comment" spellcheck="true">// 4.返回的是一个元素对象</span>
    <span class="token keyword">var</span> timer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 5. console.dir 打印我们的元素对象，更好的查看里面的属性和方法</span>
    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-3、根据标签名获取"><a href="#2-3、根据标签名获取" class="headerlink" title="2.3、根据标签名获取"></a>2.3、根据标签名获取</h2><p>根据 <strong>标签名</strong> 获取，使用 <code>getElementByTagName()</code> 方法可以返回带有指定标签名的 <strong>对象的集合</strong></p>
<pre class="line-numbers language-js"><code class="language-js">doucument<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li>
<li>得到元素对象是动态的</li>
<li>返回的是获取过来元素对象的集合，以伪数组的形式存储</li>
<li>如果获取不到元素，则返回为空的伪数组(因为获取不到对象)</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应是等你好久<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应是等你好久<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应是等你好久<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应是等你好久<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，应是等你好久<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// 1.返回的是获取过来元素对象的集合 以伪数组的形式存储</span>
    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 2.依次打印,遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// 3.如果页面中只有 1 个 li，返回的还是伪数组的形式</span>
    <span class="token comment" spellcheck="true">// 4.如果页面中没有这个元素，返回的是空伪数组</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-4、根据标签名获取"><a href="#2-4、根据标签名获取" class="headerlink" title="2.4、根据标签名获取"></a>2.4、根据标签名获取</h2><p>还可以根据标签名获取某个元素（父元素）内部所有指定标签名的子元素,获取的时候不包括父元素自己</p>
<p><code>element.getElementsByTagName(&#39;标签名&#39;)</code></p>
<pre class="line-numbers language-js"><code class="language-js">ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注意：父元素必须是单个对象(必须指明是哪一个元素对象)，获取的时候不包括父元素自己</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">//element.getElementsByTagName('标签名'); 父元素必须是指定的单个元素</span>
    <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-5、通过H5新增方法获取"><a href="#2-5、通过H5新增方法获取" class="headerlink" title="2.5、通过H5新增方法获取"></a>2.5、通过H5新增方法获取</h2><h3 id="①getElementsByClassName"><a href="#①getElementsByClassName" class="headerlink" title="①getElementsByClassName"></a>①getElementsByClassName</h3><p>根据类名返回元素对象合集</p>
<ul>
<li><code>document.getElementsByClassName(&#39;类名&#39;)</code></li>
</ul>
<h3 id="②document-querySelector"><a href="#②document-querySelector" class="headerlink" title="②document.querySelector"></a>②document.querySelector</h3><p>根据指定选择器返回第一个元素对象</p>
<p><code>document.querySelector(&#39;选择器&#39;);</code></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 切记里面的选择器需要加符号 </span>
<span class="token comment" spellcheck="true">// 类选择器.box </span>
<span class="token comment" spellcheck="true">// id选择器 #nav</span>
<span class="token keyword">var</span> firstBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="③document-querySelectorAll"><a href="#③document-querySelectorAll" class="headerlink" title="③document.querySelectorAll"></a>③document.querySelectorAll</h3><p>根据指定选择器返回所有元素对象</p>
<p><code>document.querySelectorAll(&#39;选择器&#39;);</code></p>
<p>注意：</p>
<p><code>querySelector</code> 和 <code>querySelectorAll</code> 里面的选择器需要加符号,比如:<br><code>document.querySelector(&#39;#nav&#39;);</code></p>
<h3 id="④例子"><a href="#④例子" class="headerlink" title="④例子"></a>④例子</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 1. getElementsByClassName 根据类名获得某些元素集合</span>
    <span class="token keyword">var</span> boxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boxs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span>
    <span class="token keyword">var</span> firstBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> nav <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nav<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span>
    <span class="token keyword">var</span> allBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-6、获取特殊元素"><a href="#2-6、获取特殊元素" class="headerlink" title="2.6、获取特殊元素"></a>2.6、获取特殊元素</h2><h3 id="①获取body元素"><a href="#①获取body元素" class="headerlink" title="①获取body元素"></a>①获取body元素</h3><p>返回body元素对象</p>
<p><code>document.body;</code></p>
<h3 id="②获取html元素"><a href="#②获取html元素" class="headerlink" title="②获取html元素"></a>②获取html元素</h3><p>返回html元素对象</p>
<p><code>document.documentElement;</code></p>
<h1 id="3、事件基础"><a href="#3、事件基础" class="headerlink" title="3、事件基础"></a>3、事件基础</h1><h2 id="3-1、事件概述"><a href="#3-1、事件概述" class="headerlink" title="3.1、事件概述"></a>3.1、事件概述</h2><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p>
<p>简单理解： 触发— 响应机制。</p>
<p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p>
<h2 id="3-2、事件三要素"><a href="#3-2、事件三要素" class="headerlink" title="3.2、事件三要素"></a>3.2、事件三要素</h2><ol>
<li>事件源(谁)</li>
<li>事件类型(什么事件)</li>
<li>事件处理程序(做啥)</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 点击一个按钮，弹出对话框</span>
    <span class="token comment" spellcheck="true">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span>
    <span class="token comment" spellcheck="true">//(1) 事件源 事件被触发的对象   谁  按钮</span>
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span>
    <span class="token comment" spellcheck="true">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span>
    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点秋香'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-3、执行事件的步骤"><a href="#3-3、执行事件的步骤" class="headerlink" title="3.3、执行事件的步骤"></a>3.3、执行事件的步骤</h2><ol>
<li>获取事件源</li>
<li>注册事件(绑定事件)</li>
<li>添加事件处理程序(采取函数赋值形式)</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 执行事件步骤</span>
    <span class="token comment" spellcheck="true">// 点击div 控制台输出 我被选中了</span>
    <span class="token comment" spellcheck="true">// 1. 获取事件源</span>
    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 2.绑定事件 注册事件</span>
    <span class="token comment" spellcheck="true">// div.onclick </span>
    <span class="token comment" spellcheck="true">// 3.添加事件处理程序 </span>
    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我被选中了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-4、鼠标事件"><a href="#3-4、鼠标事件" class="headerlink" title="3.4、鼠标事件"></a>3.4、鼠标事件</h2><table>
<thead>
<tr>
<th>鼠标事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标点击左键触发</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过触发</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标离开触发</td>
</tr>
<tr>
<td>onfocus</td>
<td>获得鼠标焦点触发</td>
</tr>
<tr>
<td>onblur</td>
<td>失去鼠标焦点触发</td>
</tr>
<tr>
<td>onmousemove</td>
<td>鼠标移动触发</td>
</tr>
<tr>
<td>onmouseup</td>
<td>鼠标弹起触发</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按下触发</td>
</tr>
</tbody></table>
<h1 id="4、操作元素"><a href="#4、操作元素" class="headerlink" title="4、操作元素"></a>4、操作元素</h1><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p>
<h2 id="4-1、改变元素内容"><a href="#4-1、改变元素内容" class="headerlink" title="4.1、改变元素内容"></a>4.1、改变元素内容</h2><p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉。</p>
<p><code>element.innerText</code></p>
<p>起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行</p>
<p><code>element.innerHTML</code></p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
        我是文字
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// innerText 和 innerHTML的区别 </span>
        <span class="token comment" spellcheck="true">// 1. innerText 不识别html标签,去除空格和换行</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;strong>今天是：&lt;/strong> 2019'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. innerHTML 识别html标签 保留空格和换行的</span>
        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;strong>今天是：&lt;/strong> 2019'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这两个属性是可读写的  可以获取元素里面的内容</span>
        <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>也就是说 innerText 只是字符串，innerHTML 是html文本会被解析：<br><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/innerText%E4%B8%8EinnerHTML.png" alt="innerText与innerHTML"></li>
</ul>
<h2 id="4-2、改变元素属性"><a href="#4-2、改变元素属性" class="headerlink" title="4.2、改变元素属性"></a>4.2、改变元素属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// img.属性</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>

input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
input<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
input<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>
input<span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">/</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
input<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">/</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3、改变样式属性"><a href="#4-3、改变样式属性" class="headerlink" title="4.3、改变样式属性"></a>4.3、改变样式属性</h2><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<ul>
<li>行内样式操作</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// element.style</span>
div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'250px'</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>类名样式操作</li>
</ul>
<p><code>element.className</code></p>
<p>注意：</p>
<ol>
<li>JS里面的样式采取驼峰命名法，比如 fontSize ，backgroundColor</li>
<li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li>
<li>如果样式修改较多，可以采取操作类名方式更改元素样式</li>
<li>class 因为是个保留字，因此使用<code>className</code>来操作元素类名属性</li>
<li>className 会直接更改元素的类名，会覆盖原先的类名</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span>
        <span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this.style.backgroundColor = 'purple';</span>
            <span class="token comment" spellcheck="true">// this.style.color = '#fff';</span>
            <span class="token comment" spellcheck="true">// this.style.fontSize = '25px';</span>
            <span class="token comment" spellcheck="true">// this.style.marginTop = '100px';</span>
            <span class="token comment" spellcheck="true">// 让我们当前元素的类名改为了 change</span>

            <span class="token comment" spellcheck="true">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span>
            <span class="token comment" spellcheck="true">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span>
            <span class="token comment" spellcheck="true">// this.className = 'change';</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'first change'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-5、排他思想"><a href="#4-5、排他思想" class="headerlink" title="4.5、排他思想"></a>4.5、排他思想</h2><p>如果有同一组元素，我们相要某一个元素实现某种样式，需要用到循环的排他思想算法：</p>
<ol>
<li>所有元素全部清除样式（干掉其他人）</li>
<li>给当前元素设置样式 （留下我自己）</li>
<li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li>
</ol>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. 获取所有按钮元素</span>
        <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// btns得到的是伪数组  里面的每一个元素 btns[i]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3.gif" alt="排他思想"></p>
<h2 id="4-6、自定义属性"><a href="#4-6、自定义属性" class="headerlink" title="4.6、自定义属性"></a>4.6、自定义属性</h2><h3 id="4-6-1、获取属性值"><a href="#4-6-1、获取属性值" class="headerlink" title="4.6.1、获取属性值"></a>4.6.1、获取属性值</h3><ul>
<li><p>获取内置属性值(元素本身自带的属性)<br><code>element.属性;</code></p>
</li>
<li><p>获取自定义的属性<br><code>element.getAttribute(&#39;属性&#39;);</code></p>
</li>
</ul>
<h3 id="4-6-2、设置属性值"><a href="#4-6-2、设置属性值" class="headerlink" title="4.6.2、设置属性值"></a>4.6.2、设置属性值</h3><ul>
<li><p>设置内置属性值<br><code>element.属性 = &#39;值&#39;;</code></p>
</li>
<li><p>主要设置自定义的属性<br><code>element.setAttribute(&#39;属性&#39;,&#39;值&#39;);</code></p>
</li>
</ul>
<h3 id="4-6-3、移除属性"><a href="#4-6-3、移除属性" class="headerlink" title="4.6.3、移除属性"></a>4.6.3、移除属性</h3><p><code>element.removeAttribute(&#39;属性&#39;);</code></p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 获取元素的属性值</span>
        <span class="token comment" spellcheck="true">// (1) element.属性</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//(2) element.getAttribute('属性')  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. 设置元素属性值</span>
        <span class="token comment" spellcheck="true">// (1) element.属性= '值'</span>
        div<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'navs'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// (2) element.setAttribute('属性', '值');  主要针对于自定义属性</span>
        div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'footer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// class 特殊  这里面写的就是class 不是className</span>
        <span class="token comment" spellcheck="true">// 3 移除属性 removeAttribute(属性)    </span>
        div<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-7、H5自定义属性"><a href="#4-7、H5自定义属性" class="headerlink" title="4.7、H5自定义属性"></a>4.7、H5自定义属性</h2><p>自定义属性目的：</p>
<ul>
<li>保存并保存数据，有些数据可以保存到页面中而不用保存到数据库中</li>
<li>有些自定义属性很容易引起歧义，不容易判断到底是内置属性还是自定义的，所以H5有了规定</li>
</ul>
<h3 id="4-7-1-设置H5自定义属性"><a href="#4-7-1-设置H5自定义属性" class="headerlink" title="4.7.1 设置H5自定义属性"></a>4.7.1 设置H5自定义属性</h3><p>H5规定自定义属性 <code>data-</code>开头作为属性名并赋值</p>
<pre class="line-numbers language-markup"><code class="language-markup">&lt;div data-index = "1">&lt;/>
// 或者使用JavaScript设置
div.setAttribute('data-index',1);
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="4-7-2-获取H5自定义属性"><a href="#4-7-2-获取H5自定义属性" class="headerlink" title="4.7.2 获取H5自定义属性"></a>4.7.2 获取H5自定义属性</h3><ul>
<li>兼容性获取 <code>element.getAttribute(&#39;data-index&#39;)</code></li>
<li>H5新增的：<code>element.dataset.index</code> 或<code>element.dataset[&#39;index&#39;]</code> IE11才开始支持</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">getTime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">data-list-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>andy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'getTime'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-time'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-list-name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span>
        <span class="token comment" spellcheck="true">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>listName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span><span class="token string">'listName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="5、节点操作"><a href="#5、节点操作" class="headerlink" title="5、节点操作"></a>5、节点操作</h1><p>获取元素通常使用两种方式：</p>
<table>
<thead>
<tr>
<th>1.利用DOM提供的方法获取元素</th>
<th>2.利用节点层级关系获取元素</th>
</tr>
</thead>
<tbody><tr>
<td>document.getElementById()</td>
<td>利用父子兄节点关系获取元素</td>
</tr>
<tr>
<td>document.getElementsByTagName()</td>
<td>逻辑性强，但是兼容性较差</td>
</tr>
<tr>
<td>document.querySelector 等</td>
<td>逻辑性不强，繁琐</td>
</tr>
</tbody></table>
<p>这两种方式都可以获取元素节点，我们后面都会使用，但是节点操作更简单</p>
<p>一般的，节点至少拥有三个基本属性</p>
<h2 id="5-1、节点概述"><a href="#5-1、节点概述" class="headerlink" title="5.1、节点概述"></a>5.1、节点概述</h2><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p>
<p>HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p>
<p>一般的，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p>
<ul>
<li>元素节点：nodeType 为1</li>
<li>属性节点：nodeType 为2</li>
<li>文本节点：nodeType 为3(文本节点包括文字、空格、换行等)</li>
</ul>
<p>我们在实际开发中，节点操作主要操作的是 <strong>元素节点</strong></p>
<p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是 <strong>父子兄层级关系</strong> 。</p>
<h2 id="5-2、父级节点"><a href="#5-2、父级节点" class="headerlink" title="5.2、父级节点"></a>5.2、父级节点</h2><p><code>node.parentNode</code></p>
<ul>
<li><code>parentNode</code>属性可以返回某节点的父结点，注意是最近的一个父结点</li>
<li>如果指定的节点没有父结点则返回null</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 节点的优点 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>erweima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>×<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. 父节点 parentNode</span>
        <span class="token keyword">var</span> erweima <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.erweima'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// var box = document.querySelector('.box');</span>
        <span class="token comment" spellcheck="true">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>erweima<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-3、子结点"><a href="#5-3、子结点" class="headerlink" title="5.3、子结点"></a>5.3、子结点</h2><p><code>parentNode.childNodes(标准)</code></p>
<ul>
<li><code>parentNode.childNodes</code> 返回包含指定节点的子节点的集合，该集合为即时更新的集合</li>
<li>返回值包含了所有的子结点，包括元素节点，文本节点等</li>
<li>如果只想要获得里面的元素节点，则需要专门处理。所以我们一般不提倡使用<code>childNodes</code></li>
</ul>
<p><code>parentNode.children(非标准)</code></p>
<ul>
<li><code>parentNode.children</code> 是一个只读属性，返回所有的子元素节点</li>
<li>它只返回子元素节点，其余节点不返回 （ <strong>这个是我们重点掌握的</strong> ）</li>
<li>虽然 children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// DOM 提供的方法（API）获取</span>
        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> lis <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-3-1、第一个子结点"><a href="#5-3-1、第一个子结点" class="headerlink" title="5.3.1、第一个子结点"></a>5.3.1、第一个子结点</h3><p><code>parentNode.firstChild</code></p>
<ul>
<li><code>firstChild</code> 返回第一个子节点，找不到则返回null</li>
<li>同样，也是包含所有的节点</li>
</ul>
<h3 id="5-3-2、最后一个子结点"><a href="#5-3-2、最后一个子结点" class="headerlink" title="5.3.2、最后一个子结点"></a>5.3.2、最后一个子结点</h3><p><code>parentNode.lastChild</code></p>
<ul>
<li><code>lastChild</code> 返回最后一个子节点，找不到则返回null</li>
<li>同样，也是包含所有的节点</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment" spellcheck="true">//第一个子元素节点</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个子元素节点</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-3-3、第一个子结点-兼容性"><a href="#5-3-3、第一个子结点-兼容性" class="headerlink" title="5.3.3、第一个子结点(兼容性)"></a>5.3.3、第一个子结点(兼容性)</h3><p><code>parentNode.firstElementChild</code></p>
<ul>
<li><code>firstElementChild</code> 返回第一个子节点，找不到则返回null</li>
<li>有兼容性问题，IE9以上才支持</li>
</ul>
<h3 id="5-3-4、最后一个子结点-兼容性"><a href="#5-3-4、最后一个子结点-兼容性" class="headerlink" title="5.3.4、最后一个子结点(兼容性)"></a>5.3.4、最后一个子结点(兼容性)</h3><p><code> parentNode.lastElementChild</code></p>
<ul>
<li><code>lastElementChild</code> 返回最后一个子节点，找不到则返回null</li>
<li>有兼容性问题，IE9以上才支持</li>
</ul>
<h3 id="5-3-5、解决方案"><a href="#5-3-5、解决方案" class="headerlink" title="5.3.5、解决方案"></a>5.3.5、解决方案</h3><p>实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和<br>lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<ul>
<li><p>如果想要第一个子元素节点，可以使用 <code>parentNode.chilren[0]</code></p>
</li>
<li><p>如果想要最后一个子元素节点，可以使用</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 数组元素个数减1 就是最后一个元素的索引号</span>
    parentNode<span class="token punctuation">.</span>chilren<span class="token punctuation">[</span>parentNode<span class="token punctuation">.</span>chilren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>示例：</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是li4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1.firstChild 获取第一个子结点的，包含文本结点和元素结点</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 返回的是文本结点 #text(第一个换行结点)</span>
        
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 返回的是文本结点 #text(最后一个换行结点)</span>
        <span class="token comment" spellcheck="true">// 2. firstElementChild 返回第一个子元素结点</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// &lt;li>我是li1&lt;/li></span>
        
        <span class="token comment" spellcheck="true">// 第2个方法有兼容性问题，需要IE9以上才支持</span>
        <span class="token comment" spellcheck="true">// 3.实际开发中，既没有兼容性问题，又返回第一个子元素</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// &lt;li>我是li1&lt;/li></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// &lt;li>我是li4&lt;/li></span>
        <span class="token comment" spellcheck="true">// 当里面li个数不唯一时候，需要取到最后一个结点时这么写</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ol<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-4、兄弟节点"><a href="#5-4、兄弟节点" class="headerlink" title="5.4、兄弟节点"></a>5.4、兄弟节点</h2><h3 id="5-4-1、下一个兄弟节点"><a href="#5-4-1、下一个兄弟节点" class="headerlink" title="5.4.1、下一个兄弟节点"></a>5.4.1、下一个兄弟节点</h3><p><code>node.nextSibling</code></p>
<ul>
<li><code>nextSibling</code> 返回当前元素的下一个兄弟元素节点，找不到则返回null</li>
<li>同样，也是包含所有的节点</li>
</ul>
<h3 id="5-4-2、上一个兄弟节点"><a href="#5-4-2、上一个兄弟节点" class="headerlink" title="5.4.2、上一个兄弟节点"></a>5.4.2、上一个兄弟节点</h3><p><code>node.previousSibling</code></p>
<ul>
<li><p><code>previousSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回null</p>
</li>
<li><p>同样，也是包含所有的节点</p>
</li>
</ul>
<h3 id="5-4-3、下一个兄弟节点-兼容性"><a href="#5-4-3、下一个兄弟节点-兼容性" class="headerlink" title="5.4.3、下一个兄弟节点(兼容性)"></a>5.4.3、下一个兄弟节点(兼容性)</h3><p><code>node.nextElementSibling</code></p>
<ul>
<li><code>nextElementSibling</code> 返回当前元素下一个兄弟元素节点，找不到则返回null</li>
<li>有兼容性问题，IE9才支持</li>
</ul>
<h3 id="5-4-4、上一个兄弟节点-兼容性"><a href="#5-4-4、上一个兄弟节点-兼容性" class="headerlink" title="5.4.4、上一个兄弟节点(兼容性)"></a>5.4.4、上一个兄弟节点(兼容性)</h3><p><code>node.previousElementSibling</code></p>
<ul>
<li><code>previousElementSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回null</li>
<li>有兼容性问题，IE9才支持</li>
</ul>
<p>示例</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// #text</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">// #text</span>
        <span class="token comment" spellcheck="true">// 2. nextElementSibling 得到下一个兄弟元素节点</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//&lt;span>我是span&lt;/span></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>如何解决兼容性问题 ？</strong></p>
<p>答：自己封装一个兼容性的函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getNextElementSibling</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> el <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>el <span class="token operator">=</span> el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> el<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-5、创建节点"><a href="#5-5、创建节点" class="headerlink" title="5.5、创建节点"></a>5.5、创建节点</h2><p><code>document.createElement(&#39;tagName&#39;);</code></p>
<ul>
<li><code>document.createElement()</code> 方法创建由 tagName 指定的HTML 元素</li>
<li>因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为 <strong>动态创建元素节点</strong></li>
</ul>
<h3 id="5-5-1、添加节点"><a href="#5-5-1、添加节点" class="headerlink" title="5.5.1、添加节点"></a>5.5.1、添加节点</h3><p><code>node.appendChild(child)</code></p>
<ul>
<li><code>node.appendChild()</code> 方法将一个节点添加到指定父节点的子节点列表 <strong>末尾</strong> 。类似于 CSS 里面的 after 伪元素。</li>
</ul>
<p><code>node.insertBefore(child,指定元素)</code></p>
<ul>
<li><code>node.insertBefore()</code> 方法将一个节点添加到父节点的指定子节点 <strong>前面</strong> 。类似于 CSS 里面的 before 伪元素。</li>
</ul>
<p>示例</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. 创建节点元素节点</span>
        <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push</span>
        <span class="token comment" spellcheck="true">// 先获取父亲ul</span>
        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 3. 添加节点 node.insertBefore(child, 指定元素);</span>
        <span class="token keyword">var</span> lili <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>lili<span class="token punctuation">,</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 4. 我们想要页面添加一个新的元素分两步: 1. 创建元素 2. 添加元素</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-5-2、删除节点"><a href="#5-5-2、删除节点" class="headerlink" title="5.5.2、删除节点"></a>5.5.2、删除节点</h3><p><code>node.removeChild(child)</code></p>
<ul>
<li><code>node.removeChild()</code>方法从 DOM 中删除一个子节点，返回删除的节点</li>
</ul>
<h3 id="5-5-3、复制节点-克隆节点"><a href="#5-5-3、复制节点-克隆节点" class="headerlink" title="5.5.3、复制节点(克隆节点)"></a>5.5.3、复制节点(克隆节点)</h3><p><code>node.cloneNode()</code></p>
<ul>
<li><code>node.cloneNode()</code>方法返回调用该方法的节点的一个副本。 也称为克隆节点&#x2F;拷贝节点</li>
<li>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点</li>
<li>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</li>
</ul>
<p>示例</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span>
        <span class="token comment" spellcheck="true">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span>
        <span class="token keyword">var</span> lili <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>lili<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="深拷贝"></p>
<h3 id="5-5-4、面试题"><a href="#5-5-4、面试题" class="headerlink" title="5.5.4、面试题"></a>5.5.4、面试题</h3><p>三种动态创建元素的区别</p>
<ul>
<li>doucument.write()</li>
<li>element.innerHTML</li>
<li>document.createElement()</li>
</ul>
<p>区别：</p>
<ul>
<li><code>document.write()</code> 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</li>
<li><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘</li>
<li><code>innerHTML</code> 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>innner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 2. innerHTML 创建元素</span>
        <span class="token keyword">var</span> inner <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2.1 innerHTML 用拼接字符串方法</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            inner<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;a href="#">百度&lt;/a>'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 2.2 innerHTML 用数组形式拼接</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="#">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        inner<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 3.document.createElement() 创建元素</span>
        <span class="token keyword">var</span> create <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.create'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        create<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>createElement()</code>创建多个元素效率稍低一点点，但是结构更清晰</li>
</ul>
<blockquote>
<p>总结：不同浏览器下， innerHTML 效率要比 createElement 高</p>
</blockquote>
<h1 id="6、DOM核心总结"><a href="#6、DOM核心总结" class="headerlink" title="6、DOM核心总结"></a>6、DOM核心总结</h1><p>对于DOM操作，我们主要针对子元素的操作，主要有</p>
<ul>
<li>创建</li>
<li>增</li>
<li>删</li>
<li>改</li>
<li>查</li>
<li>属性操作</li>
<li>时间操作</li>
</ul>
<h2 id="6-1、创建"><a href="#6-1、创建" class="headerlink" title="6.1、创建"></a>6.1、创建</h2><ol>
<li>document.write</li>
<li>innerHTML</li>
<li>createElement</li>
</ol>
<h2 id="6-2、增"><a href="#6-2、增" class="headerlink" title="6.2、增"></a>6.2、增</h2><ol>
<li>appendChild</li>
<li>insertBefore</li>
</ol>
<h2 id="6-3、删"><a href="#6-3、删" class="headerlink" title="6.3、删"></a>6.3、删</h2><ol>
<li>removeChild</li>
</ol>
<h2 id="6-4、改"><a href="#6-4、改" class="headerlink" title="6.4、改"></a>6.4、改</h2><ul>
<li>主要修改dom的元素属性，dom元素的内容、属性、表单的值等</li>
</ul>
<ol>
<li>修改元素属性：src、href、title 等</li>
<li>修改普通元素内容：innerHTML、innerText</li>
<li>修改表单元素：value、type、disabled</li>
<li>修改元素样式：style、className</li>
</ol>
<h2 id="6-5、查"><a href="#6-5、查" class="headerlink" title="6.5、查"></a>6.5、查</h2><ul>
<li>主要获取查询dom的元素</li>
</ul>
<ol>
<li><strong>DOM提供的API方法</strong> ：getElementById、getElementsByTagName (古老用法，不推荐)</li>
<li><strong>H5提供的新方法</strong> ：querySelector、querySelectorAll (提倡)</li>
<li>利用节点操作获取元素：父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling) 提倡</li>
</ol>
<h2 id="6-6、属性操作"><a href="#6-6、属性操作" class="headerlink" title="6.6、属性操作"></a>6.6、属性操作</h2><ul>
<li>主要针对于自定义属性</li>
</ul>
<ol>
<li>setAttribute：设置dom的属性值</li>
<li>getAttribute：得到dom的属性值</li>
<li>removeAttribute：移除属性</li>
</ol>
<h1 id="7、事件高级"><a href="#7、事件高级" class="headerlink" title="7、事件高级"></a>7、事件高级</h1><h2 id="7-1、注册事件-绑定事件"><a href="#7-1、注册事件-绑定事件" class="headerlink" title="7.1、注册事件(绑定事件)"></a>7.1、注册事件(绑定事件)</h2><p>给元素添加事件，称为注册事件或者绑定事件。</p>
<p>注册事件有两种方式：传统方式和方法监听注册方式</p>
<table>
<thead>
<tr>
<th>传统注册方式</th>
<th>方法监听注册方式</th>
</tr>
</thead>
<tbody><tr>
<td>利用 on 开头的事件 onclick</td>
<td>w3c 标准推荐方式</td>
</tr>
<tr>
<td><code>&lt;button onclick = &quot;alert(&quot;hi&quot;)&quot;&gt;&lt;/button&gt;</code></td>
<td>addEventListener() 它是一个方法</td>
</tr>
<tr>
<td>btn.onclick &#x3D; function() {}</td>
<td>IE9 之前的 IE 不支持此方法，可使用 attachEvent() 代替</td>
</tr>
<tr>
<td>特点：注册事件的唯一性</td>
<td>特点：同一个元素同一个事件可以注册多个监听器</td>
</tr>
<tr>
<td>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</td>
<td>按注册顺序依次执行</td>
</tr>
</tbody></table>
<h3 id="①addEventListener事件监听方式"><a href="#①addEventListener事件监听方式" class="headerlink" title="①addEventListener事件监听方式"></a>①addEventListener事件监听方式</h3><ul>
<li><code>eventTarget.addEventListener()</code>方法将指定的监听器注册到 eventTarget（目标对象）上</li>
<li>当该对象触发指定的事件时，就会执行事件处理函数</li>
</ul>
<p><code> eventTarget.addEventListener(type,listener[,useCapture])</code></p>
<p>该方法接收三个参数：</p>
<ul>
<li><code>type</code>:事件类型字符串，比如click,mouseover,注意这里不要带on</li>
<li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li>
<li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>传统注册事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>方法监听注册事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>ie9 attachEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 1. 传统方式注册事件</span>
        btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hao a u'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 2. 事件监听注册事件 addEventListener </span>
            <span class="token comment" spellcheck="true">// (1) 里面的事件类型是字符串 所以加引号 而且不带on</span>
            <span class="token comment" spellcheck="true">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span>
        btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// 3. attachEvent ie9以前的版本支持</span>
        btns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="②attachEvent事件监听方式-兼容"><a href="#②attachEvent事件监听方式-兼容" class="headerlink" title="②attachEvent事件监听方式(兼容)"></a>②attachEvent事件监听方式(兼容)</h3><ul>
<li><code>eventTarget.attachEvent()</code>方法将指定的监听器注册到 eventTarget（目标对象） 上</li>
<li>当该对象触发指定的事件时，指定的回调函数就会被执行</li>
</ul>
<p><code>eventTarget.attachEvent(eventNameWithOn,callback)</code></p>
<p>该方法接收两个参数：</p>
<ul>
<li><code>eventNameWithOn</code>：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li>
<li><code>callback</code>： 事件处理函数，当目标触发事件时回调函数被调用</li>
<li>ie9以前的版本支持</li>
</ul>
<h3 id="③注册事件兼容性解决方案"><a href="#③注册事件兼容性解决方案" class="headerlink" title="③注册事件兼容性解决方案"></a>③注册事件兼容性解决方案</h3><p>兼容性处理的原则：首先照顾大多数浏览器，再处理特殊浏览器</p>
<pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 addEventListener 方法</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 相当于 element.onclick = fn;</span>
        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-2、删除事件-解绑事件"><a href="#7-2、删除事件-解绑事件" class="headerlink" title="7.2、删除事件(解绑事件)"></a>7.2、删除事件(解绑事件)</h2><h3 id="7-2-1、removeEventListener删除事件方式"><a href="#7-2-1、removeEventListener删除事件方式" class="headerlink" title="7.2.1、removeEventListener删除事件方式"></a>7.2.1、removeEventListener删除事件方式</h3><p><code> eventTarget.removeEventListener(type,listener[,useCapture]);</code></p>
<p>该方法接收三个参数：</p>
<ul>
<li><code>type</code>:事件类型字符串，比如click,mouseover,注意这里不要带on</li>
<li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li>
<li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li>
</ul>
<h3 id="7-2-2、detachEvent删除事件方式-兼容"><a href="#7-2-2、detachEvent删除事件方式-兼容" class="headerlink" title="7.2.2、detachEvent删除事件方式(兼容)"></a>7.2.2、detachEvent删除事件方式(兼容)</h3><p><code> eventTarget.detachEvent(eventNameWithOn,callback);</code></p>
<p>该方法接收两个参数：</p>
<ul>
<li><code>eventNameWithOn</code>：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li>
<li><code>callback</code>： 事件处理函数，当目标触发事件时回调函数被调用</li>
<li>ie9以前的版本支持</li>
</ul>
<h3 id="7-2-3、传统事件删除方式"><a href="#7-2-3、传统事件删除方式" class="headerlink" title="7.2.3、传统事件删除方式"></a>7.2.3、传统事件删除方式</h3><p><code> eventTarget.onclick = null;</code></p>
<p>事件删除示例：</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        divs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 1. 传统方式删除事件</span>
            divs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 2.removeEventListener 删除事件</span>
        divs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//里面的fn不需要调用加小括号</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            divs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 3.IE9 中的删除事件方式</span>
        divs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span>fn1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            divs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span>fn1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-2-4、删除事件兼容性解决方案"><a href="#7-2-4、删除事件兼容性解决方案" class="headerlink" title="7.2.4、删除事件兼容性解决方案"></a>7.2.4、删除事件兼容性解决方案</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 判断当前浏览器是否支持 removeEventListener 方法</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第三个参数 默认是false</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-3、DOM事件流"><a href="#7-3、DOM事件流" class="headerlink" title="7.3、DOM事件流"></a>7.3、DOM事件流</h2><ul>
<li>事件流描述的是从页面中接收事件的顺序</li>
<li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li>
</ul>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/DOM%E4%BA%8B%E4%BB%B6%E6%B5%81.png" alt="DOM事件流"></p>
<ul>
<li><p>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</p>
</li>
<li><p>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</p>
</li>
</ul>
<p><strong>加深理解</strong> ：</p>
<p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（<br>最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。</p>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/DOM%E4%BA%8B%E4%BB%B6%E6%B5%812.png" alt="DOM事件流理解"></p>
<h3 id="7-3-1、捕获阶段"><a href="#7-3-1、捕获阶段" class="headerlink" title="7.3.1、捕获阶段"></a>7.3.1、捕获阶段</h3><ul>
<li>document -&gt; html -&gt; body -&gt; father -&gt; son</li>
</ul>
<p>两个盒子嵌套，一个父盒子一个子盒子，我们的需求是当点击父盒子时弹出 father ，当点击子盒子时弹出 son</p>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>son盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// dom 事件流 三个阶段</span>
        <span class="token comment" spellcheck="true">// 1. JS 代码中只能执行捕获或者冒泡其中的一个阶段。</span>
        <span class="token comment" spellcheck="true">// 2. onclick 和 attachEvent（ie） 只能得到冒泡阶段。</span>
        <span class="token comment" spellcheck="true">// 3. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -> html -> body -> father -> son</span>
        <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        son<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是因为DOM流的影响，我们点击子盒子，会先弹出 father，之后再弹出 son</p>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/DOM%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%BE%8B%E5%AD%90.gif" alt="DOM事件流例子"></p>
<p>这是因为捕获阶段由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收</p>
<ul>
<li><p>document -&gt; html -&gt; body -&gt; father -&gt; son</p>
</li>
<li><p>先看 document 的事件，没有；再看 html 的事件，没有；再看 body 的事件，没有；再看 father 的事件，有就先执行；再看 son 的事件，再执行。</p>
</li>
</ul>
<h3 id="7-3-2、冒泡阶段"><a href="#7-3-2、冒泡阶段" class="headerlink" title="7.3.2、冒泡阶段"></a>7.3.2、冒泡阶段</h3><ul>
<li>son -&gt; father -&gt;body -&gt; html -&gt; document</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>son盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 4. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -> father ->body -> html -> document</span>
        <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        son<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'document'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们点击子盒子，会弹出 son、father、document</p>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/DOM%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%BE%8B%E5%AD%902.gif" alt="DOM事件流例子2"></p>
<p>这是因为冒泡阶段开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p>
<ul>
<li>son -&gt; father -&gt;body -&gt; html -&gt; document</li>
</ul>
<h3 id="7-3-3、小结"><a href="#7-3-3、小结" class="headerlink" title="7.3.3、小结"></a>7.3.3、小结</h3><ul>
<li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段</p>
</li>
<li><p><code>onclick</code> 和 <code>attachEvent</code>只能得到冒泡阶段</p>
</li>
<li><p><code>addEventListener(type,listener[,useCapture])</code>第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false (不写默认就是false),表示在事件冒泡阶段调用事件处理程序</p>
</li>
<li><p>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</p>
</li>
<li><p>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</p>
</li>
</ul>
<h2 id="7-4、事件对象"><a href="#7-4、事件对象" class="headerlink" title="7.4、事件对象"></a>7.4、事件对象</h2><pre class="line-numbers language-js"><code class="language-js">eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span>
<span class="token punctuation">}</span> 
eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt  </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态</li>
<li>简单理解： <ul>
<li>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面</li>
<li>这个对象就是事件对象 event，它有很多属性和方法，比如“ <ul>
<li>谁绑定了这个事件</li>
<li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置</li>
<li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键</li>
</ul>
</li>
</ul>
</li>
<li>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去</li>
<li>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 事件对象</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// console.log(e);</span>
                <span class="token comment" spellcheck="true">// console.log(window.event);</span>
                <span class="token comment" spellcheck="true">// e = e || window.event;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 1. event 就是一个事件对象 写到我们侦听函数的 小括号里面 当形参来看</span>
        <span class="token comment" spellcheck="true">// 2. 事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span>
        <span class="token comment" spellcheck="true">// 3. 事件对象 是 我们事件的一系列相关数据的集合 跟事件相关的 比如鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息 比如 判断用户按下了那个键</span>
        <span class="token comment" spellcheck="true">// 4. 这个事件对象我们可以自己命名 比如 event 、 evt、 e</span>
        <span class="token comment" spellcheck="true">// 5. 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-4-1、事件对象的兼容性方案"><a href="#7-4-1、事件对象的兼容性方案" class="headerlink" title="7.4.1、事件对象的兼容性方案"></a>7.4.1、事件对象的兼容性方案</h3><p>事件对象本身的获取存在兼容问题：</p>
<ol>
<li>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</li>
<li>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找</li>
</ol>
<p>解决：<br><code>e = e || window.event;</code></p>
<h3 id="7-4-2、事件对象的常见属性和方法"><a href="#7-4-2、事件对象的常见属性和方法" class="headerlink" title="7.4.2、事件对象的常见属性和方法"></a>7.4.2、事件对象的常见属性和方法</h3><table>
<thead>
<tr>
<th>事件对象属性方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.target</td>
<td>返回触发事件的对象 标准</td>
</tr>
<tr>
<td>e.srcElement</td>
<td>返回触发事件的对象 非标准 ie6-8使用</td>
</tr>
<tr>
<td>e.type</td>
<td>返回事件的类型 比如<code>click</code> <code>mouseover</code> 不带on</td>
</tr>
<tr>
<td>e.cancelBubble</td>
<td>该属性阻止冒泡，非标准，ie6-8使用</td>
</tr>
<tr>
<td>e.returnValue</td>
<td>该属性阻止默认行为 非标准，ie6-8使用</td>
</tr>
<tr>
<td>e.preventDefault()</td>
<td>该方法阻止默认行为 标准 比如不让链接跳转</td>
</tr>
<tr>
<td>e.stopPropagation()</td>
<td>阻止冒泡 标准</td>
</tr>
</tbody></table>
<p>e.target 和 this 的区别：</p>
<ul>
<li>this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</li>
<li>e.target 是事件触发的元素。</li>
</ul>
<h2 id="7-5、事件对象阻止默认行为"><a href="#7-5、事件对象阻止默认行为" class="headerlink" title="7.5、事件对象阻止默认行为"></a>7.5、事件对象阻止默认行为</h2><pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 常见事件对象的属性和方法</span>
        <span class="token comment" spellcheck="true">// 1. 返回事件类型</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseover'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseout'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 2. 阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  dom 标准写法</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// 3. 传统的注册方式</span>
        a<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 普通浏览器 e.preventDefault();  方法</span>
            <span class="token comment" spellcheck="true">// e.preventDefault();</span>
            <span class="token comment" spellcheck="true">// 低版本浏览器 ie678  returnValue  属性</span>
            <span class="token comment" spellcheck="true">// e.returnValue;</span>
            <span class="token comment" spellcheck="true">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-6、阻止事件冒泡"><a href="#7-6、阻止事件冒泡" class="headerlink" title="7.6、阻止事件冒泡"></a>7.6、阻止事件冒泡</h2><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p>
<p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p>
<ul>
<li><p>标准写法<br><code>e.stopPropagation();</code></p>
</li>
<li><p>非标准写法： IE6-8 利用对象事件 cancelBubble属性<br><code>e.cancelBubble = true;</code></p>
</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>son儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 常见事件对象的属性和方法</span>
        <span class="token comment" spellcheck="true">// 阻止冒泡  dom 推荐的标准 stopPropagation() </span>
        <span class="token keyword">var</span> son <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        son<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// stop 停止  Propagation 传播</span>
            e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非标准 cancel 取消 bubble 泡泡</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'father'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'document'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-6-1、阻止事件冒泡的兼容性解决方案"><a href="#7-6-1、阻止事件冒泡的兼容性解决方案" class="headerlink" title="7.6.1、阻止事件冒泡的兼容性解决方案"></a>7.6.1、阻止事件冒泡的兼容性解决方案</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-4-4-e-target-与-this"><a href="#4-4-4-e-target-与-this" class="headerlink" title="4.4.4 e.target 与 this"></a>4.4.4 e.target 与 this</h3><blockquote>
<p>e.target 与 this 的区别</p>
</blockquote>
<ul>
<li><code>this</code>是事件绑定的元素，这个函数的调用者(绑定这个事件的元素)</li>
<li><code>e.target</code>是事件触发的元素</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 常见事件对象的属性和方法</span>
        <span class="token comment" spellcheck="true">// 1. e.target 返回的是触发事件的对象（元素）  this 返回的是绑定事件的对象（元素）</span>
        <span class="token comment" spellcheck="true">// 区别 ： e.target 点击了那个元素，就返回那个元素 this 那个元素绑定了这个点击事件，那么就返回谁</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 我们给ul 绑定了事件  那么this 就指向ul  </span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是li e.target 指向的就是li</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// 了解兼容性</span>
            <span class="token comment" spellcheck="true">// div.onclick = function(e) {</span>
            <span class="token comment" spellcheck="true">//     e = e || window.event;</span>
            <span class="token comment" spellcheck="true">//     var target = e.target || e.srcElement;</span>
            <span class="token comment" spellcheck="true">//     console.log(target);</span>

        <span class="token comment" spellcheck="true">// }</span>
        <span class="token comment" spellcheck="true">// 2. 了解 跟 this 有个非常相似的属性 currentTarget  ie678不认识</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-4-5-事件对象的兼容性"><a href="#4-4-5-事件对象的兼容性" class="headerlink" title="4.4.5 事件对象的兼容性"></a>4.4.5 事件对象的兼容性</h3><p>事件对象本身的获取存在兼容问题：</p>
<ul>
<li>标准浏览器中浏览器是给方法传递的参数，只需定义形参e就可以获取到</li>
<li>在 IE6 -&gt; 8 中，浏览器不会给方法传递参数，如果需要的话，需要到<code>window.event</code>中获取查找</li>
</ul>
<blockquote>
<p>解决方案</p>
</blockquote>
<ul>
<li><code>e = e || window.event</code></li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
        // 事件对象
        var div = document.querySelector('div');
        div.onclick = function(e) {
                // e = e || window.event;
                console.log(e);
                // 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;

            }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-7、事件委托"><a href="#7-7、事件委托" class="headerlink" title="7.7、事件委托"></a>7.7、事件委托</h2><ul>
<li>事件委托也称为事件代理，在 jQuery 里面称为事件委派</li>
<li>事件委托的原理<ul>
<li><strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</strong></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，点我应有弹框在手！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，点我应有弹框在手！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，点我应有弹框在手！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，点我应有弹框在手！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>知否知否，点我应有弹框在手！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span>
        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// alert('知否知否，点我应有弹框在手！');</span>
            <span class="token comment" spellcheck="true">// e.target 这个可以得到我们点击的对象</span>
            e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 点了谁，就让谁的style里面的backgroundColor颜色变为pink</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul<br>有注册事件，就会触发事件监听器。</p>
<h2 id="7-8、常见的鼠标事件"><a href="#7-8、常见的鼠标事件" class="headerlink" title="7.8、常见的鼠标事件"></a>7.8、常见的鼠标事件</h2><table>
<thead>
<tr>
<th>鼠标事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标点击左键触发</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过触发</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标离开触发</td>
</tr>
<tr>
<td>onfocus</td>
<td>获得鼠标焦点触发</td>
</tr>
<tr>
<td>onblur</td>
<td>失去鼠标焦点触发</td>
</tr>
<tr>
<td>onmousemove</td>
<td>鼠标移动触发</td>
</tr>
<tr>
<td>onmouseup</td>
<td>鼠标弹起触发</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按下触发</td>
</tr>
</tbody></table>
<h3 id="7-8-1、禁止鼠标右键与鼠标选中"><a href="#7-8-1、禁止鼠标右键与鼠标选中" class="headerlink" title="7.8.1、禁止鼠标右键与鼠标选中"></a>7.8.1、禁止鼠标右键与鼠标选中</h3><ul>
<li><code>contextmenu</code>主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li>
<li><code>selectstart</code> 禁止鼠标选中</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是一段不愿意分享的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 1. contextmenu 我们可以禁用右键菜单</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'contextmenu'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止默认行为</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// 2. 禁止选中文字 selectstart</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'selectstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-8-2、鼠标事件对象"><a href="#7-8-2、鼠标事件对象" class="headerlink" title="7.8.2、鼠标事件对象"></a>7.8.2、鼠标事件对象</h3><ul>
<li><strong>event</strong> 对象代表事件的状态，跟事件相关的一系列信息的集合</li>
<li>现阶段我们主要是用鼠标事件对象 <strong>MouseEvent</strong> 和键盘事件对象 <strong>KeyboardEvent。</strong></li>
</ul>
<table>
<thead>
<tr>
<th>鼠标事件对象</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.clientX</td>
<td>返回鼠标相对于浏览器窗口 <strong>可视区</strong> 的X坐标</td>
</tr>
<tr>
<td>e.clientY</td>
<td>返回鼠标相对于浏览器窗口 <strong>可视区</strong> 的Y坐标</td>
</tr>
<tr>
<td>e.pageX（重点）</td>
<td>返回鼠标相对于文档页面的X坐标 IE9+ 支持</td>
</tr>
<tr>
<td>e.pageY（重点）</td>
<td>返回鼠标相对于文档页面的Y坐标 IE9+ 支持</td>
</tr>
<tr>
<td>e.screenX</td>
<td>返回鼠标相对于电脑屏幕的X坐标</td>
</tr>
<tr>
<td>e.screenY</td>
<td>返回鼠标相对于电脑屏幕的Y坐标</td>
</tr>
</tbody></table>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 鼠标事件对象 MouseEvent</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 1. client 鼠标在可视区的x和y坐标</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 2. page 鼠标在页面文档的x和y坐标</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageX<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 3. screen 鼠标在电脑屏幕的x和y坐标</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>screenX<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>screenY<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-9、常用的键盘事件"><a href="#7-9、常用的键盘事件" class="headerlink" title="7.9、常用的键盘事件"></a>7.9、常用的键盘事件</h2><table>
<thead>
<tr>
<th>键盘事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onkeyup</td>
<td>某个键盘按键被松开时触发</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某个键盘按键被按下时触发</td>
</tr>
<tr>
<td>onkeypress</td>
<td>某个键盘按键被按下时触发，但是它不识别功能键，比如 ctrl shift 箭头等</td>
</tr>
</tbody></table>
<ul>
<li><strong>如果使用addEventListener 不需要加 on</strong></li>
<li><code>onkeypress</code> 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等</li>
<li>三个事件的执行顺序是： keydown – keypress — keyup</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 常用的键盘事件</span>
        <span class="token comment" spellcheck="true">//1. keyup 按键弹起的时候触发 </span>
        <span class="token comment" spellcheck="true">// document.onkeyup = function() {</span>
        <span class="token comment" spellcheck="true">//         console.log('我弹起了');</span>

        <span class="token comment" spellcheck="true">//     }</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我弹起了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我按下了press'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我按下了down'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="7-9-1、键盘对象属性"><a href="#7-9-1、键盘对象属性" class="headerlink" title="7.9.1、键盘对象属性"></a>7.9.1、键盘对象属性</h3><table>
<thead>
<tr>
<th>键盘事件对象 <strong>属性</strong></th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>keyCode</td>
<td>返回该 <strong>键</strong> 值的ASCII值</td>
</tr>
</tbody></table>
<ul>
<li><code>onkeydown</code>和 <code>onkeyup</code> 不区分字母大小写，<code>onkeypress</code> 区分字母大小写。</li>
<li>在我们实际开发中，我们更多的使用keydown和keyup， 它能识别所有的键（包括功能键）</li>
<li><code>Keypress</code> 不识别功能键，但是<code>keyCode</code>属性能区分大小写，返回不同的ASCII值</li>
</ul>
<pre class="line-numbers language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span>
        <span class="token comment" spellcheck="true">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span>
        <span class="token comment" spellcheck="true">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'up:'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您按下的a键'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您没有按下a键'</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'press:'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（三）对象与内置对象</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><span id="more"></span>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E6%A6%82%E8%A7%88.png" alt="概览"></p>
<h1 id="1、对象🔥"><a href="#1、对象🔥" class="headerlink" title="1、对象🔥"></a>1、对象🔥</h1><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p>
<p>对象是由属性和方法组成的：</p>
<ul>
<li>属性：事物的 <strong>特征， <strong>在对象中用</strong> 属性</strong>来表示（常用名词）</li>
<li>方法：事物的 <strong>行为， <strong>在对象中用</strong> 方法</strong>来表示（常用动词）</li>
</ul>
<h2 id="1-1、创建对象🔥"><a href="#1-1、创建对象🔥" class="headerlink" title="1.1、创建对象🔥"></a>1.1、创建对象🔥</h2><p>在 JavaScript 中，现阶段我们可以采用三种方式创建对象（object）：</p>
<ul>
<li>利用字面量创建对象</li>
<li>利用 new Object创建对象</li>
<li>利用构造函数创建对象</li>
</ul>
<h3 id="①利用字面量创建对象🔥"><a href="#①利用字面量创建对象🔥" class="headerlink" title="①利用字面量创建对象🔥"></a>①利用字面量创建对象🔥</h3><p>对象字面量：就是花括号 <code>&#123; &#125;</code> 里面包含了表达这个具体事物（对象）的属性和方法</p>
<p><code>&#123; &#125;</code> 里面采取键值对的形式表示</p>
<ul>
<li>键：相当于属性名</li>
<li>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token punctuation">{</span>
    name <span class="token punctuation">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>
    age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    sex <span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>
    sayHi <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大家好啊~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 多个属性或者方法中间用逗号隔开</span>
<span class="token comment" spellcheck="true">// 方法冒号后面跟的是一个匿名函数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="🔥对象的调用"><a href="#🔥对象的调用" class="headerlink" title="🔥对象的调用"></a>🔥对象的调用</h4><ul>
<li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ <strong>的</strong> ”</p>
</li>
<li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须 <strong>加引号</strong> ，我们后面会用</p>
</li>
<li><p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面 <strong>一定加括号</strong></p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 调用名字属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 调用名字属性</span>
star<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="🔥变量、属性、函数、方法总结"><a href="#🔥变量、属性、函数、方法总结" class="headerlink" title="🔥变量、属性、函数、方法总结"></a>🔥变量、属性、函数、方法总结</h4><ul>
<li>变量：单独声明赋值，单独存在</li>
<li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li>
<li>函数：单独存在的，通过&#x3D;&#x3D;“函数名()”&#x3D;&#x3D;的方式就可以调用</li>
<li>方法：对象里面的函数称为方法，方法不需要声明，使用&#x3D;&#x3D;“对象.方法名()”&#x3D;&#x3D;的方式就可以调用，方法用来描述该对象的行为和功能。</li>
</ul>
<h3 id="②利用-new-Object-创建对象🔥"><a href="#②利用-new-Object-创建对象🔥" class="headerlink" title="②利用 new Object 创建对象🔥"></a>②利用 new Object 创建对象🔥</h3><p>跟之前的 <code>new Array()</code> 原理一致：<code>var 对象名 = new Object();</code></p>
<p>使用的格式：对象.属性 &#x3D; 值</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建了一个空的对象</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三丰'</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//1.我们是利用等号赋值的方法添加对象</span>
<span class="token comment" spellcheck="true">//2.每个属性和方法之间用分号结束</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="③利用构造函数创建对象🔥"><a href="#③利用构造函数创建对象🔥" class="headerlink" title="③利用构造函数创建对象🔥"></a>③利用构造函数创建对象🔥</h3><p><strong>构造函数</strong> ：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new<br>运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
<p>在 js 中，使用构造函数要时要注意以下两点：</p>
<ul>
<li>构造函数用于创建某一类对象，其首字母要大写</li>
<li>构造函数要和 new 一起使用才有意义</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//构造函数的语法格式</span>
<span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>方法 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//1. 构造函数名字首字母要大写</span>
<span class="token comment" spellcheck="true">//2. 构造函数不需要return就可以返回结果</span>
<span class="token comment" spellcheck="true">//3. 调用构造函数必须使用 new</span>
<span class="token comment" spellcheck="true">//4. 我们只要new Star() 调用函数就创建了一个对象</span>
<span class="token comment" spellcheck="true">//5. 我们的属性和方法前面必须加this</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> ldh<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// object对象，调用函数返回的是对象</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ldh<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//把冰雨传给了sang</span>

<span class="token keyword">var</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">'张学友'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>构造函数名字首字母要大写</li>
<li>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</li>
<li>构造函数中不需要 return 返回结果。</li>
<li>当我们创建对象的时候，必须用 new 来调用构造函数。</li>
</ul>
<h4 id="🔥构造函数和对象"><a href="#🔥构造函数和对象" class="headerlink" title="🔥构造函数和对象"></a>🔥构造函数和对象</h4><ul>
<li>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）</li>
<li>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</li>
</ul>
<h4 id="🔥new关键字"><a href="#🔥new关键字" class="headerlink" title="🔥new关键字"></a>🔥new关键字</h4><p>new 在执行时会做四件事:</p>
<ol>
<li>在内存中创建一个新的空对象。</li>
<li>让 this 指向这个新的对象。</li>
<li>执行构造函数里面的代码，给这个新对象添加属性和方法</li>
<li>返回这个新对象（所以构造函数里面不需要return）</li>
</ol>
<h2 id="1-2、遍历对象的属性🔥"><a href="#1-2、遍历对象的属性🔥" class="headerlink" title="1.2、遍历对象的属性🔥"></a>1.2、遍历对象的属性🔥</h2><ul>
<li><code>for...in</code> 语句用于对数组或者对象的属性进行循环操作</li>
</ul>
<p>语法如下</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>变量 <span class="token keyword">in</span> 对象名字<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在此执行代码</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//这里的 k 是属性名</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的 obj[k] 是属性值</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'秦sir'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>
    fn<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//for in 遍历我们的对象</span>
<span class="token comment" spellcheck="true">//for (变量 in 对象){}</span>
<span class="token comment" spellcheck="true">//我们使用for in 里面的变量 我们喜欢写k 或者key</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// k 变量 输出得到的是属性名</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj[k] 得到的是属性值</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="2、内置对象🔥"><a href="#2、内置对象🔥" class="headerlink" title="2、内置对象🔥"></a>2、内置对象🔥</h1><ul>
<li><p>JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象</p>
</li>
<li><p>内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能</p>
</li>
<li><p>JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</p>
</li>
</ul>
<h2 id="2-1、查文档"><a href="#2-1、查文档" class="headerlink" title="2.1、查文档"></a>2.1、查文档</h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN&#x2F;W3C来查询</p>
<p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<h3 id="2-1-1、如何学习对象中的方法"><a href="#2-1-1、如何学习对象中的方法" class="headerlink" title="2.1.1、如何学习对象中的方法"></a>2.1.1、如何学习对象中的方法</h3><ol>
<li>查阅该方法的功能</li>
<li>查看里面参数的意义和类型</li>
<li>查看返回值的意义和类型</li>
<li>通过 demo 进行测试</li>
</ol>
<h1 id="3、Math对象🔥"><a href="#3、Math对象🔥" class="headerlink" title="3、Math对象🔥"></a>3、Math对象🔥</h1><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Math数学对象，不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可</span>

Math<span class="token punctuation">.</span>PI		 			<span class="token comment" spellcheck="true">// 圆周率</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	 		<span class="token comment" spellcheck="true">// 向下取整</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 向上取整</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 四舍五入版 就近取整   注意 -3.5   结果是  -3 </span>
Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		 		<span class="token comment" spellcheck="true">// 绝对值</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">// 求最大和最小值 </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意</strong> ：上面的方法必须带括号</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>练习：封装自己的数学对象</strong></p>
<p>利用对象封装自己的数学对象，里面有PI 最大值 和最小值</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> myMath <span class="token operator">=</span> <span class="token punctuation">{</span>
    PI<span class="token punctuation">:</span> <span class="token number">3.141592653</span><span class="token punctuation">,</span>
    max<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> max <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    min<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> min <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                min <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMath<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMath<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMath<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-Math绝对值和三个取整方法🔥"><a href="#3-Math绝对值和三个取整方法🔥" class="headerlink" title="3.Math绝对值和三个取整方法🔥"></a>3.Math绝对值和三个取整方法🔥</h2><ul>
<li><code>Math.abs()</code> 取绝对值</li>
<li>三个取整方法： <ul>
<li><code>Math.floor()</code> : 向下取整</li>
<li><code>Math.ceil()</code> : 向上取整</li>
<li><code>Matg.round()</code> : 四舍五入，其他数字都是四舍五入，但是5特殊，它往大了取</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.绝对值方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 隐式转换，会把字符串 -1 转换为数字型</span>
<span class="token comment" spellcheck="true">//2.三个取整方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 向下取整，向最小的取值 floor-地板</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2 向上取整，向最大的取值 ceil-天花板</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2 </span>

<span class="token comment" spellcheck="true">//四舍五入 其他数字都是四舍五入，但是5特殊，它往大了取</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1 四舍五入</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-随机数方法random-🔥"><a href="#4-随机数方法random-🔥" class="headerlink" title="4.随机数方法random()🔥"></a>4.随机数方法random()🔥</h2><ul>
<li>random() 方法可以随机返回一个小数，其取值范围是 [0，1)，左闭右开 0 &lt;&#x3D; x &lt; 1</li>
<li>得到一个两数之间的随机整数，包括第一个数，不包括第二个数</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 得到两个数之间的随机整数，并且包含这两个整数</span>
<span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>1.随机点名</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'秦六'</span><span class="token punctuation">]</span>；
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>2.猜数字游戏</strong></p>
<ul>
<li>程序随机生成一个1~10之间的数字，并让用户输入一个数字</li>
</ul>
<ol>
<li>如果大于该数字，就提示，数字大了，继续猜;</li>
<li>如果小于该数字，就提示数字小了，继续猜;</li>
<li>如果等于该数字，就提示猜对了，结束程序。</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> random <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//死循环 ，需要退出循环条件</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入1~10之间的一个整数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> random<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你猜大了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> random<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你猜小了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你猜中了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//退出整个循环</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="4、Data-日期对象🔥"><a href="#4、Data-日期对象🔥" class="headerlink" title="4、Data()日期对象🔥"></a>4、Data()日期对象🔥</h1><ul>
<li><p>Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用</p>
</li>
<li><p>Date 实例用来处理日期和时间</p>
</li>
</ul>
<h2 id="4-1、Date-方法的使用🔥"><a href="#4-1、Date-方法的使用🔥" class="headerlink" title="4.1、Date()方法的使用🔥"></a>4.1、Date()方法的使用🔥</h2><h3 id="4-1-1、获取当前时间必须实例化🔥"><a href="#4-1-1、获取当前时间必须实例化🔥" class="headerlink" title="4.1.1、获取当前时间必须实例化🔥"></a>4.1.1、获取当前时间必须实例化🔥</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="4-1-2、Date-构造函数的参数🔥"><a href="#4-1-2、Date-构造函数的参数🔥" class="headerlink" title="4.1.2、Date()构造函数的参数🔥"></a>4.1.2、Date()构造函数的参数🔥</h3><p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为 <code>‘2019-5-1’</code>，可以写成<code>new Date(&#39;2019-5-1&#39;)</code> 或者<code>new Date(&#39;2019/5/1&#39;)</code></p>
<ul>
<li>如果Date()不写参数，就返回当前时间</li>
<li>如果Date()里面写参数，就返回括号里面输入的时间</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.如果没有参数，返回当前系统的当前时间</span>
<span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2.参数常用的写法 数字型 2019,10,1  字符串型 '2019-10-1 8:8:8' 时分秒</span>
<span class="token comment" spellcheck="true">// 如果Date()里面写参数，就返回括号里面输入的时间 </span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回的是11月不是10月</span>

<span class="token keyword">var</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2019-10-1 8:8:8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-2、日期格式化🔥"><a href="#4-2、日期格式化🔥" class="headerlink" title="4.2、日期格式化🔥"></a>4.2、日期格式化🔥</h2><p>我们想要 2019-8-8 8:8:8 格式的日期，要怎么办？</p>
<p>需要获取日期指定的部分，所以我们要手动的得到这种格式</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td>getFullYear()</td>
<td>获取当年</td>
<td>dObj.getFullYear()</td>
</tr>
<tr>
<td>getMonth()</td>
<td>获取当月(0-11)</td>
<td>dObj.getMonth()</td>
</tr>
<tr>
<td>getDate()</td>
<td>获取当天日期</td>
<td>dObj.getDate()</td>
</tr>
<tr>
<td>getDay()</td>
<td>获取星期几(周日0到周六6)</td>
<td>dObj.getDay()</td>
</tr>
<tr>
<td>getHours()</td>
<td>获取当前小时</td>
<td>dObj.getHours()</td>
</tr>
<tr>
<td>getMinutes()</td>
<td>获取当前小时</td>
<td>dObj.getMinutes()</td>
</tr>
<tr>
<td>getSeconds()</td>
<td>获取当前秒钟</td>
<td>dObj.gerSeconds()</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回当前日期的年 2019</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回的月份小一个月 记得月份 +1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的是几号</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//周一返回1 周6返回六 周日返回0</span>

<span class="token comment" spellcheck="true">// 写一个 2019年 5月 1日 星期三</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> year <span class="token operator">=</span>  date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> dates <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'今天是'</span> <span class="token operator">+</span> year <span class="token operator">+</span><span class="token string">'年'</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">'月'</span> <span class="token operator">+</span> dates <span class="token operator">+</span><span class="token string">'日'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 封装一个函数返回当前的时分秒 格式 08:08:08</span>
<span class="token keyword">function</span> <span class="token function">getTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> h <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token punctuation">:</span> h<span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token punctuation">:</span> m<span class="token punctuation">;</span>
    <span class="token keyword">var</span> s <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token punctuation">:</span> s<span class="token punctuation">;</span>
    <span class="token keyword">return</span> h <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3、时间戳获取（总毫秒形式）🔥"><a href="#4-3、时间戳获取（总毫秒形式）🔥" class="headerlink" title="4.3、时间戳获取（总毫秒形式）🔥"></a>4.3、时间戳获取（总毫秒形式）🔥</h2><ul>
<li><code>date.valueOf()</code> ：得到现在时间距离1970.1.1总的毫秒数</li>
<li><code>date.getTime()</code> ：得到现在时间距离1970.1.1总的毫秒数</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取Date总的毫秒数 不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数</span>

<span class="token comment" spellcheck="true">// 实例化Date对象</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 1 .通过 valueOf()  getTime() 用于获取对象的原始值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//得到现在时间距离1970.1.1总的毫秒数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2.简单的写法</span>
<span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// +new Date()返回的就是总的毫秒数，</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 3. HTML5中提供的方法 获得总的毫秒数 有兼容性问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="🔥倒计时效果"><a href="#🔥倒计时效果" class="headerlink" title="🔥倒计时效果"></a>🔥倒计时效果</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没有参数，返回的是当前时间总的毫秒数</span>
    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有参数，返回的是用户输入时间的总毫秒数</span>
    <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//times就是剩余时间的总的秒数</span>

    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//天数</span>
    d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> d <span class="token punctuation">:</span> d<span class="token punctuation">;</span>
    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//小时</span>
    h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token punctuation">:</span> h<span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分</span>
    m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token punctuation">:</span> m<span class="token punctuation">;</span>
    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//秒</span>
    s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token punctuation">:</span> s<span class="token punctuation">;</span>
    <span class="token keyword">return</span> d <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token string">'2020-11-09 18:29:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//现在时间</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="5、数组对象🔥"><a href="#5、数组对象🔥" class="headerlink" title="5、数组对象🔥"></a>5、数组对象🔥</h1><h2 id="5-1、数组对象的创建🔥"><a href="#5-1、数组对象的创建🔥" class="headerlink" title="5.1、数组对象的创建🔥"></a>5.1、数组对象的创建🔥</h2><p>创建数组对象的两种方式</p>
<ul>
<li>字面量方式</li>
<li>new Array()</li>
</ul>
<h2 id="5-2、检测是否为数组🔥"><a href="#5-2、检测是否为数组🔥" class="headerlink" title="5.2、检测是否为数组🔥"></a>5.2、检测是否为数组🔥</h2><ul>
<li>instanceof 运算符，可以判断一个对象是否属于某种类型</li>
<li><code>Array.isArray()</code> 用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-3、添加删除数组元素🔥"><a href="#5-3、添加删除数组元素🔥" class="headerlink" title="5.3、添加删除数组元素🔥"></a>5.3、添加删除数组元素🔥</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>push(参数1…)</td>
<td>末尾添加一个或多个元素，注意修改原数组</td>
<td>并返回新的长度</td>
</tr>
<tr>
<td>pop()</td>
<td>删除数组最后一个元素（栈）</td>
<td>返回它删除的元素的值</td>
</tr>
<tr>
<td>unshift(参数1…)</td>
<td>向数组的开头添加一个或更多元素，注意修改原数组</td>
<td>并返回新的长度</td>
</tr>
<tr>
<td>shift()</td>
<td>删除数组的第一个元素，数组长度减1，无参数，修改原数组（队列）</td>
<td>并返回第一个元素</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.push() 在我们数组的末尾，添加一个或者多个数组元素 push 推</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'秦晓'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'秦晓'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// push 完毕之后，返回结果是新数组的长度</span>

<span class="token comment" spellcheck="true">// 2. unshift 在我们数组的开头 添加一个或者多个数组元素</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// pop() 它可以删除数组的最后一个元素，一次只能删除一个元素</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不加参数</span>
<span class="token comment" spellcheck="true">// shift() 它可以删除数组的第一个元素,一次只能删除一个元素</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不加参数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="👉筛选数组"><a href="#👉筛选数组" class="headerlink" title="👉筛选数组"></a>👉筛选数组</h3><p>有一个包含工资的数组[1500,1200,2000,2100,1800],要求把数组中工资超过2000的删除，剩余的放到新数组里面</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-4、数组排序🔥"><a href="#5-4、数组排序🔥" class="headerlink" title="5.4、数组排序🔥"></a>5.4、数组排序🔥</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>是否修改原数组</th>
</tr>
</thead>
<tbody><tr>
<td>reverse()</td>
<td>颠倒数组中元素的顺序，无参数</td>
<td>该方法会改变原来的数组，返回新数组</td>
</tr>
<tr>
<td>sort()</td>
<td>对数组的元素进行排序</td>
<td>该方法会改变原来的数组，返回新数组</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.翻转数组</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2.数组排序(冒泡排序)</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 对于双位数</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//降序的排列</span>
        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//升序</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-5、数组索引🔥"><a href="#5-5、数组索引🔥" class="headerlink" title="5.5、数组索引🔥"></a>5.5、数组索引🔥</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>indexOf()</td>
<td>数组中查找给定元素的第一个索引</td>
<td>如果存在返回索引号，如果不存在，则返回-1</td>
</tr>
<tr>
<td>lastIndexOf()</td>
<td>在数组的最后一个索引，从后向前索引</td>
<td>如果存在返回索引号，如果不存在，则返回-1</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回数组元素索引号方法 indexOf(数组元素)  作用就是返回该数组元素的索引号</span>
<span class="token comment" spellcheck="true">//它只发返回第一个满足条件的索引号</span>
<span class="token comment" spellcheck="true">//如果找不到元素，则返回-1</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5-5-1、🔥数组去重"><a href="#5-5-1、🔥数组去重" class="headerlink" title="5.5.1、🔥数组去重"></a>5.5.1、🔥数组去重</h3><ul>
<li>删除数组重复多余的元素</li>
</ul>
<p>分析：把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去重。</p>
<p>核心算法：我们遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加。</p>
<p>我们怎么知道该元素没有存在？ 利用 新数组.indexOf(数组元素) 如果返回是 -1 就说明 新数组里面没有改元素</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 封装一个去重的函数 unique 独一无二的</span>
<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-6、数组转化为字符串🔥"><a href="#5-6、数组转化为字符串🔥" class="headerlink" title="5.6、数组转化为字符串🔥"></a>5.6、数组转化为字符串🔥</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>toString()</td>
<td>把数组转换成字符串，逗号分隔每一项</td>
<td>返回一个字符串</td>
</tr>
<tr>
<td>join(‘分隔符’)</td>
<td>方法用于把数组中的所有元素转换为一个字符串</td>
<td>返回一个字符串</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.toString() 将我们的数组转换为字符串</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1,2,3</span>
<span class="token comment" spellcheck="true">// 2.join('分隔符')</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不写默认用逗号分割</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  green-blue-red</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// green&amp;blue&amp;red</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-7、其他方法"><a href="#5-7、其他方法" class="headerlink" title="5.7、其他方法"></a>5.7、其他方法</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>concat()</td>
<td>连接两个或多个数组 不影响原数组</td>
<td>返回一个新的数组</td>
</tr>
<tr>
<td>slice()</td>
<td>数组截取slice(begin,end)</td>
<td>返回被截取项目的新数组</td>
</tr>
<tr>
<td>splice()</td>
<td>数组删除splice(第几个开始要删除的个数)</td>
<td>返回被删除项目的新数组，这个会影响原数组</td>
</tr>
</tbody></table>
<h1 id="6、字符串对象🔥"><a href="#6、字符串对象🔥" class="headerlink" title="6、字符串对象🔥"></a>6、字符串对象🔥</h1><h2 id="6-1、基本包装类型🔥"><a href="#6-1、基本包装类型🔥" class="headerlink" title="6.1、基本包装类型🔥"></a>6.1、基本包装类型🔥</h2><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p>
<p><strong>基本包装类型</strong> 就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p>
<p>我们看看下面代码有什么问题吗？</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.生成临时变量,把简单类型包装为复杂数据类型</span>
<span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2.赋值给我们声明的字符变量</span>
str <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3.销毁临时变量</span>
temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-2、字符串的不可变🔥"><a href="#6-2、字符串的不可变🔥" class="headerlink" title="6.2、字符串的不可变🔥"></a>6.2、字符串的不可变🔥</h2><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 当重新给 str 赋值的时候，常量'abc'不会被修改，依然在内存中</span>
<span class="token comment" spellcheck="true">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span>
<span class="token comment" spellcheck="true">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    str <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-3、根据字符返回位置🔥"><a href="#6-3、根据字符返回位置🔥" class="headerlink" title="6.3、根据字符返回位置🔥"></a>6.3、根据字符返回位置🔥</h2><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)， <strong>操作完成会返回一个新的字符串</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>indexOf(‘要查找的字符’，开始的位置)</td>
<td>返回指定内容在元字符串中的位置，如果找不到就返回-1，开始的位置是index索引号</td>
</tr>
<tr>
<td>lastIndexOf()</td>
<td>从后往前找，只找第一个匹配的</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 字符串对象  根据字符返回位置  str.indexOf('要查找的字符', [起始的位置])</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'改革春风吹满地，春天来了'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认从0开始查找 ，结果为2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引号是 3的位置开始往后查找，结果是8</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6-3-1、返回字符位置🔥"><a href="#6-3-1、返回字符位置🔥" class="headerlink" title="6.3.1、返回字符位置🔥"></a>6.3.1、返回字符位置🔥</h3><p>查找字符串 “abcoefoxyozzopp” 中所有o出现的位置以及次数</p>
<ul>
<li>核心算法：先查找第一个o出现的位置</li>
<li>然后 只要 indexOf返回的结果不是 -1 就继续往后查找</li>
<li>因为 indexOf 只能查找到第一个，所以后面的查找，一定是当前索引加1，从而继续查找</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"oabcoefoxyozzopp"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// console.log(index);</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span>
    index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'o出现的次数是: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-4、根据位置返回字符🔥"><a href="#6-4、根据位置返回字符🔥" class="headerlink" title="6.4、根据位置返回字符🔥"></a>6.4、根据位置返回字符🔥</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>charAt(index)</td>
<td>返回指定位置的字符(index字符串的索引号)</td>
<td>str.charAt(0)</td>
</tr>
<tr>
<td>charCodeAt(index)</td>
<td>获取指定位置处字符的ASCII码(index索引号)</td>
<td>str.charCodeAt(0)</td>
</tr>
<tr>
<td>str[index]</td>
<td>获取指定位置处字符</td>
<td>HTML,IE8+支持和charAt()等效</td>
</tr>
</tbody></table>
<h4 id="🔥返回字符位置"><a href="#🔥返回字符位置" class="headerlink" title="🔥返回字符位置"></a>🔥返回字符位置</h4><p>判断一个字符串 “abcoefoxyozzopp” 中出现次数最多的字符，并统计其次数</p>
<ul>
<li>核心算法：利用 charAt() 遍历这个字符串</li>
<li>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</li>
<li>遍历对象，得到最大值和该字符</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 有一个对象 来判断是否有该属性 对象['属性名']</span>
    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
        age<span class="token punctuation">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'里面有该属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有该属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//  判断一个字符串 'abcoefoxyozzopp' 中出现次数最多的字符，并统计其次数。</span>
    <span class="token comment" spellcheck="true">// o.a = 1</span>
    <span class="token comment" spellcheck="true">// o.b = 1</span>
    <span class="token comment" spellcheck="true">// o.c = 1</span>
    <span class="token comment" spellcheck="true">// o.o = 4</span>
    <span class="token comment" spellcheck="true">// 核心算法：利用 charAt() 遍历这个字符串</span>
    <span class="token comment" spellcheck="true">// 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span>
    <span class="token comment" spellcheck="true">// 遍历对象，得到最大值和该字符</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcoefoxyozzopp'</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// chars 是 字符串的每一个字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// o[chars] 得到的是属性值</span>
            o<span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            o<span class="token punctuation">[</span>chars<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 2. 遍历对象</span>
    <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// k 得到是 属性名</span>
        <span class="token comment" spellcheck="true">// o[k] 得到的是属性值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ch <span class="token operator">=</span> k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最多的字符是'</span> <span class="token operator">+</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-5、字符串操作方法🔥"><a href="#6-5、字符串操作方法🔥" class="headerlink" title="6.5、字符串操作方法🔥"></a>6.5、字符串操作方法🔥</h2><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>concat(str1,str2,str3…)🔥</td>
<td>concat() 方法用于连接两个或对各字符串。拼接字符串🔥</td>
</tr>
<tr>
<td>substr(start,length)🔥</td>
<td>从 start 位置开始(索引号), length 取的个数。🔥</td>
</tr>
<tr>
<td>slice(start,end)</td>
<td>从 start 位置开始，截取到 end 位置 ，end 取不到 (两个都是索引号)</td>
</tr>
<tr>
<td>substring(start,end)</td>
<td>从 start 位置开始，截取到 end 位置 ，end 取不到 (基本和 slice 相同，但是不接受负)</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 1. concat('字符串1','字符串2'....)</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 2. substr('截取的起始位置', '截取几个字符');</span>
    <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'改革春风吹满地'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一个2 是索引号的2   第二个2 是取几个字符</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-6、replace-方法🔥"><a href="#6-6、replace-方法🔥" class="headerlink" title="6.6、replace()方法🔥"></a>6.6、replace()方法🔥</h2><p>replace() 方法用于在字符串中用一些字符替换另一些字符</p>
<p>其使用格式：<code>replace(被替换的字符,要替换为的字符串)</code></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 1. 替换字符 replace('被替换的字符', '替换为的字符')  它只会替换第一个字符</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andyandy'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 有一个字符串 'abcoefoxyozzopp'  要求把里面所有的 o 替换为 *</span>
    <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'abcoefoxyozzopp'</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-7、split-方法🔥"><a href="#6-7、split-方法🔥" class="headerlink" title="6.7、split()方法🔥"></a>6.7、split()方法🔥</h2><p>split() 方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p>
<p>例如下面代码：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'a,b,c,d'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 返回的是一个数组 ['a', 'b', 'c', 'd']</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token comment" spellcheck="true">// 2. 字符转换为数组 split('分隔符')    前面我们学过 join 把数组转换为字符串</span>
    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'red, pink, blue'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">'red&amp;pink&amp;blue'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-8、大小写转换"><a href="#6-8、大小写转换" class="headerlink" title="6.8、大小写转换"></a>6.8、大小写转换</h2><ul>
<li><code>toUpperCase()</code> 转换大写</li>
<li><code>toLowerCase()</code> 转换小写</li>
</ul>
<h1 id="7、简单类型与复杂类型🔥"><a href="#7、简单类型与复杂类型🔥" class="headerlink" title="7、简单类型与复杂类型🔥"></a>7、简单类型与复杂类型🔥</h1><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。</p>
<ul>
<li>值类型：简单数据类型&#x2F;基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型 <ul>
<li>string ，number，boolean，undefined，null</li>
</ul>
</li>
<li>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型 <ul>
<li>通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</li>
</ul>
</li>
</ul>
<h2 id="7-1、堆和栈🔥"><a href="#7-1、堆和栈🔥" class="headerlink" title="7.1、堆和栈🔥"></a>7.1、堆和栈🔥</h2><p>堆栈空间分配区别：</p>
<ol>
<li>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；<br>* 简单数据类型存放到栈里面</li>
<li>堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。<br>* 复杂数据类型存放到堆里面</li>
</ol>
<p>注意：JavaScript中没有堆栈的概念，通过堆栈的方式，可以让大家更容易理解代码的一些执行方式，便于将来学习其他语言。</p>
<h2 id="7-2、简单类型的内存分配🔥"><a href="#7-2、简单类型的内存分配🔥" class="headerlink" title="7.2、简单类型的内存分配🔥"></a>7.2、简单类型的内存分配🔥</h2><ul>
<li>值类型（简单数据类型）： string ，number，boolean，undefined，null</li>
<li>值类型变量的数据直接存放在变量（栈空间）中</li>
</ul>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%A0%86%E6%A0%88%E4%B8%BE%E4%BE%8B.png" alt="堆栈举例"></p>
<ul>
<li>引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</li>
<li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li>
</ul>
<p><img src="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%A0%86%E6%A0%88.png" alt="堆栈"></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 简单数据类型 null  返回的是一个空的对象  object </span>
    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 如果有个变量我们以后打算存储为对象，暂时没想好放啥， 这个时候就给 null </span>
    <span class="token comment" spellcheck="true">// 1. 简单数据类型 是存放在栈里面 里面直接开辟一个空间存放的是值</span>
    <span class="token comment" spellcheck="true">// 2. 复杂数据类型 首先在栈里面存放地址 十六进制表示  然后这个地址指向堆里面的数据</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-3、简单类型传参🔥"><a href="#7-3、简单类型传参🔥" class="headerlink" title="7.3、简单类型传参🔥"></a>7.3、简单类型传参🔥</h2><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 简单数据类型传参</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-4、复杂类型传参🔥"><a href="#7-4、复杂类型传参🔥" class="headerlink" title="7.4、复杂类型传参🔥"></a>7.4、复杂类型传参🔥</h2><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment" spellcheck="true">// 复杂数据类型传参</span>
    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// x = p</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2. 这个输出什么 ?  刘德华   </span>
        x<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张学友"</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3. 这个输出什么 ?   张学友</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"刘德华"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. 这个输出什么 ?   刘德华 </span>
    <span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4. 这个输出什么 ?   张学友</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（二）函数与作用域</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="1、函数🔥"><a href="#1、函数🔥" class="headerlink" title="1、函数🔥"></a>1、函数🔥</h1><p>函数：就是封装了一段 <strong>可被重复调用执行的代码块</strong> 。通过此代码块可以实现大量代码的重复使用。<span id="more"></span></p>
<h2 id="1-1、函数的使用🔥"><a href="#1-1、函数的使用🔥" class="headerlink" title="1.1、函数的使用🔥"></a>1.1、函数的使用🔥</h2><p>函数在使用时分为两步： <strong>声明函数</strong> 和 <strong>调用函数</strong></p>
<h3 id="①声明函数🔥"><a href="#①声明函数🔥" class="headerlink" title="①声明函数🔥"></a>①声明函数🔥</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明函数</span>
<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//函数体代码</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>function 是声明函数的关键字, <strong>必须小写</strong></li>
<li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li>
</ul>
<h3 id="②调用函数🔥"><a href="#②调用函数🔥" class="headerlink" title="②调用函数🔥"></a>②调用函数🔥</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//调用函数</span>
<span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过调用函数名来执行函数体代码</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>调用的时候 <strong>千万不要忘记添加小括号</strong></li>
<li>口诀：函数不调用，自己不执行</li>
</ul>
<p><strong>注意</strong> ：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p>
<h2 id="1-2、函数的封装"><a href="#1-2、函数的封装" class="headerlink" title="1.2、函数的封装"></a>1.2、函数的封装</h2><ul>
<li>函数的封装是把一个或者多个功能通过 <strong>函数的方式</strong> 封装起来，对外只提供一个简单的函数接口</li>
</ul>
<h2 id="1-3、函数的参数🔥"><a href="#1-3、函数的参数🔥" class="headerlink" title="1.3、函数的参数🔥"></a>1.3、函数的参数🔥</h2><h3 id="1-3-1、形参和实参🔥"><a href="#1-3-1、形参和实参🔥" class="headerlink" title="1.3.1、形参和实参🔥"></a>1.3.1、形参和实参🔥</h3><p><strong>在声明函数时</strong> ，可以在函数名称后面的小括号中添加一些参数，这些参数被称为 <strong>形参</strong> ，而在 <strong>调用该函数</strong><br>时，同样也需要传递相应的参数，这些参数被称为 <strong>实参</strong> 。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>形参</strong></td>
<td><strong>形</strong> 式上的 <strong>参</strong> 数 <strong>函数定义</strong> 的时候 传递的参数 当前并不知道是什么</td>
</tr>
<tr>
<td><strong>实参</strong></td>
<td><strong>实</strong> 际上的 <strong>参</strong> 数 <strong>函数调用</strong> 的时候 传递的参数 实参是传递给形参的</td>
</tr>
</tbody></table>
<p><strong>参数的作用</strong> : 在 <strong>函数内部</strong> 某些值不能固定，我们可以通过参数在 <strong>调用函数时传递不同的值</strong> 进去</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 带参数的函数声明</span>
<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span> <span class="token punctuation">,</span> 形参<span class="token number">3</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可以定义任意多的参数，用逗号分隔</span>
    <span class="token comment" spellcheck="true">// 函数体</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 带参数的函数调用</span>
<span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如：利用函数求任意两个数的和</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明函数</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 调用函数</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//11</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>函数调用的时候实参值是传递给形参的</p>
</li>
<li><p>形参简单理解为: <strong>不用声明的变量</strong></p>
</li>
<li><p>实参和形参的多个参数之间用<code>逗号(,)</code>分隔，</p>
</li>
</ul>
<h3 id="1-3-2、形参和实参个数不匹配🔥"><a href="#1-3-2、形参和实参个数不匹配🔥" class="headerlink" title="1.3.2、形参和实参个数不匹配🔥"></a>1.3.2、形参和实参个数不匹配🔥</h3><table>
<thead>
<tr>
<th>参数个数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>实参个数等于形参个数</td>
<td>输出正确结果</td>
</tr>
<tr>
<td>实参个数多于形参个数</td>
<td>只取到形参的个数</td>
</tr>
<tr>
<td>实参个数小于形参个数</td>
<td>多的形参定义为undefined，结果为NaN</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 300，形参和实参个数相等，输出正确结果</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 500，实参个数多于形参，只取到形参的个数</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 实参个数少于形参，多的形参定义为undefined，结果为NaN</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：在JavaScript中，形参的默认值是undefined</strong></p>
<h3 id="1-3-3、小结🔥"><a href="#1-3-3、小结🔥" class="headerlink" title="1.3.3、小结🔥"></a>1.3.3、小结🔥</h3><ul>
<li>函数可以带参数也可以不带参数</li>
<li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li>
<li>调用函数的时候，函数名括号里面的是实参</li>
<li>多个参数中间用逗号分隔</li>
<li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li>
</ul>
<h2 id="1-4、函数的返回值🔥"><a href="#1-4、函数的返回值🔥" class="headerlink" title="1.4、函数的返回值🔥"></a>1.4、函数的返回值🔥</h2><h3 id="1-4-1、return语句🔥"><a href="#1-4-1、return语句🔥" class="headerlink" title="1.4.1、return语句🔥"></a>1.4.1、return语句🔥</h3><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p>
<p>return 语句的语法格式如下：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明函数</span>
<span class="token keyword">function</span> 函数名（）<span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">return</span>  需要返回的值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 调用函数</span>
<span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此时调用函数就可以得到函数体内return 后面的值</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>在使用 return 语句时，函数会停止执行，并返回指定的值</p>
</li>
<li><p>如果函数没有 return ，返回的值是 undefined</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明函数</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">return</span>  <span class="token number">666</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 调用函数</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此时 sum 的值就等于666，因为 return 语句会把自身后面的值返回给调用者 </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-4-2、return-终止函数🔥"><a href="#1-4-2、return-终止函数🔥" class="headerlink" title="1.4.2、return 终止函数🔥"></a>1.4.2、return 终止函数🔥</h3><p>return 语句之后的代码不被执行</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num1，num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//函数体</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意：return 后的代码不执行</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我不会被执行，因为前面有 return'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> resNum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span>
<span class="token function">alert</span><span class="token punctuation">(</span>resNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 27</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-4-3、return-的返回值🔥"><a href="#1-4-3、return-的返回值🔥" class="headerlink" title="1.4.3、return 的返回值🔥"></a>1.4.3、return 的返回值🔥</h3><p>return <strong>只能返回一个值</strong> 。如果用逗号隔开多个值， <strong>以最后一个为准</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num1，num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//函数体</span>
    <span class="token keyword">return</span> num1<span class="token punctuation">,</span>num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> resNum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span>
<span class="token function">alert</span><span class="token punctuation">(</span>resNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 6</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-4-4、小结🔥"><a href="#1-4-4、小结🔥" class="headerlink" title="1.4.4、小结🔥"></a>1.4.4、小结🔥</h3><p>函数都是有返回值的</p>
<ol>
<li>如果有 return ，则返回 return 后面的值</li>
<li>如果没有 return，则返回 undefined</li>
</ol>
<h3 id="1-4-5、区别🔥"><a href="#1-4-5、区别🔥" class="headerlink" title="1.4.5、区别🔥"></a>1.4.5、区别🔥</h3><p>break、continue、return 的区别</p>
<ul>
<li><code>break</code> ： 结束当前循环体(如 for、while)</li>
<li><code>continue</code> ：跳出本次循环，继续执行下次循环(如for、while)</li>
<li><code>return</code> ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li>
</ul>
<h3 id="1-4-5、练习"><a href="#1-4-5、练习" class="headerlink" title="1.4.5、练习"></a>1.4.5、练习</h3><p><strong>1.利用函数求任意两个数的最大值</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num1 <span class="token operator">></span> num2 <span class="token operator">?</span> num1 <span class="token punctuation">:</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.求数组 [5,2,99,101,67,77] 中的最大数值</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个获取数组中最大数的函数</span>
<span class="token keyword">function</span> <span class="token function">getMaxFromArr</span><span class="token punctuation">(</span>numArray<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> maxNum <span class="token operator">=</span> numArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>numArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>maxNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
            maxNum <span class="token operator">=</span> numArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> maxN <span class="token operator">=</span> <span class="token function">getMaxFromArr</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这个实参是个数组</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'最大值为'</span> <span class="token operator">+</span> maxN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>3.创建一个函数，实现两个数之间的加减乘除运算，并将结果返回</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第一个数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第二个数'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">,</span> a <span class="token operator">/</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="1-5、arguments的使用🔥"><a href="#1-5、arguments的使用🔥" class="headerlink" title="1.5、arguments的使用🔥"></a>1.5、arguments的使用🔥</h2><p>当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments<br>实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。</p>
<ul>
<li><p><strong>arguments</strong> 存放的是传递过来的实参</p>
</li>
<li><p><strong>arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点</strong></p>
</li>
</ul>
<p>​ ①：具有 length 属性</p>
<p>​ ②：按索引方式储存数据</p>
<p>​ ③：不具有数组的 push , pop 等方法</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 函数声明</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//里面存储了所有传递过来的实参</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 函数调用</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如：利用函数求任意个数的最大值</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> max <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🔥函数调用另外一个函数"><a href="#🔥函数调用另外一个函数" class="headerlink" title="🔥函数调用另外一个函数"></a>🔥函数调用另外一个函数</h2><p>因为每个函数都是独立的代码块，用于完成特殊任务，因此经常会用到函数相互调用的情况。具体演示在下面的函数练习中会有。</p>
<h2 id="1-6、函数练习"><a href="#1-6、函数练习" class="headerlink" title="1.6、函数练习"></a>1.6、函数练习</h2><p><strong>1.利用函数封装方式，翻转任意一个数组</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.利用函数封装方式，对数组排序 – 冒泡排序</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>3.输入一个年份，判断是否是闰年（闰年：能被4整除并且不能被100整数，或者能被400整除）</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isRun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRun</span><span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRun</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>4.用户输入年份，输出当前年份2月份的天数，如果是闰年，则2月份是 29天， 如果是平年，则2月份是 28天</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">backDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入年份:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//调用函数需要加小括号</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你输入的'</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">'是闰年，2月份有29天'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您输入的'</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">'不是闰年，2月份有28天'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">backDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//判断是否是闰年的函数</span>
<span class="token keyword">function</span> <span class="token function">isRun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="1-7、函数的两种声明方式🔥"><a href="#1-7、函数的两种声明方式🔥" class="headerlink" title="1.7、函数的两种声明方式🔥"></a>1.7、函数的两种声明方式🔥</h2><h3 id="1-7-1、自定义函数方式-命名函数-🔥"><a href="#1-7-1、自定义函数方式-命名函数-🔥" class="headerlink" title="1.7.1、自定义函数方式(命名函数)🔥"></a>1.7.1、自定义函数方式(命名函数)🔥</h3><p>利用函数关键字 function 自定义函数方式。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明定义方式</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 调用  </span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><p><strong>因为有名字，所以也被称为命名函数</strong></p>
</li>
<li><p><strong>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</strong></p>
</li>
</ol>
<h3 id="1-7-2、函数表达式方式-匿名函数-🔥"><a href="#1-7-2、函数表达式方式-匿名函数-🔥" class="headerlink" title="1.7.2、函数表达式方式(匿名函数)🔥"></a>1.7.2、函数表达式方式(匿名函数)🔥</h3><p>利用函数表达式方式的写法如下：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是函数表达式写法，匿名函数后面跟分号结束</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 调用的方式，函数调用必须写到函数体下面</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>因为函数没有名字，所以也称为 <strong>匿名函数</strong></p>
</li>
<li><p>这个fn 里面存储的是一个函数</p>
</li>
<li><p><strong>函数调用的代码必须写到函数体后面</strong></p>
</li>
</ul>
<h1 id="2、作用域🔥"><a href="#2、作用域🔥" class="headerlink" title="2、作用域🔥"></a>2、作用域🔥</h1><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的 <strong>可用性的代码范围</strong> 就是这个名字的 <strong>作用域</strong><br>。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p>
<p>JavaScript (ES6前) 中的作用域有两种：</p>
<ul>
<li>全局作用域</li>
<li>局部作用域(函数作用域)</li>
</ul>
<h2 id="2-1、全局作用域🔥"><a href="#2-1、全局作用域🔥" class="headerlink" title="2.1、全局作用域🔥"></a>2.1、全局作用域🔥</h2><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p>
<h2 id="2-2、局部（函数）作用域🔥"><a href="#2-2、局部（函数）作用域🔥" class="headerlink" title="2.2、局部（函数）作用域🔥"></a>2.2、局部（函数）作用域🔥</h2><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域</p>
<h2 id="2-3、JS-没有块级作用域🔥"><a href="#2-3、JS-没有块级作用域🔥" class="headerlink" title="2.3、JS 没有块级作用域🔥"></a>2.3、JS 没有块级作用域🔥</h2><ul>
<li>块作用域由 <code>&#123;&#125;</code> 包括</li>
<li>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    int num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">// 123</span>
<span class="token punctuation">}</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// 报错</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JS 中没有块级作用域(在ES6之前)</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    int num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">// 123</span>
<span class="token punctuation">}</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// 123</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="3、变量的作用域🔥"><a href="#3、变量的作用域🔥" class="headerlink" title="3、变量的作用域🔥"></a>3、变量的作用域🔥</h1><p>在JavaScript中，根据作用域的不同，变量可以分为两种：</p>
<ul>
<li>全局变量</li>
<li>局部变量</li>
</ul>
<h2 id="3-1、全局变量🔥"><a href="#3-1、全局变量🔥" class="headerlink" title="3.1、全局变量🔥"></a>3.1、全局变量🔥</h2><p>在全局作用域下声明的变量叫做全局变量（ <strong>在函数外部定义的变量</strong> ）</p>
<ul>
<li><p>全局变量在代码的任何位置都可以使用</p>
</li>
<li><p>在全局作用域下 var 声明的变量 是全局变量</p>
</li>
<li><p>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</p>
</li>
</ul>
<h2 id="3-2、局部变量🔥"><a href="#3-2、局部变量🔥" class="headerlink" title="3.2、局部变量🔥"></a>3.2、局部变量🔥</h2><p>在局部作用域下声明的变量叫做局部变量（ <strong>在函数内部定义的变量</strong> ）</p>
<ul>
<li><p>局部变量只能在该函数内部使用</p>
</li>
<li><p>在函数内部 var 声明的变量是局部变量</p>
</li>
<li><p>函数的 <strong>形参</strong> 实际上就是 <strong>局部变量</strong></p>
</li>
</ul>
<h2 id="3-3、区别🔥"><a href="#3-3、区别🔥" class="headerlink" title="3.3、区别🔥"></a>3.3、区别🔥</h2><ul>
<li><p>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</p>
</li>
<li><p>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</p>
</li>
</ul>
<h1 id="4、作用域链🔥"><a href="#4、作用域链🔥" class="headerlink" title="4、作用域链🔥"></a>4、作用域链🔥</h1><ol>
<li><p>只要是代码，就至少有一个作用域</p>
</li>
<li><p>写在函数内部的叫局部作用域</p>
</li>
<li><p>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</p>
</li>
<li><p>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</p>
</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 作用域链: 内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值，这种结构我们称为作用域链表</span>

<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外部函数</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    
    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//内部函数</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 20 ,一级一级访问</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>作用域链：采取 <strong>就近原则</strong> 的方式来查找变量最终的值。</li>
</ul>
<h1 id="5、预解析🔥"><a href="#5、预解析🔥" class="headerlink" title="5、预解析🔥"></a>5、预解析🔥</h1><p>首先来看几段代码和结果：</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果是多少？</span>
<span class="token comment" spellcheck="true">//会报错 num is undefined</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果是多少？</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   
<span class="token comment" spellcheck="true">// undefined</span>

<span class="token comment" spellcheck="true">// 命名函数(自定义函数方式):若我们把函数调用放在函数声明上面</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment" spellcheck="true">//11</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 匿名函数(函数表达式方式):若我们把函数调用放在函数声明上面</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span>  fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//相当于执行了以下代码</span>
<span class="token keyword">var</span> fn<span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//fn没赋值，没这个，报错</span>
<span class="token keyword">var</span>  fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript<br>代码的时候分为两步： <strong>预解析和代码执行。</strong></p>
<ul>
<li><p><strong>预解析</strong> ：js引擎会把js里面所有的 <strong>var</strong> 还有 <strong>function</strong> 提升到当前作用域的最前面</p>
</li>
<li><p><strong>代码执行</strong> ：从上到下执行JS语句</p>
</li>
</ul>
<p>预解析只会发生在通过 var 定义的变量和 function 上。学习预解析能够让我们知道 <strong>为什么在变量声明之前访问变量的值是 undefined</strong>，<strong>为什么在函数声明之前就可以调用函数。</strong></p>
<h2 id="5-1、变量预解析-变量提升-🔥"><a href="#5-1、变量预解析-变量提升-🔥" class="headerlink" title="5.1、变量预解析(变量提升)🔥"></a>5.1、变量预解析(变量提升)🔥</h2><p>变量预解析也叫做变量提升、函数提升</p>
<p>变量提升: 变量的声明会被提升到 <strong>当前作用域</strong> 的最上面，变量的赋值不会提升</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果是多少？</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   
<span class="token comment" spellcheck="true">// undefined</span>

<span class="token comment" spellcheck="true">//相当于执行了以下代码</span>
<span class="token keyword">var</span> num<span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// 变量声明提升到当前作用域最上面</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">// 变量的赋值不会提升</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-2、函数预解析-函数提升-🔥"><a href="#5-2、函数预解析-函数提升-🔥" class="headerlink" title="5.2、函数预解析(函数提升)🔥"></a>5.2、函数预解析(函数提升)🔥</h2><p>函数提升： 函数的声明会被提升到 <strong>当前作用域</strong> 的最上面，但是不会调用函数。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment" spellcheck="true">//11</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-3、解决函数表达式声明调用问题🔥"><a href="#5-3、解决函数表达式声明调用问题🔥" class="headerlink" title="5.3、解决函数表达式声明调用问题🔥"></a>5.3、解决函数表达式声明调用问题🔥</h2><p>对于函数表达式声明调用需要记住： <strong>函数表达式调用必须写在函数声明的下面</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 匿名函数(函数表达式方式):若我们把函数调用放在函数声明上面</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span>  fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//相当于执行了以下代码</span>
<span class="token keyword">var</span> fn<span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//fn没赋值，没这个，报错</span>
<span class="token keyword">var</span>  fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-4、预解析练习🔥"><a href="#5-4、预解析练习🔥" class="headerlink" title="5.4、预解析练习🔥"></a>5.4、预解析练习🔥</h2><p>预解析部分十分重要</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 练习1</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//undefined</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 最终结果是 undefined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码相当于执行了以下操作</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> num<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 练习2</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//undefined</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//20</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 最终结果是 undefined 20</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码相当于执行了以下操作</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 练习3</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码相当于执行了以下操作</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b<span class="token punctuation">;</span>
    <span class="token keyword">var</span> a
    b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//undefined</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//9</span>
    a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 练习4</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 相当于 var a = 9; b = 9;c = 9;  b和c的前面没有var声明,当全局变量看</span>
    <span class="token comment" spellcheck="true">// 集体声明 var a = 9,b = 9,c = 9;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述代码相当于执行了以下操作</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//9</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//9</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//9</span>
<span class="token punctuation">}</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//报错 a是局部变量</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSript（一）基础总结</title>
    <url>/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="🔥系列🔥"><a href="#🔥系列🔥" class="headerlink" title="🔥系列🔥"></a>🔥系列🔥</h1><table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/" title="JavaSript（一）基础总结">（一）基础总结</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/" title="JavaSript（二）函数与作用域">（二）函数与作用域</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/" title="JavaSript（三）对象与内置对象">（三）对象与内置对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%9B%9B%EF%BC%89DOM%E6%8A%80%E6%9C%AF/" title="JavaSript（四）DOM技术">（四）DOM技术</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%BA%94%EF%BC%89BOM%E6%8A%80%E6%9C%AF/" title="JavaSript（五）BOM技术">（五）BOM技术</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E5%85%AD%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="JavaSript（六）面向对象">（六）面向对象</a></td>
<td align="center"><a href="/2023/03/30/JavaSript%EF%BC%88%E4%B8%83%EF%BC%89ES6/" title="JavaSript（七）ES6">（七）ES6</a></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="✍初识JavaScirpt"><a href="#✍初识JavaScirpt" class="headerlink" title="✍初识JavaScirpt"></a>✍初识JavaScirpt</h1><ul>
<li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）<span id="more"></span></li>
<li>脚本语言：不需要编译，运行过程中由 js 解释器（js 引擎）逐行来进行解释并执行</li>
<li>现在也可以基于 Node.js 技术进行服务器端编程</li>
</ul>
<h2 id="✍浏览器执行JS简介"><a href="#✍浏览器执行JS简介" class="headerlink" title="✍浏览器执行JS简介"></a>✍浏览器执行JS简介</h2><p>浏览器分成两部分：渲染引擎和 JS 引擎</p>
<ul>
<li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li>
<li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li>
</ul>
<p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS<br>引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
<h2 id="✍JS的组成"><a href="#✍JS的组成" class="headerlink" title="✍JS的组成"></a>✍JS的组成</h2><p>JavaScript 包括 ECMAScript、DOM、BOM</p>
<h3 id="✍ECMAScript"><a href="#✍ECMAScript" class="headerlink" title="✍ECMAScript"></a>✍ECMAScript</h3><p><strong>ECMAScript</strong> 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为<br>JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p>
<p>ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p>
<h3 id="🔥DOM文档对象模型"><a href="#🔥DOM文档对象模型" class="headerlink" title="🔥DOM文档对象模型"></a>🔥DOM文档对象模型</h3><p><strong>文档对象模型</strong> （Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM<br>提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p>
<h3 id="🔥BOM浏览器对象模型"><a href="#🔥BOM浏览器对象模型" class="headerlink" title="🔥BOM浏览器对象模型"></a>🔥BOM浏览器对象模型</h3><p><strong>BOM</strong> (Browser Object Model，简称BOM)<br>是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>
<h1 id="1、JS初体验🔥"><a href="#1、JS初体验🔥" class="headerlink" title="1、JS初体验🔥"></a>1、JS初体验🔥</h1><h2 id="1-1、行内式JS"><a href="#1-1、行内式JS" class="headerlink" title="1.1、行内式JS"></a>1.1、行内式JS</h2><input type="button" value="点我试试" onclick="javascript:alert('Hello World')">

<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点我试试<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert(<span class="token punctuation">'</span>Hello World<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性)，如： onclink</li>
<li>注意单双引号的使用：在HTML中我们推荐使用 <strong>双引号</strong> ，JS中我们推荐使用 <strong>单引号</strong></li>
<li>可读性差，在 HTML 中编入 JS 大量代码时，不方便阅读</li>
<li>特殊情况下使用</li>
</ol>
<h2 id="1-2、内嵌式JS🔥"><a href="#1-2、内嵌式JS🔥" class="headerlink" title="1.2、内嵌式JS🔥"></a>1.2、内嵌式JS🔥</h2><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li>
<li>内嵌 JS 是学习时常用的方式</li>
</ul>
<h2 id="1-3、外部JS🔥"><a href="#1-3、外部JS🔥" class="headerlink" title="1.3、外部JS🔥"></a>1.3、外部JS🔥</h2><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol>
<li>利于HTML页面代码结构化，把单独JS代码独立到HTML页面之外，既美观，又方便</li>
<li>引用外部JS文件的script标签中间不可以写代码</li>
<li>适合于JS代码量比较大的情况</li>
</ol>
<h1 id="2、JS基本语法🔥"><a href="#2、JS基本语法🔥" class="headerlink" title="2、JS基本语法🔥"></a>2、JS基本语法🔥</h1><h2 id="2-1、注释🔥"><a href="#2-1、注释🔥" class="headerlink" title="2.1、注释🔥"></a>2.1、注释🔥</h2><h3 id="2-1-1、单行注释🔥"><a href="#2-1-1、单行注释🔥" class="headerlink" title="2.1.1、单行注释🔥"></a>2.1.1、单行注释🔥</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  单行注释</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>快捷键<code>ctrl + /</code></li>
</ul>
<h3 id="2-1-2、多行注释🔥"><a href="#2-1-2、多行注释🔥" class="headerlink" title="2.1.2、多行注释🔥"></a>2.1.2、多行注释🔥</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*
    多行注释
*/</span>    
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>快捷键 <code>shift + alt + a</code></li>
<li>vscode中修改快捷键方式：vscode➡ 首选项按钮➡ 键盘快捷方式 ➡ 查找原来的快捷键➡ 修改为新的快捷键➡ 回车确认</li>
</ul>
<h2 id="2-2、输入输出语句🔥"><a href="#2-2、输入输出语句🔥" class="headerlink" title="2.2、输入输出语句🔥"></a>2.2、输入输出语句🔥</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>归属</th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg);</td>
<td>浏览器弹出警示框</td>
<td>浏览器</td>
</tr>
<tr>
<td>console.log(msg);</td>
<td>浏览器控制台打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>prompt(info);</td>
<td>浏览看弹出输入框，用户可以输入</td>
<td>浏览器</td>
</tr>
</tbody></table>
<ul>
<li><code>alert()</code> 主要用来显示消息给用户</li>
<li><code>console.log()</code> 用来给程序员看自己运行时的消息</li>
</ul>
<h2 id="2-3、变量🔥"><a href="#2-3、变量🔥" class="headerlink" title="2.3、变量🔥"></a>2.3、变量🔥</h2><ul>
<li><p>变量是用于存放数据的 <strong>容器</strong> ，我们通过 <strong>变量名</strong> 获取数据，甚至数据可以修改</p>
</li>
<li><p><strong>本质： <strong>变量是程序在</strong> 内存</strong>中申请的一块用来存放数据的空间</p>
</li>
</ul>
<h3 id="2-3-1、变量初始化🔥"><a href="#2-3-1、变量初始化🔥" class="headerlink" title="2.3.1、变量初始化🔥"></a>2.3.1、变量初始化🔥</h3><ol>
<li><p>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</p>
</li>
<li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p>
</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明变量同时赋值为18</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> 
<span class="token comment" spellcheck="true">//同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> address <span class="token operator">=</span><span class="token string">'火影村'</span><span class="token punctuation">,</span>salary <span class="token operator">=</span> <span class="token number">15000</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-3-2、声明变量特殊情况🔥"><a href="#2-3-2、声明变量特殊情况🔥" class="headerlink" title="2.3.2、声明变量特殊情况🔥"></a>2.3.2、声明变量特殊情况🔥</h3><table>
<thead>
<tr>
<th>情况</th>
<th>行为</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>var age; console.log(age);</td>
<td>只声明，不赋值</td>
<td>undefined</td>
</tr>
<tr>
<td>console.log(age)</td>
<td>不声明 不赋值 直接使用</td>
<td>报错</td>
</tr>
<tr>
<td>age &#x3D; 10;console.log(age);</td>
<td>不声明 只赋值</td>
<td>10</td>
</tr>
</tbody></table>
<h3 id="2-3-3、变量的命名规范🔥"><a href="#2-3-3、变量的命名规范🔥" class="headerlink" title="2.3.3、变量的命名规范🔥"></a>2.3.3、变量的命名规范🔥</h3><ol>
<li><p>由字母(A-Z,a-z)，数字(0-9)，下划线(_)，美元符号($)组成，如:usrAge,num01,__name</p>
</li>
<li><p>严格区分大小写。 <code>var app;</code> 和 <code>var App;</code> 是两个变量</p>
</li>
<li><p>不能以数字开头。</p>
</li>
<li><p>不能是关键字，保留字。例如：<code>var,for,while</code></p>
</li>
<li><p>遵循驼峰命名法。首字母小写，后面单词的首字母需要大写。<code>myFirstName</code></p>
</li>
<li><p>推荐翻译网站：有道 爱词霸</p>
</li>
</ol>
<h2 id="2-4、数据类型🔥"><a href="#2-4、数据类型🔥" class="headerlink" title="2.4、数据类型🔥"></a>2.4、数据类型🔥</h2><p><strong>JavaScript</strong> <strong>是一种弱类型或者说动态语言。</strong>这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 			 <span class="token comment" spellcheck="true">//这是一个数字型</span>
<span class="token keyword">var</span> areYouOk <span class="token operator">=</span> <span class="token string">'使得'</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//这是一个字符串</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><p>在代码运行时，变量的数据类型是由 JS引擎 根据 &#x3D; 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。</p>
</li>
<li><p>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//x为数字</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//x为字符串</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>JS 把数据类型分为两类：</p>
<ul>
<li>基本数据类型(Number,String,Boolean,Undefined,Null)</li>
<li>复杂数据类型(Object)</li>
</ul>
<h3 id="2-4-1、基本数据类型🔥"><a href="#2-4-1、基本数据类型🔥" class="headerlink" title="2.4.1、基本数据类型🔥"></a>2.4.1、基本数据类型🔥</h3><table>
<thead>
<tr>
<th>简单数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>Number</td>
<td>数字型，包含整型值和浮点型值，如21，0.21</td>
<td>0</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值类型，如true，false ，等价于1和0</td>
<td>false</td>
</tr>
<tr>
<td>Undefined</td>
<td>var a; 声明了变量a但是没有赋值，此时a&#x3D;undefined</td>
<td>undefined（未定义的）</td>
</tr>
<tr>
<td>string</td>
<td>字符串类型，如“张三”</td>
<td>“”</td>
</tr>
<tr>
<td>Null</td>
<td>var a &#x3D; null;声明了变量a为空值</td>
<td>null</td>
</tr>
</tbody></table>
<h3 id="2-4-2、数字型Number"><a href="#2-4-2、数字型Number" class="headerlink" title="2.4.2、数字型Number"></a>2.4.2、数字型Number</h3><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//整数</span>
<span class="token keyword">var</span> Age <span class="token operator">=</span> <span class="token number">21.3747</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//小数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="2-4-2、数字型进制🔥"><a href="#2-4-2、数字型进制🔥" class="headerlink" title="2.4.2、数字型进制🔥"></a>2.4.2、数字型进制🔥</h3><p>最常见的进制有二进制、八进制、十进制、十六进制。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.八进制数字序列范围：0~7</span>
<span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">07</span><span class="token punctuation">;</span> 		<span class="token comment" spellcheck="true">//对应十进制的7</span>
<span class="token keyword">var</span> Num2 <span class="token operator">=</span> <span class="token number">019</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//对应十进制的19</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//对应十进制的8</span>


<span class="token comment" spellcheck="true">// 2.十六进制数字序列范围：0~9以及A~F</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></li>
</ul>
<h4 id="①数字型范围🔥"><a href="#①数字型范围🔥" class="headerlink" title="①数字型范围🔥"></a>①数字型范围🔥</h4><ul>
<li>JS中数值的最大值：<code>Number.MAX_VALUE</code></li>
<li>JS中数值的最小值：<code>Number.MIN_VALUE</code></li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">consol<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
consol<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="②数字型的三个特殊值🔥"><a href="#②数字型的三个特殊值🔥" class="headerlink" title="②数字型的三个特殊值🔥"></a>②数字型的三个特殊值🔥</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//Infinity(无穷大)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//-Infinity(无穷小)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       	<span class="token comment" spellcheck="true">//NaN - Not a Number ,代表任何一个非数值</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Infinity ，代表无穷大，大于任何数值</li>
<li>-Infinity ，代表无穷小，小于任何数值</li>
<li>Nan ，Not a Number，代表一个非数值</li>
</ul>
<h4 id="③isNaN🔥"><a href="#③isNaN🔥" class="headerlink" title="③isNaN🔥"></a>③isNaN🔥</h4><p>这个方法用来判断非数字，并且返回一个值，如果是数字返回的是false，如果不是数字返回的是true</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> userAge <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token function">isNan</span><span class="token punctuation">(</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//false,21不是一个非数字</span>

<span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">"andy"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNan</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//true,"andy"是一个非数字</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-4-3、字符串型String🔥"><a href="#2-4-3、字符串型String🔥" class="headerlink" title="2.4.3、字符串型String🔥"></a>2.4.3、字符串型String🔥</h3><p>字符串型可以是引号中的任意文本，其语法为 “ <strong>双引号</strong> ” 和 “ <strong>单引号</strong> ’’</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我爱北京天安门~"</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//使用双引号表示字符串</span>
<span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">'我爱北京'</span><span class="token punctuation">;</span>			  <span class="token comment" spellcheck="true">//使用单引号表示字符串</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐 <strong>使用单引号</strong> 。</p>
<h4 id="①字符串引号嵌套🔥"><a href="#①字符串引号嵌套🔥" class="headerlink" title="①字符串引号嵌套🔥"></a>①字符串引号嵌套🔥</h4><p>JS可以用 <strong>单引号嵌套双引号</strong> ，或者用 <strong>双引号嵌套单引号</strong> （ <strong>外双内单，外单内双</strong> ）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span><span class="token string">'我是一个“高富帅”'</span> <span class="token comment" spellcheck="true">//可以用 ' ' 包含 " "</span>
<span class="token keyword">var</span> strMsg2 <span class="token operator">=</span><span class="token string">"我是'高富帅'"</span> <span class="token comment" spellcheck="true">//可以用" "  包含  ''</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="②字符串转义符🔥"><a href="#②字符串转义符🔥" class="headerlink" title="②字符串转义符🔥"></a>②字符串转义符🔥</h4><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p>
<p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行符，n是newline</td>
</tr>
<tr>
<td>\ | 斜杠\</td>
<td></td>
</tr>
<tr>
<td>\ ’</td>
<td>’ 单引号</td>
</tr>
<tr>
<td>\ ‘’</td>
<td>‘’ 双引号</td>
</tr>
<tr>
<td>\ t</td>
<td>tab 缩进</td>
</tr>
<tr>
<td>\ b</td>
<td>空格，b是blank的意思</td>
</tr>
</tbody></table>
<h4 id="③字符串长度🔥"><a href="#③字符串长度🔥" class="headerlink" title="③字符串长度🔥"></a>③字符串长度🔥</h4><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过字符串的length属性可以获取整个字符串的长度</span>
<span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我是高富帅！"</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//显示6</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="④字符串的拼接🔥"><a href="#④字符串的拼接🔥" class="headerlink" title="④字符串的拼接🔥"></a>④字符串的拼接🔥</h4><ul>
<li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 &#x3D; 拼接之后的新字符串</strong></li>
<li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li>
</ul>
<p><strong>注意</strong> ：字符串 + 任何类型 &#x3D;拼接之后的新字符串</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1 字符串相加</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//hello World</span>

<span class="token comment" spellcheck="true">//2 数值字符串相加</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'100'</span> <span class="token operator">+</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//100100</span>

<span class="token comment" spellcheck="true">//3 数值字符串+数值</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1212</span>

<span class="token comment" spellcheck="true">//4 数值+数值</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//24</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>+</code> 号总结口诀：🌏数值相加，字符相连🌏</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span>  age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">'岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">'岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引引加加，最终也是上面的形式</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>⑤字符串拼接加强🔥</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pink老师'</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment" spellcheck="true">//只要有字符就会相连</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// console.log('Pink老师age岁了');		//这样不行,会输出 "Pink老师age岁了"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pink老师'</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>		 <span class="token comment" spellcheck="true">// Pink老师18</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pink老师'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">// Pink老师18岁啦</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li>
<li>变量是不能添加引号的，因为加引号的变量会变成字符串</li>
<li>如果变量两侧都有字符串拼接，口诀&#x3D;&#x3D;🌏“引引加加 ”，删掉数字🌏&#x3D;&#x3D;变量写加中间</li>
</ul>
<h3 id="2-4-4、布尔型Boolean🔥"><a href="#2-4-4、布尔型Boolean🔥" class="headerlink" title="2.4.4、布尔型Boolean🔥"></a>2.4.4、布尔型Boolean🔥</h3><ul>
<li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li>
<li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 true当加法来看当1来看，flase当0来看</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="2-4-5、undefined未定义🔥"><a href="#2-4-5、undefined未定义🔥" class="headerlink" title="2.4.5、undefined未定义🔥"></a>2.4.5、undefined未定义🔥</h3><ul>
<li>一个 <strong>声明后没有被赋值</strong> 的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果一个变量声明未赋值，就是undefined 未定义数据类型</span>
<span class="token keyword">var</span> str<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment" spellcheck="true">//undefined</span>
<span class="token keyword">var</span> variable <span class="token operator">=</span> undefined<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token string">'Pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefinedPink</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//NaN </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1.undefined 和 字符串 相加，会拼接字符串</p>
<p>2.undefined 和 数字相加，最后结果是 <strong>NaN</strong></p>
<h3 id="2-4-6、空值null🔥"><a href="#2-4-6、空值null🔥" class="headerlink" title="2.4.6、空值null🔥"></a>2.4.6、空值null🔥</h3><ul>
<li>一个声明变量给 null 值，里面存的值为空</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> space <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>space <span class="token operator">+</span> <span class="token string">'pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//nullpink</span>
console<span class="token punctuation">.</span><span class="token function">llog</span><span class="token punctuation">(</span>space <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="2-4-7、typeof🔥"><a href="#2-4-7、typeof🔥" class="headerlink" title="2.4.7、typeof🔥"></a>2.4.7、typeof🔥</h3><ul>
<li>typeof 可用来获取检测变量的数据类型</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 结果 number  </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>不同类型的返回值</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>typeof “小白”</td>
<td>“string”</td>
</tr>
<tr>
<td>number</td>
<td>typeof 18</td>
<td>“number”</td>
</tr>
<tr>
<td>boolean</td>
<td>typeof true</td>
<td>“boolean”</td>
</tr>
<tr>
<td>undefined</td>
<td>typeof undefined</td>
<td>“undefined”</td>
</tr>
<tr>
<td>null</td>
<td>typeof null</td>
<td>“object”</td>
</tr>
</tbody></table>
<h3 id="2-4-8、字面量"><a href="#2-4-8、字面量" class="headerlink" title="2.4.8、字面量"></a>2.4.8、字面量</h3><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p>
<ul>
<li>数字字面量：8，9，10</li>
<li>字符串字面量：‘大前端’，‘后端’</li>
<li>布尔字面量：true、false</li>
</ul>
<p>通过控制台的颜色判断属于哪种数据类型</p>
<table>
<thead>
<tr>
<th>黑色</th>
<th>字符串</th>
</tr>
</thead>
<tbody><tr>
<td>蓝色</td>
<td>数值</td>
</tr>
<tr>
<td>灰色</td>
<td>undefined 和 null</td>
</tr>
</tbody></table>
<h2 id="2-5、数据类型转换🔥"><a href="#2-5、数据类型转换🔥" class="headerlink" title="2.5、数据类型转换🔥"></a>2.5、数据类型转换🔥</h2><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，<br><strong>就是把一种数据类型的变量转换成另外一种数据类型</strong> 。</p>
<p>我们通常会实现3种方式的转换：</p>
<ul>
<li>转换为字符串类型</li>
<li>转换为数字型</li>
<li>转换为布尔型</li>
</ul>
<h3 id="①转换为字符串型🔥"><a href="#①转换为字符串型🔥" class="headerlink" title="①转换为字符串型🔥"></a>①转换为字符串型🔥</h3><table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>toString()</td>
<td>转成字符串</td>
<td>var num &#x3D; 1; alert(num.toString());</td>
</tr>
<tr>
<td>String()强制转换</td>
<td>转成字符串</td>
<td>var num &#x3D; 1; alert(String(num));</td>
</tr>
<tr>
<td><strong>加号拼接字符串</strong></td>
<td>和字符串拼接的结果都是字符串</td>
<td>var num &#x3D;1; alert(num+“我是字符串”);</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.把数字型转换为字符串型 toString()  变量.toString()</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//2.强制转换</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>toString() 和 String() 使用方式不一样</li>
<li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一方式也称为隐式转换</li>
</ul>
<h3 id="②转换为数字型🔥"><a href="#②转换为数字型🔥" class="headerlink" title="②转换为数字型🔥"></a>②转换为数字型🔥</h3><table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>parselnt(string)函数</strong></td>
<td>将string类型转成整数数值型</td>
<td>parselnt(‘78’)</td>
</tr>
<tr>
<td><strong>parseFloat(string)函数</strong></td>
<td>将string类型转成浮点数数值型</td>
<td>parseFloat(‘78.21’)</td>
</tr>
<tr>
<td>Number()强制转换函数</td>
<td>将string类型转换为数值型</td>
<td>Number(‘12’)</td>
</tr>
<tr>
<td>js 隐式转换(- * &#x2F;)</td>
<td>利用算术运算隐式转换为数值型</td>
<td>‘12’-0</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.parseInt()</span>
<span class="token keyword">var</span> age <span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的年龄'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数字型18</span>
consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3取整</span>
consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.94'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3,不会四舍五入</span>
consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//120,会去掉单位</span>

<span class="token comment" spellcheck="true">// 2.parseFloat()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3.14</span>
consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'120px'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//120,会去掉单位</span>


<span class="token comment" spellcheck="true">// 3.利用Number(变量)</span>
<span class="token keyword">var</span> str <span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

<span class="token comment" spellcheck="true">// 4.利用了算术运算 - * /   隐式转换</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">-</span> <span class="token string">'120'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 123</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1.注意 parseInt 和 parseFloat ，这两个是重点</p>
<p>2.隐式转换是我们在进行算数运算的时候，JS自动转换了数据类型</p>
<h3 id="③转换为布尔型"><a href="#③转换为布尔型" class="headerlink" title="③转换为布尔型"></a>③转换为布尔型</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean()函数</td>
<td>其他类型转成布尔值</td>
<td>Boolean(‘true’);</td>
</tr>
</tbody></table>
<ul>
<li><p>代表空，否定的值会被转换为false，如 ’ ’ , 0, NaN , null , undefined</p>
</li>
<li><p>其余的值都会被被转换为true</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-6、运算符🔥"><a href="#2-6、运算符🔥" class="headerlink" title="2.6、运算符🔥"></a>2.6、运算符🔥</h2><p>运算符（operator）也被称为 <strong>操作符</strong> ，是用于实现赋值、比较和执行算数运算等功能的符号</p>
<p>JavaScript 中常用的运算符有：</p>
<ul>
<li>算数运算符</li>
<li>递增和递减运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
</ul>
<h3 id="2-6-1、算术运算符🔥"><a href="#2-6-1、算术运算符🔥" class="headerlink" title="2.6.1、算术运算符🔥"></a>2.6.1、算术运算符🔥</h3><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>10 + 20 &#x3D;30</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 20 &#x3D;-10</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 20 &#x3D;200</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除</td>
<td>10 &#x2F; 20 &#x3D;0.5</td>
</tr>
<tr>
<td>%</td>
<td>取余数（取模）</td>
<td>返回出发的余数 9 % 2 &#x3D;1</td>
</tr>
</tbody></table>
<h3 id="2-6-2、浮点数的精度问题🔥"><a href="#2-6-2、浮点数的精度问题🔥" class="headerlink" title="2.6.2、浮点数的精度问题🔥"></a>2.6.2、浮点数的精度问题🔥</h3><p>浮点数值的最高精度是17位小数，但在进行算数计算时其精确度远远不如整数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果不是0.3，0.30000000000000004</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果不是7，而是7.000000000000001</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>所以不要直接判断两个浮点数是否相等</strong></p>
<h3 id="2-6-3、递增和递减运算符🔥"><a href="#2-6-3、递增和递减运算符🔥" class="headerlink" title="2.6.3、递增和递减运算符🔥"></a>2.6.3、递增和递减运算符🔥</h3><p>递增（++）</p>
<p>递减（- -）</p>
<p>放在变量前面时，我们称为 <strong>前置递增(递减)运算符</strong></p>
<p>放在变量后面时，我们称为 <strong>后置递增(递减)运算符</strong></p>
<p><strong>注意</strong> ：递增和递减运算符必须和变量配合使用。</p>
<h4 id="①前置递增运算符🔥"><a href="#①前置递增运算符🔥" class="headerlink" title="①前置递增运算符🔥"></a>①前置递增运算符🔥</h4><p>++num num &#x3D; num + 1</p>
<p>使用口诀: <strong>先自加，后返回值</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
alert <span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 21</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>先自加 10+1&#x3D;11，返回11，此时num&#x3D;11</p>
<h4 id="②后置递增运算符🔥"><a href="#②后置递增运算符🔥" class="headerlink" title="②后置递增运算符🔥"></a>②后置递增运算符🔥</h4><p>num ++ num &#x3D; num +1</p>
<p>使用口诀: <strong>先返回原值，后自加</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="③小结🔥"><a href="#③小结🔥" class="headerlink" title="③小结🔥"></a>③小结🔥</h4><ul>
<li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</li>
<li>单独使用时，运行结果相同，与其他代码联用时，执行结果会不同</li>
<li>开发时，大多使用后置递增&#x2F;减，并且代码独占一行</li>
</ul>
<h3 id="2-6-4、比较-关系-运算符🔥"><a href="#2-6-4、比较-关系-运算符🔥" class="headerlink" title="2.6.4、比较(关系)运算符🔥"></a>2.6.4、比较(关系)运算符🔥</h3><p>比较运算符是 <strong>两个数据进行比较时所使用的运算符</strong> ，比较运算后，会 <strong>返回一个布尔值</strong> (true &#x2F; false)作为比较运算的结果。</p>
<table>
<thead>
<tr>
<th>运算符名称</th>
<th>说明</th>
<th>案例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>小于号</td>
<td>1 &lt; 2</td>
<td>true</td>
</tr>
</tbody></table>
<blockquote>
<p>| 大于号| 1 &gt; 2| false<br>&#x3D;| 大于等于号(大于或者等于)| 2 &gt;&#x3D; 2| true<br>&lt;&#x3D;| 小于等于号(小于或者等于)| 3 &lt;&#x3D; 2| false<br>&#x3D;&#x3D;| 判等号(会转型)| 37 &#x3D;&#x3D; 37| true<br>!&#x3D;| 不等号| 37 !&#x3D; 37| false<br>&#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;| 全等 要求值和数据类型都一致| 37 &#x3D;&#x3D;&#x3D; ‘37’| false  </p>
</blockquote>
<h4 id="①-x3D-x3D-x3D-x3D-x3D-小结"><a href="#①-x3D-x3D-x3D-x3D-x3D-小结" class="headerlink" title="①&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 小结"></a>①&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 小结</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>赋值</td>
<td>把右边给左边</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>判断</td>
<td>判断两边值是否相等(注意此时有隐士转换)</td>
</tr>
<tr>
<td>&#x3D;&#x3D;&#x3D;</td>
<td>全等</td>
<td>判断两边的值和数据类型是否完全相同</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="2-6-5、逻辑运算符🔥"><a href="#2-6-5、逻辑运算符🔥" class="headerlink" title="2.6.5、逻辑运算符🔥"></a>2.6.5、逻辑运算符🔥</h3><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值</p>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>“逻辑与”，简称”与” and</td>
<td>true &amp;&amp; false</td>
</tr>
<tr>
<td>｜｜</td>
<td>“逻辑或”，简称”或” or</td>
<td>true</td>
</tr>
<tr>
<td>!</td>
<td>“逻辑非”，简称”非” not</td>
<td>！true</td>
</tr>
</tbody></table>
<p>逻辑与：两边都是 true才返回 true，否则返回 false</p>
<p>逻辑或：两边都为 false 才返回 false，否则都为true</p>
<p>逻辑非：逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>
<span class="token comment" spellcheck="true">//逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="2-6-5-1、短路运算-逻辑中断-🔥"><a href="#2-6-5-1、短路运算-逻辑中断-🔥" class="headerlink" title="2.6.5.1、短路运算(逻辑中断)🔥"></a>2.6.5.1、短路运算(逻辑中断)🔥</h4><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p>
<h5 id="①逻辑与🔥"><a href="#①逻辑与🔥" class="headerlink" title="①逻辑与🔥"></a>①逻辑与🔥</h5><ul>
<li><p>语法：表达式1 &amp;&amp; 表达式2</p>
</li>
<li><p>如果第一个表达式的值为真，则返回表达式2</p>
</li>
<li><p>如果第一个表达式的值为假，则返回表达式1</p>
</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//789</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="②逻辑或"><a href="#②逻辑或" class="headerlink" title="②逻辑或"></a>②逻辑或</h5><ul>
<li><p>语法：表达式1 || 表达式2</p>
</li>
<li><p>如果第一个表达式的值为真，则返回表达式1</p>
</li>
<li><p>如果第一个表达式的值为假，则返回表达式2</p>
</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//123</span>

<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 先返回在加，相当于 (123 || 0)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 123</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-6-6、赋值运算符🔥"><a href="#2-6-6、赋值运算符🔥" class="headerlink" title="2.6.6、赋值运算符🔥"></a>2.6.6、赋值运算符🔥</h3><p>概念：用来把数据赋值给变量的运算符。</p>
<table>
<thead>
<tr>
<th>赋值运算符</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>直接赋值</td>
<td>var usrName &#x3D; ‘我是值’</td>
</tr>
<tr>
<td>+&#x3D; ，-&#x3D;</td>
<td>加，减一个数后再赋值</td>
<td>var age &#x3D; 10； age+&#x3D;5；&#x2F;&#x2F;15</td>
</tr>
<tr>
<td>*&#x3D;，&#x2F;&#x3D;，%&#x3D;</td>
<td>成，除，取模后再赋值</td>
<td>var age &#x3D; 2; age*&#x3D;5; &#x2F;&#x2F;10</td>
</tr>
</tbody></table>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
age <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相当于 age = age + 5;</span>
age <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相当于 age = age - 5;</span>
age <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于 age = age * 10;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-6-7、运算符优先级🔥"><a href="#2-6-7、运算符优先级🔥" class="headerlink" title="2.6.7、运算符优先级🔥"></a>2.6.7、运算符优先级🔥</h3><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>顺序</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小括号</td>
<td>()</td>
</tr>
<tr>
<td>2</td>
<td>一元运算符</td>
<td>++ – ！</td>
</tr>
<tr>
<td>3</td>
<td>算数运算符</td>
<td><strong>先 * &#x2F; 后 + -</strong></td>
</tr>
<tr>
<td>4</td>
<td>关系运算符</td>
<td><strong>&gt; , &gt;&#x3D; , &lt; , &lt;&#x3D;</strong>,</td>
</tr>
<tr>
<td>5</td>
<td>相等运算符</td>
<td>，！&#x3D;，&#x3D;，！&#x3D;&#x3D;</td>
</tr>
<tr>
<td>6</td>
<td>逻辑运算符</td>
<td>**先 &amp;&amp; 后</td>
</tr>
<tr>
<td>7</td>
<td>赋值运算符</td>
<td>&#x3D;</td>
</tr>
<tr>
<td>8</td>
<td>逗号运算符</td>
<td>，</td>
</tr>
</tbody></table>
<p>1.一元运算符里面的 <strong>逻辑非</strong> 优先级很高</p>
<ol start="2">
<li><strong>逻辑与</strong> 比 <strong>逻辑或</strong> 优先级高</li>
</ol>
<p>3.练习题</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token operator">>=</span> <span class="token number">6</span> <span class="token operator">||</span> <span class="token string">'人'</span> <span class="token operator">!=</span> <span class="token string">'阿凡达'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">144</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">// true</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//false </span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//true</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token string">"2"</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token comment" spellcheck="true">//false</span>

<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token operator">!</span>c <span class="token operator">||</span> b <span class="token operator">&amp;&amp;</span> a <span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-7、流程控制🔥"><a href="#2-7、流程控制🔥" class="headerlink" title="2.7、流程控制🔥"></a>2.7、流程控制🔥</h2><p>流程控制主要有三种结构，分别是顺序结构、分支结构和循环结构，这三种结构代表三种代码执行的顺序</p>
<h3 id="2-7-1、分支结构🔥"><a href="#2-7-1、分支结构🔥" class="headerlink" title="2.7.1、分支结构🔥"></a>2.7.1、分支结构🔥</h3><p>JS 语言提供了两种分支结构语句： <strong>JS 语句</strong> <strong>switch语句</strong></p>
<h4 id="①if语句🔥"><a href="#①if语句🔥" class="headerlink" title="①if语句🔥"></a>①if语句🔥</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 条件成立执行代码，否则什么也不做</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//条件成立执行的代码语句</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>案例：进入网吧</p>
<p>弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> usrAge <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入您的年龄:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>usrAge <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您的年龄合法，欢迎来到老子网吧享受学习的乐趣！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="②if-else-语句🔥"><a href="#②if-else-语句🔥" class="headerlink" title="②if else 语句🔥"></a>②if else 语句🔥</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 条件成立，执行if里面代码，否则执行else里面的代码</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//[如果]条件成立执行的代码</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//[否则]执行的代码</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>案例：判断闰年</p>
<p>接收用户输入的年份，如果是闰年就弹出闰年，否则弹出是平年</p>
<p><strong>算法</strong> ：能被4整除且不能整除100的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入年份'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'这个年份是闰年'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'这个年份是平年'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="③if-else-if-语句🔥"><a href="#③if-else-if-语句🔥" class="headerlink" title="③if else if 语句🔥"></a>③if else if 语句🔥</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    语句<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    语句<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    语句<span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//上述条件都不成立执行此处代码</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>案例:接收用户输入的分数，根据分数输出对应的等级字母 A、B、C、D、E</p>
<p>其中：</p>
<ol>
<li><p>90分(含)以上 ，输出：A</p>
</li>
<li><p>80分(含)~ 90 分(不含)，输出：B</p>
</li>
<li><p>70分(含)~ 80 分(不含)，输出：C</p>
</li>
<li><p>60分(含)~ 70 分(不含)，输出：D</p>
</li>
<li><p>60分(不含) 以下，输出： E</p>
</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入分数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'宝贝，你是我的骄傲'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'宝贝，你已经很出色了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你要继续加油喽'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'孩子，你很危险'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'可以再努力点吗，你很棒，但还不够棒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-7-2、三元表达式🔥"><a href="#2-7-2、三元表达式🔥" class="headerlink" title="2.7.2、三元表达式🔥"></a>2.7.2、三元表达式🔥</h3><ul>
<li><p>语法结构 : 表达式1 ? 表达式2 : 表达式3</p>
</li>
<li><p>执行思路</p>
</li>
</ul>
<p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p>
<p><strong>案例：数字补0</strong></p>
<p>用户输入数字，如果数字小于10，则在前面补0，比如01，09，</p>
<p>如果数字大于10，则不需要补，比如20</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> figuer <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入0~59之间的一个数字'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> result <span class="token operator">=</span> figuer <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> figuer <span class="token punctuation">:</span> figue
        <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="2-7-3、switch🔥"><a href="#2-7-3、switch🔥" class="headerlink" title="2.7.3、switch🔥"></a>2.7.3、switch🔥</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">//表达式等于 value1 时要执行的代码</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> value2<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">//表达式等于value2 时要执行的代码</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">//表达式不等于任何一个value时要执行的代码</span>
        
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>switch ：开关 转换 ， case ：小例子 选项</li>
<li>关键字 switch 后面 <strong>括号内</strong> 可以是 <strong>表达式或值</strong> ， 通常是一个 <strong>变量</strong></li>
<li>关键字 case , 后跟一个选项的表达式或值， <strong>后面跟一个冒号</strong></li>
<li>switch 表达式的值会与结构中的 case 的值做比较</li>
<li>如果存在匹配 <strong>全等</strong> (&#x3D;&#x3D;&#x3D;) ，则与该 case 关联的代码块会被执行，并在遇到 <strong>break 时停止</strong> ，整个 switch 语句代码执行结束</li>
<li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li>
<li><strong>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句</strong></li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”</span>
        <span class="token keyword">var</span> fruit <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请您输入查询的苹果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">'苹果'</span><span class="token punctuation">:</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'苹果的价格为3.5元/千克'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">'香蕉'</span><span class="token punctuation">:</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'香蕉的价格为3元/千克'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'没有这种水果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="3、断点调试🔥"><a href="#3、断点调试🔥" class="headerlink" title="3、断点调试🔥"></a>3、断点调试🔥</h1><ol>
<li><p>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点(在行数点一下)</p>
</li>
<li><p>刷新浏览器</p>
</li>
<li><p>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用</p>
</li>
<li><p>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化</p>
</li>
</ol>
<h1 id="4、循环🔥"><a href="#4、循环🔥" class="headerlink" title="4、循环🔥"></a>4、循环🔥</h1><h2 id="4-1、for循环🔥"><a href="#4-1、for循环🔥" class="headerlink" title="4.1、for循环🔥"></a>4.1、for循环🔥</h2><p>在程序中，一组被重复执行的语句被称之为 <strong>循环体</strong> ，能否继续重复执行，取决于循环的 <strong>终止条件</strong> 。由循环体及循环的终止条件组成的语句，被称之为<br><strong>循环语句</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>操作表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//循环体</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>1.输入10句”娘子晚安哈！”</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//基本写法</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span>  <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'娘子晚安哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 用户输入次数</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入次数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> num <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'娘子晚安哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.求1-100之间所有整数的累加和</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 求1-100所以的整数和</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>3.求1-100之间所有数的平均值</strong></p>
<pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 3.求1-100之间所有数的平均值</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>4.求1-100之间所有偶数和奇数的和</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//    4.求1-100之间所有偶数和奇数的和</span>
<span class="token keyword">var</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum1 <span class="token operator">=</span> sum1 <span class="token operator">+</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        sum2 <span class="token operator">=</span> sum2 <span class="token operator">+</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'偶数和为'</span> <span class="token operator">+</span> sum1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'奇数和为'</span> <span class="token operator">+</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>5.求1-100之间所有能被3整除的数字的和</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 5.求1-100之间所有能被3整除的数字的和</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>6.要求用户输入班级人数，之后依次输入每个学生的成绩，最后打印出该班级总的成绩以及平均成绩。</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入班级总的人数:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// num 班级总的人数</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 总成绩</span>
<span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 平均成绩</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个学生的成绩'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//这里接收的是str，必须转换为数值</span>
        sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>         
<span class="token punctuation">}</span>
average <span class="token operator">=</span> sum <span class="token operator">/</span> num<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'班级总的成绩是：'</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'班级总的平均成绩是：'</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>7.一行打印5个星星</strong></p>
<p>我们采取追加字符串的方式，这样可以打印到控制台上</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        star <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'☆'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-2、双重for循环🔥"><a href="#4-2、双重for循环🔥" class="headerlink" title="4.2、双重for循环🔥"></a>4.2、双重for循环🔥</h2><p><strong>循环嵌套</strong> 是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for<br>循环语句我们称之为双重for循环。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>外循环的初始<span class="token punctuation">;</span>外循环的条件<span class="token punctuation">;</span>外形循环的操作表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>内循环的初始<span class="token punctuation">;</span>内循环的条件<span class="token punctuation">;</span>内循环的操作表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
        需执行的代码<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>内层循环可以看做外层循环的语句</li>
<li>内层循环执行的顺序也要遵循 for 循环的执行顺序</li>
<li>外层循环执行一次，内层循环要执行全部次数</li>
</ul>
<h3 id="①打印五行五列星星"><a href="#①打印五行五列星星" class="headerlink" title="①打印五行五列星星"></a>①打印五行五列星星</h3><p>核心：</p>
<ul>
<li>内层循环负责一行打印五个星星</li>
<li>外层循环负责打印五行</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        star <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'☆'</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//每次满5个星星就加一次换行</span>
    star <span class="token operator">+</span><span class="token operator">=</span><span class="token string">'\n'</span>  
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="②打印n行n列的星星"><a href="#②打印n行n列的星星" class="headerlink" title="②打印n行n列的星星"></a>②打印n行n列的星星</h3><p>要求用户输入行数和列数，之后在控制台打印出用户输入行数和列数的星星</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入行数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入列数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        star <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'☆'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    star <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="③打印倒三角形"><a href="#③打印倒三角形" class="headerlink" title="③打印倒三角形"></a>③打印倒三角形</h3><ul>
<li>一共有10行，但是每行的星星个数不一样，因此需要用到双重 for 循环</li>
<li>外层的 for 控制行数 i ，循环10次可以打印10行</li>
<li>内层的 for 控制每行的星星个数 j</li>
<li>核心算法： 每一行星星的个数： j &#x3D; i ; j &lt;&#x3D; 10; j++</li>
<li>每行打印完毕后，都需要重新换一行</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入行数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入列数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        star <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'☆'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    star <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3、while循环🔥"><a href="#4-3、while循环🔥" class="headerlink" title="4.3、while循环🔥"></a>4.3、while循环🔥</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//循环体代码</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行思路：</p>
<ul>
<li><p>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p>
</li>
<li><p>执行循环体代码</p>
</li>
<li><p>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</p>
</li>
</ul>
<p><strong>注意</strong> ：</p>
<ul>
<li><p>使用 while 循环时一定要注意，它必须要有退出条件，否则会称为死循环</p>
</li>
<li><p>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</p>
</li>
</ul>
<h3 id="①打印人的一生"><a href="#①打印人的一生" class="headerlink" title="①打印人的一生"></a>①打印人的一生</h3><p>从1岁到99岁</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    age<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'您今年'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="②计算-1-100-之间所有整数的和"><a href="#②计算-1-100-之间所有整数的和" class="headerlink" title="②计算 1 ~ 100 之间所有整数的和"></a>②计算 1 ~ 100 之间所有整数的和</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> figure <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>figure <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+</span><span class="token operator">=</span> figure<span class="token punctuation">;</span>
            figure<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1-100的整数和为'</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-4、do-while循环🔥"><a href="#4-4、do-while循环🔥" class="headerlink" title="4.4、do while循环🔥"></a>4.4、do while循环🔥</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//循环体代码-条件表达式为true的时候重复执行循环一代码</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行思路：</p>
<ol>
<li><p>先执行一次循环体代码</p>
</li>
<li><p>再执行表达式，如果结果为true，则继续执行循环体代码，如果为false，则退出循环，继续执行后面的代码</p>
</li>
<li><p>先执行再判断循环体， <strong>所以dowhile循环语句至少会执行一次循环体代码</strong></p>
</li>
</ol>
<p><strong>需求：弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> love <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'你爱我吗？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>love <span class="token operator">!=</span> <span class="token string">'我爱你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-5、continue-关键字🔥"><a href="#4-5、continue-关键字🔥" class="headerlink" title="4.5、continue 关键字🔥"></a>4.5、continue 关键字🔥</h2><p>continue 关键字用于 <strong>立即跳出本次循环，继续下一次循环</strong> （本次循环体中 continue 之后的代码就会少执行一次）。</p>
<p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个包子有虫子，扔掉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳出本次循环，跳出的是第3次循环 </span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子呢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-6、break关键字🔥"><a href="#4-6、break关键字🔥" class="headerlink" title="4.6、break关键字🔥"></a>4.6、break关键字🔥</h2><p>break 关键字用于 <strong>立即跳出整个循环</strong></p>
<p>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的也不吃了</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接退出整个for 循环，跳到整个for下面的语句</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子呢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="5、数组🔥"><a href="#5、数组🔥" class="headerlink" title="5、数组🔥"></a>5、数组🔥</h1><p>数组(Array)是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//普通变量一次只能存储一个值</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//数组一次可以存储多个值</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-1、创建数组🔥"><a href="#5-1、创建数组🔥" class="headerlink" title="5.1、创建数组🔥"></a>5.1、创建数组🔥</h2><p>JavaScript 中创建数组有两种方式：</p>
<ul>
<li>利用 new 创建数组</li>
<li>利用数组字面量创建数组</li>
</ul>
<h3 id="①利用-new-创建数组🔥"><a href="#①利用-new-创建数组🔥" class="headerlink" title="①利用 new 创建数组🔥"></a>①利用 new 创建数组🔥</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个新的空数组</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><p>这种方式暂且了解，等学完对象再看</p>
</li>
<li><p>注意 <code>Array()</code>，A要大写</p>
</li>
</ul>
<h3 id="②利用数组字面量创建数组🔥"><a href="#②利用数组字面量创建数组🔥" class="headerlink" title="②利用数组字面量创建数组🔥"></a>②利用数组字面量创建数组🔥</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.利用数组字面量方式创建空的数组 </span>
<span class="token keyword">var</span> 数组名 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2.使用数组字面量方式创建带初始值的数组</span>
<span class="token keyword">var</span> 数组名 <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token string">'小黄'</span><span class="token punctuation">,</span><span class="token string">'瑞奇'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3.数组中可以存放任意类型的数据，例如字符串，数字，布尔值等</span>
<span class="token keyword">var</span> arrStus <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'小白'</span>，<span class="token number">12</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">28.9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>数组的字面量是方括号 <code>[]</code></li>
<li>声明数组并赋值称为数组的初始化</li>
<li>这种字面量方式也是我们以后最多使用的方式</li>
</ul>
<h2 id="5-2、数组的索引（下标）🔥"><a href="#5-2、数组的索引（下标）🔥" class="headerlink" title="5.2、数组的索引（下标）🔥"></a>5.2、数组的索引（下标）🔥</h2><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义数组</span>
<span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取数组中的第2个元素</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-3、遍历数组🔥"><a href="#5-3、遍历数组🔥" class="headerlink" title="5.3、遍历数组🔥"></a>5.3、遍历数组🔥</h2><p>我们可以通过 for 循环索引遍历数组中的每一项</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 数组索引访问数组中的元素</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// red</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// green</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// blue</span>

<span class="token comment" spellcheck="true">// for循环遍历数组</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-4、数组的长度🔥"><a href="#5-4、数组的长度🔥" class="headerlink" title="5.4、数组的长度🔥"></a>5.4、数组的长度🔥</h2><p>使用“数组名.length”可以访问数组元素的数量（数组长度）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>注意</strong> ：</p>
<ul>
<li><p>此处数组的长度是 <strong>数组元素的个数</strong> ，不要和 <strong>数组的索引号</strong> 混淆</p>
</li>
<li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p>
</li>
</ul>
<h2 id="5-5、案例"><a href="#5-5、案例" class="headerlink" title="5.5、案例"></a>5.5、案例</h2><p><strong>1.请将 [“关羽”,“张飞”,“马超”,“赵云”,“黄忠”,“刘备”,“姜维”]; 数组里的元素依次打印到控制台</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"关羽"</span><span class="token punctuation">,</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token string">"马超"</span><span class="token punctuation">,</span><span class="token string">"赵云"</span><span class="token punctuation">,</span><span class="token string">"黄忠"</span><span class="token punctuation">,</span><span class="token string">"刘备"</span><span class="token punctuation">,</span><span class="token string">"姜维"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment" spellcheck="true">// 遍历  从第一个到最后一个</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.求数组 [2,6,1,7, 4] 里面所有元素的和以及平均值</strong></p>
<ul>
<li>①声明一个求和变量 sum。</li>
<li>①遍历这个数组，把里面每个数组元素加到 sum 里面。</li>
<li>①用求和变量 sum 除以数组的长度就可以得到数组的平均值。</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
average <span class="token operator">=</span> sum <span class="token operator">/</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时i为5</span>
<span class="token comment" spellcheck="true">//      average = sum / arr.length;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'和为'</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'平均值为'</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>3.求数组[2,6,1,77,52,25,7]中的最大值</strong></p>
<ul>
<li>①声明一个保存最大元素的变量 max。</li>
<li>②默认最大值可以取数组中的第一个元素。</li>
<li>③遍历这个数组，把里面每个数组元素和 max 相比较。</li>
<li>④如果这个数组元素大于max 就把这个数组元素存到 max 里面，否则继续下一轮比较。</li>
<li>⑤最后输出这个 max。</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> temp<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                temp <span class="token operator">=</span> max<span class="token punctuation">;</span>
                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最大值为'</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>方法二：
</code></pre>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> maxNum <span class="token operator">=</span> arrNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用来保存最大元素,默认最大值是数组中的第一个元素</span>
<span class="token comment" spellcheck="true">// 从0 开始循环数组里的每个元素</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> arrNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 如果数组里当前循环的元素大于 maxNum，则保存这个元素和下标</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
        maxNum <span class="token operator">=</span> arrNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存数值到变量 maxNum</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>4.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 里面的元素转换为字符串</strong></p>
<p>思路：就是把里面的元素相加就好了，但是注意保证是字符相加</p>
<ul>
<li>①需要一个新变量 str 用于存放转换完的字符串。</li>
<li>②遍历原来的数组，分别把里面数据取出来，加到字符串变量 str 里面。</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    str <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// redgreenbluepink</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>5.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 转换为字符串，并且用 | 或其他符号分割</strong></p>
<ul>
<li>①需要一个新变量用于存放转换完的字符串 str。</li>
<li>①遍历原来的数组，分别把里面数据取出来，加到字符串里面。</li>
<li>①同时在后面多加一个分隔符。</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> separator <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    str <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> separator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// red|green|blue|pink</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-6、数组中新增元素🔥"><a href="#5-6、数组中新增元素🔥" class="headerlink" title="5.6、数组中新增元素🔥"></a>5.6、数组中新增元素🔥</h2><h3 id="①通过修改-length-长度新增数组元素"><a href="#①通过修改-length-长度新增数组元素" class="headerlink" title="①通过修改 length 长度新增数组元素"></a>①通过修改 length 长度新增数组元素</h3><ul>
<li><p>可以通过修改 length 长度来实现数组扩容的目的</p>
</li>
<li><p>length 属性是可读写的</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 <strong>undefined</strong></p>
<h3 id="②通过修改数组索引新增数组元素"><a href="#②通过修改数组索引新增数组元素" class="headerlink" title="②通过修改数组索引新增数组元素"></a>②通过修改数组索引新增数组元素</h3><ul>
<li><p>可以通过修改数组索引的方式追加数组元素</p>
</li>
<li><p>不能直接给数组名赋值，否则会覆盖掉以前的数据</p>
</li>
<li><p>这种方式也是我们最常用的一种方式</p>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hotpink'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="5-7、数组中新增元素"><a href="#5-7、数组中新增元素" class="headerlink" title="5.7、数组中新增元素"></a>5.7、数组中新增元素</h2><p><strong>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</strong></p>
<ul>
<li>①使用循环来追加数组。</li>
<li>②声明一个空数组 arr。</li>
<li>③循环中的计数器 i 可以作为数组元素存入。</li>
<li>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>2.将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组</strong></p>
<ul>
<li>①声明一个新的数组用于存放新数据。</li>
<li>②遍历原来的数组，找出大于等于 10 的元素。</li>
<li>③依次追加给新数组 newArr。</li>
</ul>
<p>实现代码1：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 定义一个变量 用来计算 新数组的索引号</span>
<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 给新数组</span>
        newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 索引号 不断自加</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实现代码2：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 给新数组</span>
        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-8、删除指定数组元素🔥"><a href="#5-8、删除指定数组元素🔥" class="headerlink" title="5.8、删除指定数组元素🔥"></a>5.8、删除指定数组元素🔥</h2><p><strong>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-9、翻转数组🔥"><a href="#5-9、翻转数组🔥" class="headerlink" title="5.9、翻转数组🔥"></a>5.9、翻转数组🔥</h2><p><strong>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 把旧数组索引号的第4个取过来(arr.length - 1),给新数组索引号第0个元素(newArr.length)</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'purple'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-10、数组排序🔥"><a href="#5-10、数组排序🔥" class="headerlink" title="5.10、数组排序🔥"></a>5.10、数组排序🔥</h2><p>冒泡排序</p>
<p>将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外层循环管趟数，5个数共交换4躺</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//里层循环管每一趟交换的次数</span>
        <span class="token comment" spellcheck="true">//前一个和后面一个数组元素相比较</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS技巧——跨元素控制</title>
    <url>/2023/03/28/CSS%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E8%B7%A8%E5%85%83%E7%B4%A0%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<ul>
<li>当我们希望悬浮 x 元素时，y 元素的样式可以随之改变（x和y没有必然关系），而 x 样式可以不发生变化也可以发生变化</li>
<li>使用 var(–x) 可以将属性的值以变量的形式进行传递，达到联合控制的样式的目的<span id="more"></span></li>
<li>以 Hexo 博客样式优化过程中的实例介绍该方法</li>
<li>最初悬浮右边的字部分，左边的小黑点不会发生变化<br><img src="/2023/03/28/CSS%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E8%B7%A8%E5%85%83%E7%B4%A0%E6%8E%A7%E5%88%B6/%E5%8E%9F%E6%9D%A5.png" alt="原样式"></li>
</ul>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.archive-article-date</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">4.0</span>rem<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">.5</span>rem<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--archive-article-date-shadow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span> ease<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.archive-article-inner</span> </span><span class="token punctuation">{</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>
    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token hexcode">#cfe9b0</span><span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s ease<span class="token punctuation">;</span>
    <span class="token property">--archive-article-date-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token hexcode">#cfe9b0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.archive-article-inner</span><span class="token pseudo-class">:hover</span>,<span class="token class">.archive-article-data</span><span class="token pseudo-class">:hover</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">3</span>px <span class="token hexcode">#cfe9b0</span><span class="token punctuation">;</span>
    <span class="token property">--archive-article-date-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">5</span>px <span class="token hexcode">#cfe9b0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>我们定义了 <code>--archive-article-date-shadow</code> 变量作为样式 <code>box-shadow</code> 的值，定义在被动发生变化的元素 <code>.archive-article-date</code>，当主控元素 <code>.archive-article-inner</code> 悬浮事件产生时，我们将该变量更改为 <code>0 0 5px 5px #cfe9b0</code> 产生光晕，未悬浮则 <code>0 0 0 0 #cfe9b0</code> 相当于没有光晕</li>
<li>结果如下：<br><img src="/2023/03/28/CSS%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E8%B7%A8%E5%85%83%E7%B4%A0%E6%8E%A7%E5%88%B6/%E7%BB%93%E6%9E%9C.png" alt="结果"></li>
<li>看到悬浮右边时，左边的点产生光晕，成功。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-asset-image图片路径错误</title>
    <url>/2023/03/26/hexo-asset-image%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<ul>
<li>安装 hexo-asset-image 插件出现如下错误，这个是网图，问题是一致的我就截下来，出现的情况就是博客对应的图片按理说是根据 <strong>年&#x2F;月&#x2F;日&#x2F;文章名&#x2F;图片名</strong> 索引的，但是实际上却是出现了部分重复<span id="more"></span>，还有一种错误是路径缺少一步，总而言之是插件的代码编写有问题<br><img src="/2023/03/26/hexo-asset-image%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF/%E9%97%AE%E9%A2%98.png" alt="问题"></li>
<li>这是该插件生成静态页面时，图片索引字符串生成出了问题</li>
<li>解决方法如下：</li>
</ul>
<ol>
<li>进入博客文件夹根目录 node_modules&#x2F;hexo-asset-image&#x2F;index.js 文件，</li>
<li>把整个文件替换成以下内容：</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span>
<span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>
        <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>
                    <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                        <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>
                        <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>
                        <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
                            srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        console<span class="token punctuation">.</span>info <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span>info <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span>info <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>完成就能正常生成图片了</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫——b站分区分类标题+词云图</title>
    <url>/2023/03/25/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%88%86%E5%8C%BA%E5%88%86%E7%B1%BB%E6%A0%87%E9%A2%98-%E8%AF%8D%E4%BA%91%E5%9B%BE/</url>
    <content><![CDATA[<p>通过 Python requests 库向ｂ站的 API 请求获取某分区分类下的 n 页视频，取标题生成词云。这种获取方式不需要获取 html 页面，不需要 bs 库。请求的结果直接就是 json 格式，方便操作<span id="more"></span></p>
<h5 id="获取分区url"><a href="#获取分区url" class="headerlink" title="获取分区url"></a>获取分区url</h5><ul>
<li>以游戏区单机游戏为例：<br><img src="/2023/03/25/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%88%86%E5%8C%BA%E5%88%86%E7%B1%BB%E6%A0%87%E9%A2%98-%E8%AF%8D%E4%BA%91%E5%9B%BE/%E5%8D%95%E6%9C%BA%E6%B8%B8%E6%88%8F%E5%88%86%E7%B1%BB.png" alt="单机游戏分类"></li>
<li>进入单机游戏分类，F12 或右键检查，进入调速界面如上，点击网络（Network），下面就是一堆请求，在其中找到 newlist 字样，点击请求，右边的<strong>标头（header）</strong>下面的 url 即为我们需要爬取的请求。</li>
<li>会发现每次点击不同分类都会有一个这样的请求，对比发现只有 <strong>rid</strong> 是不一样的，这代表不同分类的 rid 值不相同。想要爬取任意区的分类只要像这样获取其 rid 即可。<strong>ps</strong> 是指每次请求会给你的视频条数，这里一次请求就有 30 个视频给到你。<strong>pn</strong> 是当前请求的页数，如果想要获取多页只要更改这个值即可。<strong>type</strong> 按理说应该是推送的类型，可能0是视频，1是文章可能，但是这里不纠结这个。</li>
</ul>
<h5 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json
<span class="token keyword">import</span> time

<span class="token comment" spellcheck="true"># 设置请求头，模拟浏览器请求</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true"># 游戏区单机游戏分类</span>
url <span class="token operator">=</span> <span class="token string">'https://api.bilibili.com/x/web-interface/newlist?rid=17&amp;type=1&amp;ps=30&amp;pn={}'</span>
<span class="token comment" spellcheck="true"># 存储视频标题和链接的列表</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># 爬取前n页的视频信息</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 构造完整的API接口url</span>
    api_url <span class="token operator">=</span> url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 发送请求，获取json数据</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 获取视频列表</span>
    video_list <span class="token operator">=</span> json_data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'archives'</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 遍历视频列表，提取标题和链接，并存储到data列表中</span>
    <span class="token keyword">for</span> video <span class="token keyword">in</span> video_list<span class="token punctuation">:</span>
        title <span class="token operator">=</span> video<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
        link <span class="token operator">=</span> <span class="token string">'https://www.bilibili.com/video/'</span> <span class="token operator">+</span> video<span class="token punctuation">[</span><span class="token string">'bvid'</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># data.append({'title': title, 'link': link})</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"---------------{i}----------------"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 将列表写入json文件</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>response直接获取了json数据，进行解析获取标题和链接（这个用不到），具体探索步骤就是打印json_data观察其数据结构逐步获取即可。</li>
<li>url 的 pn 处以 format 格式输入页码，可以获取多页数据</li>
<li>我们爬取50页，在控制台输出，并进行分割以方便看页码。<br><img src="/2023/03/25/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%88%86%E5%8C%BA%E5%88%86%E7%B1%BB%E6%A0%87%E9%A2%98-%E8%AF%8D%E4%BA%91%E5%9B%BE/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.png" alt="控制台输出"></li>
<li>在同级文件夹也获得了 data.json</li>
</ul>
<h5 id="词云生成"><a href="#词云生成" class="headerlink" title="词云生成"></a>词云生成</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""
功能:根据stopwords_cn.txt的过滤对data.json产生词云
"""</span>
<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter
<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud
<span class="token keyword">import</span> itertools
<span class="token keyword">import</span> jieba
<span class="token keyword">import</span> jieba<span class="token punctuation">.</span>posseg
<span class="token keyword">import</span> json
stopwords <span class="token operator">=</span> set<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">"stopwords_cn.txt"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Enable the deep learning based model for word cutting.</span>
jieba<span class="token punctuation">.</span>enable_paddle<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Load scrawled data</span>
data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>open<span class="token punctuation">(</span>r<span class="token string">"data.json"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Extract all words</span>
words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> title <span class="token keyword">in</span> data <span class="token keyword">for</span> word<span class="token punctuation">,</span> _ <span class="token keyword">in</span> jieba<span class="token punctuation">.</span>posseg<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># Filter out stop words</span>
words <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">not</span> <span class="token keyword">in</span> stopwords<span class="token punctuation">,</span> words<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Filter out words with length &lt;= 1</span>
words <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Filter out empty strings</span>
words <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Select top 100 words based on their occurrence</span>
counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>list<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>
most_common_words <span class="token operator">=</span> counter<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>most_common_words<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Set font path for displaying Chinese characters</span>
font_path <span class="token operator">=</span> r<span class="token string">'C:\Windows\Fonts\simhei.ttf'</span>
wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>
    width<span class="token operator">=</span><span class="token number">1920</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">1080</span><span class="token punctuation">,</span> font_path<span class="token operator">=</span>font_path
<span class="token punctuation">)</span><span class="token punctuation">.</span>generate_from_frequencies<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>most_common_words<span class="token punctuation">)</span><span class="token punctuation">)</span>
im <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>to_image<span class="token punctuation">(</span><span class="token punctuation">)</span>
im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"word-cloud.png"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用 jieba 库和 WordCloud 类，根据 json 文件生成词云，无脑用就完事，其中 stopwords_cn.txt 是屏蔽词，有些符号和词缀经常出现在标题但是本身意义不大，所有要通过排除进行结果的优化 ‘C:\Windows\Fonts\simhei.ttf’ 是你的字体存放路径，必须选择支持中文的字体否则无法生成中文。</li>
<li>最后结果保存在 png 文件，可以直观反映当前分类的热门内容<br><img src="/2023/03/25/Python%E7%88%AC%E8%99%AB%E2%80%94%E2%80%94%E5%88%86%E5%8C%BA%E5%88%86%E7%B1%BB%E6%A0%87%E9%A2%98-%E8%AF%8D%E4%BA%91%E5%9B%BE/%E8%AF%8D%E4%BA%91.png" alt="词云"><blockquote>
<p>这个地方可以下载到 <strong>stopwords_cn.txt</strong>：<br><a href="https://github.com/rossning92/web-scraping">https://github.com/rossning92/web-scraping</a><br>可以根据分区特点完善</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>API</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>异步操作：async和await</title>
    <url>/2023/03/24/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%EF%BC%9Aasync%E5%92%8Cawait/</url>
    <content><![CDATA[<h5 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h5><ul>
<li>async与await是关于Promise的语法糖，是比较新的异步操作的关键字，可以使得异步操作的代码接近常用的同步操作的代码<span id="more"></span></li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以用下面这个 async 声明的 fn2 代替 fn 函数，两者返回值完全一样，都是Promise对象</li>
<li>async 声明的函数内部可以用 await 调用其他异步函数</li>
<li>我们可以在调用异步函数时在其前面加上 await 关键字，await会等待 fn2 执行完毕并获取返回值，res1 得到的是 Promise 对象，res2 在 await 的作用下直接获取 fn2 返回值 10</li>
<li>但是这样使用 await 会<strong>导致阻塞代码</strong>，后面如果还有语句将不能立刻执行，反而使得异步没有意义，我们通常在 async 声明的函数中使用 await，这样会使得 await 仅仅阻塞该函数内部在 await 后面的部分，对函数外没有影响</li>
<li>使用 await 之后，其对应的 catch 函数没法调用，所以我们之间使用 try-catch 结构达到同样效果，通过后面这个例子解释</li>
</ul>
<h5 id="常规实例"><a href="#常规实例" class="headerlink" title="常规实例"></a>常规实例</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//主函数</span>
  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//代表fn2执行期间也会执行的任何事</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//块1，成功完成fn3之后的代码</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//块2，fn3失败之后的代码</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>fn3 是个异步函数，只有 await 之后块2才会被 await 阻塞，fn2 外的 doSomething 就不会，这就实现了异步的价值。同时也保证了异步返回失败也能被发现</li>
</ul>
<h5 id="异步的深入理解"><a href="#异步的深入理解" class="headerlink" title="异步的深入理解"></a>异步的深入理解</h5><p>假设有一个异步函数 <code>getData()</code>，它会向服务器请求数据，然后返回结果。代码如下：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://example.com/data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>　　在 <code>main()</code> 函数中，首先会执行 <code>console.log(1)</code>，然后调用异步函数 <code>getData()</code>。由于 <code>getData()</code> 是异步函数，它会立即返回一个 Promise 对象，并且异步执行其中的操作。在异步操作完成之前，<code>await</code> 会暂停执行，并将控制权交回给调用者。因此，<code>console.log(2)</code> 不会立即执行，而是等待异步操作完成之后才会执行。<br>当异步操作完成并返回结果时，<code>await</code> 才会继续执行后面的代码。在这个例子中，异步操作是向服务器请求数据，等待服务器返回数据。当数据返回并解析完成之后，<code>await</code> 会继续执行后面的代码，即 <code>console.log(data)</code> 和 <code>console.log(2)</code>。<br>如果 <code>console.log(data)</code> 和 <code>console.log(2)</code> 不需要使用异步操作的结果，它们可以在异步操作执行的同时执行，如下所示：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>　　在这个例子中，<code>console.log(2)</code> 在调用异步函数之后立即执行，不需要等待异步操作完成。当异步操作完成并返回结果时，<code>await</code> 才会继续执行后面的代码，即 <code>console.log(data)</code>。<br>　　在例子中，<code>getData()</code> 是一个异步函数，当执行 <code>const promise = getData()</code> 时，<code>getData()</code> 函数会被调用，但是不会立即执行异步操作，而是立即返回一个 Promise 对象，然后继续执行后面的代码。当执行 <code>await promise</code> 语句时，<code>promise</code> 对象的状态可能是 pending，也可能是 fulfilled 或 rejected。如果 <code>promise</code> 对象的状态是 pending，那么 <code>await</code> 会暂停后面的代码执行，等待 <code>promise</code> 对象的状态变为 fulfilled 或 rejected，然后返回 <code>promise</code> 对象的值或抛出 <code>promise</code> 对象的错误。如果 <code>promise</code> 对象的状态已经是 fulfilled 或 rejected，那么 <code>await</code> 会立即返回 <code>promise</code> 对象的值或抛出 <code>promise</code> 对象的错误。<br>因此，<code>getData()</code> 的异步操作可能会在 <code>const promise = getData()</code> 和 <code>await promise</code> 之间的任何时间点开始执行，这取决于异步操作的实现方式和执行时间。当 <code>await promise</code> 暂停后面的代码执行时，异步操作可能已经完成，也可能还在进行中。如果异步操作已经完成，<code>await</code> 会立即返回异步操作的结果；如果异步操作还在进行中，<code>await</code> 会暂停后面的代码执行，等待异步操作完成。</p>
<ul>
<li>也就是当调用一个异步函数之后（调用的语句没有用 await），这行代码会直接结束返回一个结果（函数本身可能开始执行，也可能还没有），在函数外面此时代码也会<strong>继续往下走</strong>，函数外当遇到 await 所在的代码中有需要异步函数返回值时，函数外的代码就不会继续往下走了，直到异步函数执行完，await 及其之后的代码才会继续执行。await 就相当于信号灯，当异步函数<strong>出现过</strong>且遇到需要异步函数结果的语句时它变成红灯，异步函数外部代码暂停。</li>
</ul>
<h5 id="无意义的用法"><a href="#无意义的用法" class="headerlink" title="无意义的用法"></a>无意义的用法</h5><p>　　假设 <code>getData()</code> 是一个异步函数，有时候直接使用 <code>await getData()</code> 没有太大意义。因为异步函数被调用时会立即返回一个 Promise 对象，而 <code>await</code> 关键字会暂停后面的代码执行，等待 Promise 对象的状态变为 resolved 或 rejected，然后返回 Promise 对象的值或抛出 Promise 对象的错误。因此，如果在 <code>await getData()</code> 前面没有其他的同步代码需要执行，直接使用 <code>getData()</code> 也可以得到相同的结果。<br>例如，下面的代码中，两种写法都是等效的：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个例子中，<code>getData()</code> 是一个异步函数，返回一个 Promise 对象。在第一个写法中，直接使用 <code>await getData()</code> 等待 Promise 对象的状态变为 resolved，然后返回 Promise 对象的值。在第二个写法中，先将 <code>getData()</code> 的返回值赋给一个变量 <code>promise</code>，然后再使用 <code>await promise</code> 等待 Promise 对象的状态变为 resolved，这样也可以得到相同的结果。</p>
<h5 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h5><ul>
<li>再以实际应用（微信小程序）举例，我们方便演示穿插 console.log 函数表示代码执行顺序：</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript">onLoad<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
  wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化云托管环境</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取云端用户授权码数据，保证获取成功再执行后面代码</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//获取用户数据</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//从云托管获取数据</span>
      config<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        env<span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      path<span class="token punctuation">:</span> <span class="token string">'/get'</span><span class="token punctuation">,</span> 
      method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
      header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'X-WX-SERVICE'</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//异步成功结束，返回字符串作为返回值</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      fail<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//异步失败并结束，返回字符串作为返回值</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在上述例子中，Get是一个异步执行的函数，使用原生的 Promise 结构，因为它以 Promise 形式返回，并且带有 resolve 和 reject 函数。我们在里面进行云托管获取数据，是一个需要耗时的操作，最终控制台输出顺序是1、2、3、4、success、5。也就是先正常执行异步函数 Get 之前的代码，然后 Get 被调用之后立刻开始执行，同时外部的代码也会继续执行，所以外面的3紧接着就输出了，之后外面遇到 await 关键字用到 Get 的返回值 res 停止执行，由于异步函数内获取数据花费了一段时间，4会比3更迟输出。最后 Get 执行完，res 得以打印，5才能跟着打印出来。</li>
</ul>
<h5 id="Promise结果的使用"><a href="#Promise结果的使用" class="headerlink" title="Promise结果的使用"></a>Promise结果的使用</h5><p>Promise 对象有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。可以通过 <code>then()</code> 方法或 <code>catch()</code> 方法来查询 Promise 对象的状态。<br>当 Promise 对象的状态变为 fulfilled 时，<code>then()</code> 方法会被调用，可以在 <code>then()</code> 方法中获取 Promise 对象的值。例如：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：Hello, world!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当 Promise 对象的状态变为 rejected 时，<code>catch()</code> 方法会被调用，可以在 <code>catch()</code> 方法中获取 Promise 对象的错误。例如：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Something went wrong!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：Error: Something went wrong!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用 <code>finally()</code> 方法来注册一个回调函数，该回调函数在 Promise 对象的状态变为 fulfilled 或 rejected 时都会被调用。例如：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：Hello, world!</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise completed!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，<code>then()</code> 方法、<code>catch()</code> 方法和 <code>finally()</code> 方法返回的都是 Promise 对象，可以通过链式调用来处理 Promise 对象的状态。</p>
<ul>
<li>在 Promise 对象的 <code>then()</code> 方法之前添加的代码会和异步函数并发执行，不会被阻塞。当 Promise 对象的状态变为 fulfilled 时，<code>then()</code> 方法会被调用，但是在 <code>then()</code> 方法之前添加的代码还会继续执行，不会停止或阻塞。例如：</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：Hello, world!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'End'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个例子中，<code>Start</code> 和 <code>Promise created</code> 会被立即输出，然后异步操作会开始执行，但是在异步操作执行期间，**<code>End</code> 也会被立即输出**。当异步操作完成后，<code>then()</code> 方法会被调用，输出异步操作的结果。因此，在 <code>promise.then()</code> 之前的代码和 <code>promise.then()</code> 之后的代码是并发执行的，不会相互阻塞。只有 await 才能阻止后面的代码执行</p>
<h5 id="多个异步函数调用"><a href="#多个异步函数调用" class="headerlink" title="多个异步函数调用"></a>多个异步函数调用</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://.../post/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://.../post/2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上我们调用两个异步函数（fetch是经典的异步函数），用 await 将使得他们并不能并发进行，这不是我们想要的，可以改成如下：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> PromiseA <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://.../post/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> PromiseB <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://.../post/2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promiseA<span class="token punctuation">,</span> promiseB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>我们将两个 fetch 异步进行，两者的 Promise 对象合并在数组中，然后通过 await 同时进入等待，这将使效率翻倍</li>
<li>更进一步我们如果需要循环进行异步操作，希望所有异步操作都能真正地并发执行，可以使用炫酷的 for await：</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token function">AsyncFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AsyncFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AsyncFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span><span class="token punctuation">(</span><span class="token keyword">let</span> result <span class="token keyword">of</span> promises<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>注意js中不能再异步函数中使用 <code>forEach</code>，因为它会立即返回结果，应当用传统的 for 语句或者上述方法</li>
</ul>
<h5 id="异步与多线程"><a href="#异步与多线程" class="headerlink" title="异步与多线程"></a>异步与多线程</h5><p>js是一个单线程语言，那么对于有多线程能力的语言，异步编程和多线程都是处理并发任务的常见方式。它们各自有优缺点，下面是一些常见的优缺点：</p>
<ul>
<li>异步编程的优点：</li>
</ul>
<ol>
<li>资源消耗低。异步任务通常不需要创建新的线程或进程，可以复用现有的线程或进程，从而减少资源的消耗。</li>
<li>响应速度快。异步任务通常可以在后台执行，不会阻塞主线程或用户界面，从而提高响应速度和用户体验。</li>
<li>代码简洁。异步编程通常使用回调函数、Promise、async&#x2F;await等简洁的语法糖，可以让代码更易读、易写和易于维护。</li>
</ol>
<ul>
<li>异步编程的缺点：</li>
</ul>
<ol>
<li>调试困难。异步代码难以调试，特别是在多级回调和嵌套的情况下，会让调试变得更加复杂和困难。</li>
<li>可读性差。异步代码通常需要处理回调地狱、Promise链等复杂的嵌套结构，从而降低了代码的可读性和可维护性。</li>
<li>错误处理复杂。异步代码容易出现错误和异常，需要处理回调函数或Promise的错误处理函数，从而增加了代码复杂性和错误率。</li>
</ol>
<ul>
<li>多线程的优点：</li>
</ul>
<ol>
<li>并行处理。多线程可以同时处理多个任务，提高了并行处理的能力和效率。</li>
<li>资源隔离。每个线程都有独立的内存空间和资源，可以避免不同线程之间的竞争和冲突。</li>
<li>稳定性高。多线程可以提高系统的稳定性和可用性，即使其中一个线程出现问题，也不会影响整个系统的运行。</li>
</ol>
<ul>
<li>多线程的缺点：</li>
</ul>
<ol>
<li>资源消耗高。多线程需要创建新的线程或进程，需要消耗更多的内存和CPU资源，从而增加了系统的负载和成本。</li>
<li>竞争问题。多线程容易出现资源竞争和死锁等问题，需要进行复杂的同步和协调操作，从而增加了代码的复杂性和错误率。</li>
<li>调试困难。多线程代码难以调试，特别是在多个线程之间交互和通信的情况下，会让调试变得更加复杂和困难。<br>综上所述，异步编程和多线程都有各自的优缺点，需要根据具体的应用场景和需求来选择适合的方式。在某些情况下，异步编程可以比多线程更加高效和简洁，而在其他情况下，多线程可能更适合处理复杂和密集的计算任务。</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫入门——b站视频数据</title>
    <url>/2023/03/22/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94b%E7%AB%99%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>通过 Python requests 和 beautiful soup 库实现爬取b站科技区首页视频的数据<span id="more"></span></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token punctuation">,</span> time
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup      <span class="token comment" spellcheck="true"># beautiful soup 模块用来解析爬取的html内容</span>

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.44'</span>
<span class="token punctuation">}</span>
response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">"https://www.bilibili.com/v/tech/"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>首先，导入库，headers写好用于伪装浏览器访问，requests请求获取页面信息，用BS（BeautifulSoup）的 html.parser 解析页面数据<br><img src="/2023/03/22/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94b%E7%AB%99%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/%E5%85%83%E7%B4%A0%E6%90%9C%E7%B4%A2.png" alt="元素搜索"></li>
<li>如上图善用元素搜索，右击网页点击检查进入如上界面，点击1处的按钮可以按照元素查找，点击标题文字，右边的 html 就自动跳到对应位置，我们发现标题都是以h3为包裹的，class 类别是 bili-video-card__info–tit，于是用 findAll 方法进行查找：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">allmovie <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"bili-video-card__info--tit"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>我们遍历 allmovie 对于每一个 movie（视频）我们查找 a 元素，发现 video 是一个列表，仅一个元素：<br><img src="/2023/03/22/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94b%E7%AB%99%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/video%E5%8F%98%E9%87%8F.png" alt="video变量"></li>
<li>所以直接用索引 0 获得 html文本，通过 .string 获取文本，即标题，通过 .get(‘href’) 获取 a 元素的属性（尖括号内部的变量），这部分代码如下：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> movie <span class="token keyword">in</span> allmovie<span class="token punctuation">:</span>
    video <span class="token operator">=</span> movie<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"_blank"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> video<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string       <span class="token comment" spellcheck="true"># 获得标题</span>
    href <span class="token operator">=</span> video<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 获得链接</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>于是我们获取 href 链接，就可以进入每个视频的界面，再次通过 requests 请求页面：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">"https:{href}"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    sp <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>再次使用元素搜索获得数据：<br><img src="/2023/03/22/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94b%E7%AB%99%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/%E5%85%83%E7%B4%A0%E6%90%9C%E7%B4%A22.png" alt="元素搜索2"></li>
<li>发现数据在 span 元素，class 是 info-text，那就 findAll 获取它：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    datas <span class="token operator">=</span> sp<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"info-text"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 视频数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>打印 datas 结果如下（仅一个视频）：<br><img src="/2023/03/22/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94b%E7%AB%99%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/datas%E5%8F%98%E9%87%8F.png" alt="datas变量"></li>
<li>这是个列表，依次有点赞、投币、收藏、转发四个数据，接下来就很简单，依次获取即可：</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">    like <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string       <span class="token comment" spellcheck="true"># 点赞</span>
    coin <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string       <span class="token comment" spellcheck="true"># 投币</span>
    collect <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># 收藏</span>
    transmit <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string   <span class="token comment" spellcheck="true"># 转发</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"视频：{title}  点赞：{like}  投币：{coin}  收藏：{collect}  转发：{transmit}  链接：https:{href}"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>按格式打印出结果，设置好请求间隔，不用太频繁，数据就慢慢地打印出来了：<br><img src="/2023/03/22/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94b%E7%AB%99%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE/%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
</li>
<li><p>完整代码</p>
</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token punctuation">,</span> time
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup        <span class="token comment" spellcheck="true"># beautiful soup 模块用来解析爬取的html内容</span>

headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.44'</span>
<span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">"https://www.bilibili.com/v/tech/"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
allmovie <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"bili-video-card__info--tit"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> movie <span class="token keyword">in</span> allmovie<span class="token punctuation">:</span>
    video <span class="token operator">=</span> movie<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"_blank"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> video<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string       <span class="token comment" spellcheck="true"># 获得标题</span>
    href <span class="token operator">=</span> video<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 获得链接</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">"https:{href}"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    sp <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
    datas <span class="token operator">=</span> sp<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"info-text"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 视频数据</span>
    like <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string       <span class="token comment" spellcheck="true"># 点赞</span>
    coin <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string       <span class="token comment" spellcheck="true"># 投币</span>
    collect <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># 收藏</span>
    transmit <span class="token operator">=</span> datas<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string   <span class="token comment" spellcheck="true"># 转发</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"视频：{title}  点赞：{like}  投币：{coin}  收藏：{collect}  转发：{transmit}  链接：https:{href}"</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Html</tag>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python restful API入门及本地调试</title>
    <url>/2023/03/19/Python-restful-API%E5%85%A5%E9%97%A8%E5%8F%8A%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>Python能够轻松实现搭建restful API，本次使用flask模块框架，使用Apipost工具进行调试，我在一个项目中学会如何实现这些，本次也以此为例进行记录。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>Python RESTful的优点包括：</li>
</ul>
<ol>
<li>简单易用：使用Python编程语言可以轻松地创建RESTful API。<span id="more"></span></li>
<li>可扩展性：可以轻松地扩展API功能。</li>
<li>可读性：使用RESTful API可以提高代码的可读性，因为它们基于资源而不是操作。</li>
<li>灵活性：RESTful API可以使用各种HTTP方法来执行各种操作。</li>
</ol>
<ul>
<li><p>总之，Python RESTful是一种灵活、简单易用并且可扩展的方式来创建RESTful API。它基于资源而不是操作，可以提高代码的可读性，并且可以使用各种HTTP方法来执行各种操作。</p>
</li>
<li><p>四种请求方法，GET、POST、PUT和DELETE是HTTP协议中常用的四种请求方法，用于客户端与服务器之间进行数据交互。</p>
</li>
</ul>
<ol>
<li>GET：用于获取资源，请求的数据会附在URL后面作为参数，可以被缓存，不应该用于更新服务器上的数据。例如，当你在浏览器地址栏中输入一个URL时，实际上就是GET请求。</li>
<li>POST：用于向服务器提交数据，请求的数据在请求体中，不会被缓存，可以用于更新服务器上的数据，例如在网站上提交表单。</li>
<li>PUT：用于更新资源，请求的数据在请求体中，如果该资源不存在，则会创建一个新的资源，如果存在，则会被更新。</li>
<li>DELETE：用于删除资源，请求的数据在请求体中，用于删除服务器上的数据。<br>总之，GET、POST、PUT和DELETE是用于客户端与服务器之间进行数据交互的四种常用请求方法，每种方法都有特定的用途和语义。</li>
</ol>
<h1 id="Python程序"><a href="#Python程序" class="headerlink" title="Python程序"></a>Python程序</h1><ul>
<li>数据准备：数据格式如下，invitecode是授权码（邀请码），device是设备，activation是授权码状态（已激活和未激活），name是用户名</li>
</ul>
<pre><code>invitecode,device,activation,name
kkk,20121322,0,chen
zyh,121380,1,张
77kk,2022,0,刘
php,201322,0,wnag
Leo1442676170,1442676170,0,li
jiang,231214,0,xv
jia,2231214,0,niu
</code></pre>
<ul>
<li>初始化部分：建立datalist存放json数据</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> csv
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
datalist <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'invitecode'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'device'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'activation'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
path <span class="token operator">=</span> r<span class="token string">"data/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"userlist.csv"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>操作函数：写一些操作数据的方法，从上到下依次是获取数据，激活特定授权码，重置特定授权码，删除某个授权码，添加特定授权码</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">openCsv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 获取data文件夹里面的csv并打开,存入datalist</span>
    <span class="token keyword">global</span> datalist
    invitecodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    devices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    activations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 基于打开的文件，创建csv.DictReader实例</span>
        reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>file<span class="token punctuation">)</span>
        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 遍历每列</span>
            invitecodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            devices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"device"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            activations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"activation"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        data<span class="token operator">=</span><span class="token punctuation">{</span>
          <span class="token string">"invitecode"</span><span class="token punctuation">:</span>invitecodes<span class="token punctuation">,</span>
          <span class="token string">"device"</span><span class="token punctuation">:</span>devices<span class="token punctuation">,</span>
          <span class="token string">"activation"</span><span class="token punctuation">:</span>activations<span class="token punctuation">,</span>
          <span class="token string">"name"</span><span class="token punctuation">:</span>names
          <span class="token punctuation">}</span>
        datalist<span class="token punctuation">.</span>update<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">activateCode</span><span class="token punctuation">(</span>invitecode<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 激活某个授权码</span>
    in_file <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>in_file<span class="token punctuation">)</span>
    out_file <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>out_file<span class="token punctuation">)</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> invitecode<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果找到授权码，就把它的activation置1</span>
            row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
    in_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    out_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">resetCode</span><span class="token punctuation">(</span>invitecode<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 重置某个授权码</span>
    in_file <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>in_file<span class="token punctuation">)</span>
    out_file <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>out_file<span class="token punctuation">)</span>
    <span class="token keyword">if</span> invitecode <span class="token operator">==</span> <span class="token string">"LegendLeo"</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 特殊信号，代表全部置0</span>
        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"invitecode"</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 排除表头</span>
                row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>                               <span class="token comment" spellcheck="true"># 单点重置</span>
        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> invitecode<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果找到授权码，就把它的activation置0</span>
                row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
    in_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    out_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">deleteCode</span><span class="token punctuation">(</span>invitecode<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 删除某行授权码</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>
        reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 创建一个空列表，用于存储数据</span>
        rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># 遍历每一行数据</span>
        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> invitecode<span class="token punctuation">:</span>
                rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 重新写入csv文件</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>
        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个csv写入器</span>
        <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 遍历数据列表，写入到csv文件中</span>
            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 添加一行授权码，row代表插入之后在第几行（不包括表头）</span>
<span class="token keyword">def</span> <span class="token function">addCode</span><span class="token punctuation">(</span>row<span class="token operator">=</span>None<span class="token punctuation">,</span> invitecode<span class="token operator">=</span>None<span class="token punctuation">,</span> device<span class="token operator">=</span>None<span class="token punctuation">,</span> activation<span class="token operator">=</span>None<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>
        reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
        rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建一个空列表，用于存储数据</span>
        <span class="token keyword">for</span> r <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 遍历每一行数据</span>
            <span class="token comment" spellcheck="true"># 如果当前行是要插入的位置，则先插入新行，再将当前行添加到列表中</span>
            <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> reader<span class="token punctuation">.</span>line_num <span class="token operator">==</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
                rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>invitecode<span class="token punctuation">,</span> device<span class="token punctuation">,</span> activation<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">)</span>
            rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 将当前行添加到列表中</span>
        <span class="token keyword">if</span> row <span class="token keyword">is</span> None<span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 如果插入位置是最后一行，则在末尾添加新行</span>
            rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>invitecode<span class="token punctuation">,</span> device<span class="token punctuation">,</span> activation<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 创建一个csv写入器</span>
        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 遍历数据列表，写入到csv文件中</span>
        <span class="token keyword">for</span> r <span class="token keyword">in</span> rows<span class="token punctuation">:</span>
            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>服务部分：五个服务对应了五个方法，第一个是GET只有发送数据（json）格式，其他都是POST，其中 request.json 代表接收的数据，可以按关键字进行索引，返回值可以携带消息告知请求方结果等</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 获取数据</span>
<span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    openCsv<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>datalist<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/activate'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 激活授权码</span>
<span class="token keyword">def</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        goal <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 要激活的授权码</span>
        activateCode<span class="token punctuation">(</span>goal<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 将该授权码激活状态置为1</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/reset'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 重置授权码</span>
<span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        goal <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 取消激活的授权码</span>
        resetCode<span class="token punctuation">(</span>goal<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 将该授权码激活状态置为0</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/delete'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 删除授权码</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        goal <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 要删除的授权码</span>
        deleteCode<span class="token punctuation">(</span>goal<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将该授权码删除</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 添加授权码</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        row <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"row"</span><span class="token punctuation">]</span>
        invitecode <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 添加的授权码</span>
        device <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"device"</span><span class="token punctuation">]</span>
        activation <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"activation"</span><span class="token punctuation">]</span>
        name <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># 添加授权码</span>
        addCode<span class="token punctuation">(</span>row<span class="token operator">=</span>row<span class="token punctuation">,</span> invitecode<span class="token operator">=</span>invitecode<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">,</span> activation<span class="token operator">=</span>activation<span class="token punctuation">,</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>最后main函数运行api，会有如下信息，记住这个http地址，这就是 api 运行的本地地址：<br><img src="/2023/03/19/Python-restful-API%E5%85%A5%E9%97%A8%E5%8F%8A%E8%B0%83%E8%AF%95/%E8%BF%90%E8%A1%8CAPI.png" alt="运行API"></li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>在自己的IDE（Pycharm、VScode之类的）运行上述程序</li>
</ul>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><ul>
<li>浏览器搜索ApiPost进入官网直接下载无脑安装。</li>
<li>打开后点击Api调试，新建目录，命名什么的不赘述。<br><img src="/2023/03/19/Python-restful-API%E5%85%A5%E9%97%A8%E5%8F%8A%E8%B0%83%E8%AF%95/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="新建项目"> </li>
<li>在目录下新建一个接口，右边界面是主操作界面，如下，填入之前提到的http地址，然后跟着输入路径，即代码中<code>@app.route</code>后面的 &#x2F;get 之类的，这就是具体要测试的某项请求服务，这里先调 &#x2F;activate ，注意这是 POST 请求，要把地址左边的选项改成 POST。</li>
<li>然后选择 Body 栏，选择 raw 选项，按图中输入请求数据，这就是请求消息 data 中的具体 json 格式数据，invitecode 对应授权码。然后点击发送就收到了下面的响应，显示成功，这个成功也是我们在代码返回值里设置好的<br><img src="/2023/03/19/Python-restful-API%E5%85%A5%E9%97%A8%E5%8F%8A%E8%B0%83%E8%AF%95/%E6%8E%A5%E5%8F%A3%E6%93%8D%E4%BD%9C1.png" alt="接口操作"></li>
<li>测试成功，我们保存该接口即可</li>
<li>接着新建一个接口调试 get 方法，这是个 GET 请求，记得改选项，然后把路径改成 &#x2F;get ，Body不重要因为没有用到任何请求方的数据，可有可无。然后调试，得到下图结果，可以下拉得到整个数据，之前内容为 zyh 的授权码被我们激活了，所以第二个是1，也说明 activate 请求测试的成功。<br><img src="/2023/03/19/Python-restful-API%E5%85%A5%E9%97%A8%E5%8F%8A%E8%B0%83%E8%AF%95/%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png" alt="请求结果"></li>
<li>我们可以接着完成其他服务的测试。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>restful</tag>
        <tag>ApiPost</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序云托管数据传输（Python restful）</title>
    <url>/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<blockquote>
<p>研究半天，搭建起了小程序和本地 restful 工程的数据链路。restful 是通过 Python 的 flask 模块实现的，服务器是小程序官方的云托管功能，同时可以配合 git（我用的 gitee ）仓库实现自动化更新服务。本文在实现链路的同时通过数据文件进行数据传输，没有使用到 MySQL 数据库等其他功能<span id="more"></span></p>
</blockquote>
<h1 id="restful工程"><a href="#restful工程" class="headerlink" title="restful工程"></a>restful工程</h1><h2 id="·文件准备"><a href="#·文件准备" class="headerlink" title="·文件准备"></a>·文件准备</h2><ul>
<li>我的工程名是 linedetect ，在自己需要的位置新建一个文件夹作为工程（应该可以是中文名），工程结构如下：<blockquote>
<p>linedetect:<br>——Dockerfile<br>——app:<br>————-main.py<br>————-data:<br>——————-userlist.csv</p>
</blockquote>
</li>
<li><strong>Dockerfile</strong>：没有后缀，名字必须一样，云托管目前只支持有 Dock 的，里面写这两行</li>
</ul>
<pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM tiangolo/uwsgi-nginx-flask:python3.8
COPY ./app /app
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><p><strong>app</strong>文件夹里面有<strong>main.py</strong>，这是实现 restful 功能的主文件，<strong>data</strong>文件夹是我自己搞的，存放需要处理的数据（也可以不做，只不过 main 文件的文件操作路径改一改而已），里面存放数据文件，这里以 csv 为例</p>
</li>
<li><p>csv 数据准备：第一行是表头，数据由 user、device、activation 三个属性组成</p>
</li>
</ul>
<pre><code>user,device,activation
abc,121380,1
Leo,1442676170,0
jiang,231214,0
Tim,123124,0
</code></pre>
<h2 id="·Python代码"><a href="#·Python代码" class="headerlink" title="·Python代码"></a>·Python代码</h2><ul>
<li>导入如下库</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> csv
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>全局变量和方法</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
datalist <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'device'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'activation'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">openCsv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 获取data文件夹里面的csv并打开,存入datalist</span>
    <span class="token keyword">global</span> datalist
    users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    devices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    activations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">"data/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"userlist.csv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>
        reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>file<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 基于文件，创建csv.DictReader实例</span>
        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 遍历每列</span>
            users<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            devices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"device"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            activations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"activation"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"user"</span><span class="token punctuation">:</span> users<span class="token punctuation">,</span> <span class="token string">"device"</span><span class="token punctuation">:</span> devices<span class="token punctuation">,</span> <span class="token string">"activation"</span><span class="token punctuation">:</span> activations<span class="token punctuation">}</span>
        datalist<span class="token punctuation">.</span>update<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">activateCode</span><span class="token punctuation">(</span>invitecode<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 激活</span>
    in_file <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"data/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"userlist.csv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>in_file<span class="token punctuation">)</span>
    out_file<span class="token operator">=</span>open<span class="token punctuation">(</span>r<span class="token string">"data/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"userlist.csv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r+"</span><span class="token punctuation">)</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>out_file<span class="token punctuation">)</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> invitecode<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果找到名字，就把它的activation置1</span>
            row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
    in_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    out_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>上面两个本质是文件操作，第一个方法是打开 csv 并获取所有数据存入 datalist，datalist 是 json 格式，三个列表相同索引的元素对应着同一行的三个属性。第二个方法是模拟激活操作，打开 csv 文件修改激活 user 对应的 activation 值并保存。这两个方法分别用来演示小程序的 GET 和 POST 请求</li>
<li>两个服务请求、主函数</li>
</ul>
<pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 获取数据</span>
<span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    openCsv<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>datalist<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/activate'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 激活邀请码</span>
<span class="token keyword">def</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> request<span class="token punctuation">.</span>json
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        goal <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">"invitecode"</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 被激活的邀请码</span>
        activateCode<span class="token punctuation">(</span>goal<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 将该邀请码激活状态置为1</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"passed"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">)</span>
      
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span>int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PORT'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># app.run() 也可以</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第一个请求就对应第一个方法，返回的是 json 格式的 datalist，是 GET 请求。</li>
<li>第二个对应的就是第二个方法，主要进行数据修改操作，request.json 是访问者（小程序、公网）传来的数据（参数），也就是说这是个需要参数的服务请求，args[“invitecode”] 则是传来的 json 数据中叫作 invitercode 的一项。返回值调试时候可以看看。主函数运行app即可</li>
</ul>
<h1 id="云托管"><a href="#云托管" class="headerlink" title="云托管"></a>云托管</h1><blockquote>
<p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/">https://developers.weixin.qq.com/miniprogram/dev/wxcloudrun/src/</a><br>进入<strong>快速开始</strong>，选择 Python 部分就可以跟着做最简单的部署，也可以跟着下面的步骤进行</p>
</blockquote>
<h2 id="·创建服务"><a href="#·创建服务" class="headerlink" title="·创建服务"></a>·创建服务</h2><ol>
<li>新建服务，为自己的服务命名，我的命名还是linedetect<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E6%96%B0%E5%BB%BA%E6%9C%8D%E5%8A%A1.png" alt="新建服务"></li>
<li>选择代码，先按图中选择，上传工程文件夹（linedetect）点击发布<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E4%BB%A3%E7%A0%81%E9%80%89%E6%8B%A9.png" alt="代码选择"></li>
<li>等待部署，两分钟左右，然后在服务列表可以看到服务<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8.png" alt="服务列表"></li>
<li>点击服务进入如下，下面是未来更新的历代版本（这是后来的图所以已经有版本）<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E6%9C%8D%E5%8A%A1%E7%95%8C%E9%9D%A2.png" alt="服务界面"></li>
</ol>
<h2 id="·云端调试"><a href="#·云端调试" class="headerlink" title="·云端调试"></a>·云端调试</h2><p>点击云端调试<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E4%BA%91%E7%AB%AF%E8%B0%83%E8%AF%95.png" alt="云端调试"></p>
<ul>
<li>里面有三种调试，这次就做小程序的，先调试第一个请求：</li>
</ul>
<ol>
<li>选择 GET，右边这个 &#x2F;get 是<strong>路径</strong>，就是前面 python 代码里面 <code>@app.route(&#39;/get&#39;,methods=[&#39;GET&#39;])</code> 的 &#x2F;get 也就是说这个可以随便改，只要所有用到的地方都是这个路径名就行了，也可以是多级路径如 &#x2F;get&#x2F;getdata 等。</li>
<li>Header 由于我们就是 json 格式就不改</li>
<li>Body 这步用不上，因为 GET 我们没有传参</li>
<li>点击调试会得到右边这个结果，就是我们 python 文件处理得到的 csv 里面的数据</li>
</ol>
<ul>
<li>再调试第二个请求</li>
</ul>
<ol>
<li>选择 POST，右边的路径改为对应的 &#x2F;activate</li>
<li>Body代码如下，这代表传参值（json），invitecode 对应 py 代码里面的 args[“invitecode”]</li>
</ol>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"invitecode"</span><span class="token operator">:</span><span class="token string">"jiang"</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>点击调试，得到如下结果，正是我们设置的返回值<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/POST%E8%B0%83%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="POST调试结果"></li>
<li>再次调试 GET 请求，会发现得到的 jiang 对应的 activation 值变成1了。调试成功</li>
</ol>
<ul>
<li>每次调试成功后，点击<strong>复制调用代码</strong>就可以复制到代码，在小程序可以直接使用，后面会叙述，悬浮可以预览代码</li>
</ul>
<h2 id="·Gitee仓库链接"><a href="#·Gitee仓库链接" class="headerlink" title="·Gitee仓库链接"></a>·Gitee仓库链接</h2><p>这样每次都要手动发布服务很麻烦，所以可以使用<strong>流水线</strong>功能，首先创建 Gitee 仓库，方法可以网上搜，大致就是在网站上创建完，在 linedetect 文件夹内打开 Git Bash，依次输入仓库配置指令</p>
<pre class="line-numbers language-git"><code class="language-git">git config --global user.name <span class="token string">"这里填你的Gitee名字"</span>
git config --global user.email <span class="token string">"这里填你的Gitee的绑定邮箱"</span>
git init
git remote add origin <span class="token string">"这里填gitee仓库的SSH"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后就能轻松更新：</p>
<pre class="line-numbers language-git"><code class="language-git">git add .
git commit -m <span class="token string">"这里填你的更新说明，也会同步到云托管的历史版本"</span>
git push origin master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>上传完进入云托管的服务列表，点击发布，这次选择绑定 Gitee 仓库，其他一般不用调整，勾选灰度发布，点击发布。</li>
<li>接下来就和以前一样部署两分钟。完成后，此时你配置的代码仓库信息已经保存在「服务设置-流水线」中，你可以前往修改。此后每次发布时，可以直接在 Bash 里面按上面那三步直接更新，云托管这边会自动流水线部署，如下图；也可以直接选择「执行流水线」，总之不需要每次配置仓库信息。<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2.png" alt="流水线部署"><br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2.png" alt="测试页面"></li>
<li>随即进入测试界面，如上，选白名单就行了，暂时不用别的操作，点灰度上线，下一个界面把灰度流量比例调成百分百，点击结单就行了。</li>
<li><strong>回退版本</strong>可以在服务页面内点击回退，就可以选择历史版本回溯</li>
</ul>
<h1 id="微信小程序端"><a href="#微信小程序端" class="headerlink" title="微信小程序端"></a>微信小程序端</h1><p>做一个简单的demo，wxss&#x2F;wxml略过</p>
<ul>
<li>js代码如下，写在 Page 里面</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">  onLoad<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
    wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化云托管环境</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//从云托管获取数据</span>
      config<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        env<span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 微信云托管环境ID，不能为空，替换自己的</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      path<span class="token punctuation">:</span> <span class="token string">'/get'</span><span class="token punctuation">,</span> 
      method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
      header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">'X-WX-SERVICE'</span><span class="token punctuation">:</span> <span class="token string">'linedetect'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>注意我写在onLoad函数，是为了小程序加载就获取数据，wx.cloud.init 初始化是必要的，但是不用填参数</li>
<li>async 和 await 成对存在，作用可以上网查。简单来说就是完成async函数里面的await部分，才会执行后面的内容（这里就是consol.log）</li>
<li>wx.cloud.callContainer 就是访问我们的云托管服务容器，里面的参数 env 是环境ID在云托管右上角找得到<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E7%8E%AF%E5%A2%83ID.png" alt="环境ID"></li>
<li>path 就是之前提到的路径，这里 method 用 GET 请求，对应的 &#x2F;get 路径，header 里面 linedetect 就是服务名</li>
<li>这时候即可编译文件，控制台打印出来数据，GET 调用成功<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/GET%E7%BB%93%E6%9E%9C.png" alt="GET结果"></li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> res2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span><span class="token function">callContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//从云托管发送请求激活对应邀请码，使得邀请码一次性使用</span>
  config<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    env<span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 微信云托管环境ID，不能为空，替换自己的</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  path<span class="token punctuation">:</span> <span class="token string">'/activate'</span><span class="token punctuation">,</span> 
  method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
  header<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'X-WX-SERVICE'</span><span class="token punctuation">:</span> <span class="token string">'linedetect'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"invitecode"</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>content
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>第二项服务请求调试如上，把 path 和 method 改成对应的，项目名称记得改，data 即传递的数据，内容正是云调试 Body 里面的，这里 res.content 可以是输入框的输入值等需要的输入。这段代码可以封装进一个函数绑定到一个组件上进行触发，比如点一个按钮，弹出输入框，输入的 csv 里面有的 jiang，然后再次发送第一项服务请求，就可以发现 jiang 对应的 activation 变成1。调试完成。<br><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/POST%E7%BB%93%E6%9E%9C.png" alt="POST结果"></li>
</ul>
<h1 id="PC端请求"><a href="#PC端请求" class="headerlink" title="PC端请求"></a>PC端请求</h1><ul>
<li>我们可以通过 Python 的 requests 库通过公网获取数据，这样可以在本地轻松地备份云端数据，防止数据损坏或意外修改等。</li>
<li>我们需要找到自己云托管服务的公网访问域名（前提是要开启公网访问）</li>
<li><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E5%85%AC%E7%BD%91%E5%9F%9F%E5%90%8D.png" alt="公网域名"></li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'这里填入公网访问的域名/get'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印响应内容</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E6%89%98%E7%AE%A1%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/PC%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png" alt="PC请求结果"></p>
<ul>
<li>如上，我们通过 requests 请求获得了响应内容（这个数据和开头创建的不是同一个，只是做一个演示），后面我们可以接着用csv库将json数据转字典后存入文档，按自己的需求任意处理数据。</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul>
<li>至此完成了本地 python 的简单 restful 工程上传小程序云托管、小程序访问云托管数据、gitee 仓库绑定轻松更新。</li>
<li>注意：这种方法下，每次更新都要用 GET 请求获取一下当前 csv 文件的数据，因为此时云端的 csv 文件已经和本地的不一样了，要获取后手动更新在本地文件里面，否则上传新的工程后 csv 又会覆盖云端。</li>
<li>在云托管服务设置位置可以将最小实例数改为1，如果是0的话服务器没响应30分钟就会关闭，下次请求就得等服务器开启，需要一两分钟，期间请求都是超时的</li>
<li>数据要更改很容易，只需要按自己的需求编写更多的 POST 请求，甚至能完成空数据文件下仅通过请求就完成一个不需要 MySQL 的低配数据库。这很适合数据量很小的项目，能节约资金成本。同时云托管的费用也比租服务器便宜很多，按量计费可以让小数据项目节约不少。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>API</tag>
        <tag>restful</tag>
        <tag>微信小程序</tag>
        <tag>云托管</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第八章 排序</title>
    <url>/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥基本概念"><a href="#🔥基本概念" class="headerlink" title="🔥基本概念"></a>🔥基本概念</h1><ul>
<li>排序稳定性：序列中两个相同关键字的元素在排序之后，之前在左边的关键字还在左边，<span id="more"></span>右边的还在右边，即相对位置不变，这就是<strong>稳定的排序</strong></li>
<li>不稳定的排序不一定比稳定的排序算法差，这取决于需求</li>
<li>排序分为<strong>内部排序</strong>（数据都在内存中）和<strong>外部排序</strong>（数据很多无法都放在内存里）。内部排序追求时间复杂度和空间复杂度低，外部排序追求<strong>磁盘读写次数少</strong></li>
</ul>
<h1 id="🔥内部排序"><a href="#🔥内部排序" class="headerlink" title="🔥内部排序"></a>🔥内部排序</h1><h2 id="✍插入排序"><a href="#✍插入排序" class="headerlink" title="✍插入排序"></a>✍插入排序</h2><ul>
<li>思路：依次将待排序的数据（记录）按关键字大小插入到之前已经排好序的子序列当中。是以类似顺序查找的方式插入<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png" alt="插入排序"></li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//直接插入排序</span>
<span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//各元素前插到已经排好序的序列中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//若A[i]关键字小于前驱</span>
      temp<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//temp暂存A[i]</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>temp<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//检查所有前面已经排好的元素，倒查保证稳定性</span>
        A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//所有大于temp的元素向后挪</span>
      A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//复制到插入的位置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//直接插入排序（带哨兵）</span>
<span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//依次将A[2]到A[n]前插到已经排好序的序列中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//若A[i]关键字小于前驱，将A[i]插入有序表</span>
      A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//复制为哨兵，A[0]不存放元素</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//向前查找待插入的位置</span>
        A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//向后挪</span>
      A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//复制到插入的位置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>优化——折半插入排序，前插的时候进行类似折半查找地判断然后插入，提高效率</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">,</span>mid<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>high<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
      mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//中间点</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   high<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//查左半边</span>
      <span class="token keyword">else</span> low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//查右半边</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>
      A<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//后移</span>
    A<span class="token punctuation">[</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可以对链表进行插入排序，操作指针比较多，时间复杂度差不多</li>
</ul>
<h2 id="✍希尔排序"><a href="#✍希尔排序" class="headerlink" title="✍希尔排序"></a>✍希尔排序</h2><ul>
<li>（ShellSort）思路：先实现局部的有序，再逐步逼近完全有序</li>
<li>先将排序表分割成若干个子表L[i,i+d,i+2d,…,i+kd]（每个子表都是原序列的等间隔元素），对每个子表进行插入排序。然后缩小d，如此往复直到d&#x3D;1为止<blockquote>
<p>举例如下（蓝色是未排序，绿色已排序）：<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AC%AC%E4%B8%80%E8%B6%9F.png" alt="希尔排序第一趟"><br>第二趟d由4变2：<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AC%AC%E4%BA%8C%E8%B6%9F.png" alt="希尔排序第二趟"><br>最后一趟就结束：<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AC%AC%E4%B8%89%E8%B6%9F.png" alt="希尔排序第三趟"></p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//希尔排序</span>
<span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> d<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//A[0]是暂存单元，不是哨兵，j&lt;=0时插入位置已到</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>d<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>d<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">=</span>d<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//步长变化</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要将A[i]插入有序增量子表</span>
        A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//暂存</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">-</span>d<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">-</span><span class="token operator">=</span>d<span class="token punctuation">)</span>
          A<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据后移，查找插入位置</span>
        A<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//插入</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>希尔排序时间复杂度和d有关，但是最差也能和插入排序齐平，是一个<strong>不稳定</strong>的排序算法，仅适用<strong>顺序表</strong></li>
</ul>
<h2 id="✍交换排序"><a href="#✍交换排序" class="headerlink" title="✍交换排序"></a>✍交换排序</h2><ul>
<li>基于<strong>交换</strong>的排序</li>
</ul>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul>
<li>属于<strong>交换排序</strong>。思路：按顺序（从前往后或者从后往前）进行两两比较和交换（逆序时交换），直到任意两个元素都比较完（排列组合）。c语言入门的重点算法，就不用过多叙述。</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> temp<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//交换的中间变量</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否发生交换</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//一趟冒泡</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//若逆序</span>
        temp <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        A<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//本趟遍历后没有交换，就说明已经有序，可以提早结束</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>冒泡排序是<strong>稳定的</strong>，也<strong>可以用于链表</strong></li>
</ul>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul>
<li>也属于<strong>交换排序</strong>，是一种性能很好的排序</li>
<li>思路：进行多次划分，每次划分选择一个元素（<strong>枢轴元素</strong>，一般从头开始）将其他元素中比它大（或等）的放在一边，比它小的放在另一边，就能直接确定该元素的准确位置。</li>
<li>举例如下：选择第一个元素，low和high两个指针放在两边，逐步向中间移动，随着元素位置划分，空位不断发生变化<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%BE%E4%BE%8B1.png" alt="快速排序举例1"></li>
<li>最后low和high重合，这个空位就是该元素的最终位置<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%BE%E4%BE%8B2.png" alt="快速排序举例2"></li>
<li>最后该枢轴元素左右各产生了一个子表，继续对两个表分别重复上述操作，最后就能实现排序</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//用一个元素将待排序的序列分为左右两个部分</span>
<span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> pivot<span class="token operator">=</span>A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//第一个元素作为枢轴</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//用low、high搜索枢轴最终位置</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">>=</span>pivot<span class="token punctuation">)</span> <span class="token operator">--</span>high<span class="token punctuation">;</span>
    A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//比枢轴小的元素移动到左端</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">)</span>  <span class="token operator">++</span>low<span class="token punctuation">;</span>
    A<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//比枢轴大的元素移到右端</span>
  <span class="token punctuation">}</span>
  A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//枢轴元素存放的最终位置</span>
  <span class="token keyword">return</span> low<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//快速排序</span>
<span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//递归跳出的条件</span>
    <span class="token keyword">int</span> pivotpos<span class="token operator">=</span><span class="token function">Partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//划分</span>
    <span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>low<span class="token punctuation">,</span>pivotpos<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//划分左子表</span>
    <span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>pivotpos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//划分右子表</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>快速排序如果没次划分都能分出很均匀的左右子表，那么效率将最高，原本就已经排好序的序列反而是最费时的情况</li>
<li>因此想要优化算法，就可以在头中尾选出三个数，取其中中间值作为枢轴，很大程度地避免选到极端的值</li>
<li>快速排序是<strong>不稳定</strong>的</li>
</ul>
<h2 id="✍选择排序"><a href="#✍选择排序" class="headerlink" title="✍选择排序"></a>✍选择排序</h2><ul>
<li>每步都找到未排序序列中的最值进行排序。</li>
</ul>
<h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><ul>
<li>属于<strong>选择排序</strong>，思路：在每趟排序中选择最小的值放到前面的有序序列。方法很简单清晰</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//一共n-1趟</span>
    <span class="token keyword">int</span> min<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录最小元素位置</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//在后面未排序的元素选择最小的</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>   min<span class="token operator">=</span>j<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//更新最小元素的索引</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span>   <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">//交换函数</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>简单选择排序适用于顺序表和链表，是<strong>不稳定</strong>的</li>
</ul>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul>
<li>也属于<strong>选择排序</strong></li>
<li>堆（heap）：</li>
</ul>
<ol>
<li>大根堆：完全二叉树中所有子树的根结点都大于其左右孩子</li>
<li>小根堆：完全二叉树中所有子树的根结点都小于其左右孩子</li>
</ol>
<ul>
<li>显然排成堆的形式就很容易排序。所以堆排序的思想就是把序列先变成堆，然后进行排序。</li>
<li>基于大根堆进行排序的步骤：</li>
</ul>
<ol>
<li>将序列排成完全二叉树，对其中索引小于n&#x2F;2的元素（非终端结点）进行判断，若有不符合大根堆条件的根结点，则将其与更大的那个孩子对换位置。如此往复</li>
<li>上面的小元素下沉之后可能破坏下面的大根堆结构，只要再多次重复，让小元素<strong>下沉</strong>到应该的位置。最终获取到大根堆</li>
<li>接着，每趟将堆顶元素放到排好的有序子序列，并将<strong>待排序元素序列</strong>再进行1、2操作形成大根堆。如此往复，大根堆缩小，直到全部完成</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//建立大根堆</span>
<span class="token keyword">void</span> <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//从后往前调整所有非终端结点</span>
    <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//将以k为根的子树调整成大根堆</span>
<span class="token keyword">void</span> <span class="token function">HeadAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
  A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//A[0]暂存子树根结点</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">*</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//沿key较大的子结点向下筛选</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//取key大的子结点下标</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//筛选接束</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
      A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//A[i]调整到父结点</span>
      k<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//修改k值，以便继续向下筛选</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//筛选的结点值放入最终位置</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//堆排序</span>
<span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化堆</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//n-1趟的交换和建堆过程</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//堆顶元素和堆底互换</span>
    <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//剩余待排序元素整理成堆</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>堆排序看似操作繁琐复杂，但是时间复杂度很低，空间复杂度只有常数级。</li>
<li>堆排序是<strong>不稳定</strong>的</li>
</ul>
<h2 id="✍归并排序"><a href="#✍归并排序" class="headerlink" title="✍归并排序"></a>✍归并排序</h2><ul>
<li>归并：把两个有序序列合并成一个</li>
<li>思路（以2个序列为例）：对于两个有序序列，对比最小值的大小，将小的放入最终序列。继续对比新的两个最小值，如此往复即可。当其中一个序列空了，可以将剩下的序列整个丢进最终序列。完成排序<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/2%E8%B7%AF%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png" alt="2路归并排序"></li>
<li>上述方法称为2路归并，即将两个序列归并。多路归并需要比较多个关键字</li>
<li>对于一个初始序列，可以一次将元素两两归并，对新的子序列再两两归并，直到全部归并。如下：<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%8B%9F.png" alt="归并排序模拟"></li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>B<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//辅助数组B</span>
<span class="token comment" spellcheck="true">//A[low...high]和A[mid+1...high]各自有序，将其归并</span>
<span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>low<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
    B<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将A中所有元素复制到B</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
      A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将较小值复制到A</span>
    <span class="token keyword">else</span>
      A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>     A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>    A<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//递归思想归并排序</span>
<span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从中间划分</span>
    <span class="token function">MergeSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从左半部分归并排序</span>
    <span class="token function">MergeSort</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从右半部分归并排序</span>
    <span class="token function">Merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//归并</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>归并排序的时间复杂度恒定，和堆排序、快速排序相同，是<strong>稳定的</strong></li>
</ul>
<h2 id="✍基数排序"><a href="#✍基数排序" class="headerlink" title="✍基数排序"></a>✍基数排序</h2><ul>
<li>步骤（递减）：</li>
</ul>
<ol>
<li>将每个元素关键字的个位先<strong>分配</strong>到0-9共10个位置，形成10个队列（链式）<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%AC%AC%E4%B8%80%E8%B6%9F%E5%88%86%E9%85%8D.png" alt="基数排序第一趟分配"></li>
<li>从9-0把队列依次<strong>收集</strong>存入一个队列，每个队列<strong>靠近队头（上面）的靠前</strong><br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%AC%AC%E4%B8%80%E8%B6%9F%E6%94%B6%E9%9B%86.png" alt="基数排序第一趟收集"></li>
<li>接着按十位重复上述操作，再按百位重复上述操作，完成排序</li>
</ol>
<ul>
<li>基数排序是<strong>稳定的</strong></li>
<li>基数排序可以用于日期排序，按日月年顺序分配收集。擅长解决如下问题：</li>
</ul>
<ol>
<li>数据元素关键字易拆分为d组，且d较小</li>
<li>每组关键字取值范围不大</li>
<li>数据元素个数n较大</li>
</ol>
<h1 id="🔥外部排序"><a href="#🔥外部排序" class="headerlink" title="🔥外部排序"></a>🔥外部排序</h1><p><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%A4%96%E9%83%A8%E5%BD%92%E5%B9%B6.png" alt="外部归并"></p>
<ul>
<li>每个格子都是一个数据<strong>块</strong>，存放的是归并排序的归并段，归并排序时，每次都去其中两个放到申请的缓存中进行<strong>内部归并</strong>，再输出。<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/2%E8%B7%AF%E5%BD%92%E5%B9%B6%E6%95%88%E7%8E%87.png" alt="2路归并效率"></li>
<li>但这样读写次数很多，可以优化<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6.png" alt="多路归并"></li>
<li>进行多路归并可以优化效果，减少读取磁盘次数<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6%E6%95%88%E7%8E%87.png" alt="多路归并效率"></li>
<li>多路归并负面影响：</li>
</ul>
<ol>
<li>k路归并时，需要开辟k个输入缓冲区</li>
<li>每挑选一个关键字都要对比k-1次，内部归并所需时间增加，这可以通过<strong>败者树</strong>进行优化</li>
</ol>
<h2 id="✍败者树"><a href="#✍败者树" class="headerlink" title="✍败者树"></a>✍败者树</h2><p><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E8%B4%A5%E8%80%85%E6%A0%91.png" alt="败者树"></p>
<ul>
<li>如图，实现类似淘汰赛制度的层层晋级，每轮晋级者但下轮失败的形成败者树。若树顶的冠军被替换，新元素只需要再重复前一个冠军的路程找到属于他的位置即可<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E8%B4%A5%E8%80%85%E6%A0%91%E5%BA%94%E7%94%A8.png" alt="败者树应用（递增）"></li>
<li>如图，不用记录关键字，只需要在树上记录关键字来自的归并段即可，每次选出的最值（树顶3对应叶子1）进入有序序列排序，空的位置由同一个归并段的下一个元素（6）顶替<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E8%B4%A5%E8%80%85%E6%A0%91%E5%BA%94%E7%94%A82.png" alt="败者树应用"></li>
<li>6进入后重复1的对比过程，刷新左半边的树即可，最后（树顶5对应）2胜出，接在1之后</li>
<li>k路归并，第一次构造败者树要 k-1 次对比关键字，有了败者树，每次更迭只需要对比 log<sub>2</sub>k 次，归并段增多，次数<strong>对数级别</strong>地大大减少</li>
</ul>
<h2 id="✍置换-选择排序"><a href="#✍置换-选择排序" class="headerlink" title="✍置换-选择排序"></a>✍置换-选择排序</h2><ul>
<li>进一步减少归并段数量<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png" alt="置换-选择排序"></li>
<li>如上，短的归并段生成长归并段，每次都将最大值存入长归并段之后，更新最大值，当最大值大于缓存中3个数时就完成第一个长归并段<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E7%BD%AE%E6%8D%A2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F2.png" alt="置换-选择排序完成"></li>
<li>最后完成如上的三个归并段。</li>
</ul>
<h2 id="✍最佳归并树"><a href="#✍最佳归并树" class="headerlink" title="✍最佳归并树"></a>✍最佳归并树</h2><p><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%A0%91.png" alt="归并树"></p>
<ul>
<li>如上每个元素数值代表归并段长度，按照<strong>哈夫曼树</strong>的思维，可以最小化磁盘读写次数，如下：<br><img src="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/%E4%BA%8C%E8%B7%AF%E5%BD%92%E5%B9%B6%E6%9C%80%E4%BD%B3%E5%BD%92%E5%B9%B6%E6%A0%91.png" alt="二路归并最佳归并树"></li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第七章 查找</title>
    <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥基本概念"><a href="#🔥基本概念" class="headerlink" title="🔥基本概念"></a>🔥基本概念</h1><ul>
<li>关键字：唯一能标识区分表内元素的某个数据项值（如学号）<span id="more"></span></li>
<li>只进行查找的表叫做<strong>静态查找表</strong>，进行删改的表叫做<strong>动态查找表</strong></li>
<li>查找长度：操作过程中需要比较关键字的次数</li>
<li>平均查找长度ASL：过往章节提到过，就是所有查找长度的平均值。分为查找成功和失败的两种情况</li>
</ul>
<h1 id="🔥顺序查找"><a href="#🔥顺序查找" class="headerlink" title="🔥顺序查找"></a>🔥顺序查找</h1><ul>
<li>也叫线性查找，常用于<strong>线性表</strong>，思路就是从头查到尾</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//顺序表顺序查找</span>
<span class="token keyword">int</span> <span class="token function">Search_Seq</span><span class="token punctuation">(</span>SSTable ST<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ST<span class="token punctuation">.</span>TableLen <span class="token operator">&amp;&amp;</span> ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>key<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> i<span class="token operator">==</span>ST<span class="token punctuation">.</span>TableLen <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> i<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//查找成功就返回索引，否则返回-1</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//反向查找</span>
<span class="token keyword">int</span> <span class="token function">Search_Seq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SSTable ST<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
  ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//哨兵，如果查到头依然没有查到，到它才结束，返回的索引自然就是0</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>ST<span class="token punctuation">.</span>TableLen<span class="token punctuation">;</span> ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>key<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>有一些简单的优化方法，比如对于有序表可以查到大小超过范围即可停止；可以将查找多的放到前面。</li>
</ul>
<h1 id="🔥折半查找"><a href="#🔥折半查找" class="headerlink" title="🔥折半查找"></a>🔥折半查找</h1><ul>
<li>即二分查找，仅适用<strong>有序的顺序表</strong>，思路就是每次都比较中间的那个值，每次判断完成后都能缩小一半的区间，效率比较高。</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//顺序表</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//动态数组基地址</span>
  <span class="token keyword">int</span> TableLen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>SSTable<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//升序顺序表折半查找</span>
<span class="token keyword">int</span> <span class="token function">Binary_Search</span><span class="token punctuation">(</span>SSTabel L<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>high<span class="token operator">=</span>L<span class="token punctuation">.</span>TableLen<span class="token number">-1</span><span class="token punctuation">,</span>mid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//左中右“指针”</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
    mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//中间值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//查找成功</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>key<span class="token punctuation">)</span>
      high<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//取前半部分继续查找</span>
    <span class="token keyword">else</span>
      low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//取后半部分查找</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE.png" alt="折半查找"></p>
<h1 id="🔥分块查找"><a href="#🔥分块查找" class="headerlink" title="🔥分块查找"></a>🔥分块查找</h1><ul>
<li>按大小区间将表分块，每个块存储区间最大关键字<br><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE.png" alt="分块查找"></li>
<li>步骤如下：</li>
</ul>
<ol>
<li>索引表中确定待查记录所属的分块（可顺序、折半，顺序常用点）</li>
<li>在块内顺序查找</li>
</ol>
<ul>
<li>经推算得到，把n个元素的列表分为根号n个块，每块含有根号n个元素时，ASL最小为 (根号n)+1<br><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE%E6%80%BB%E7%BB%93.png" alt="分块查找总结"></li>
</ul>
<h1 id="🔥B树"><a href="#🔥B树" class="headerlink" title="🔥B树"></a>🔥B树</h1><h2 id="✍概念"><a href="#✍概念" class="headerlink" title="✍概念"></a>✍概念</h2><p><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/5%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.png" alt="5叉查找树"></p>
<ul>
<li>m叉查找树高效的策略：</li>
</ul>
<ol>
<li>m叉查找树中，规定除了根节点外，任何结点至少有[m&#x2F;2]（向上取整）个分叉，即至少含有[m&#x2F;2]- 1个关键字</li>
<li>对于任何一个结点，其子树高度都相同（<strong>绝对平衡</strong>）</li>
</ol>
<ul>
<li>满足以上条件的查找树即为<strong>B树</strong><blockquote>
<p>B树，又称多路平衡查找树，B树中所有结点的孩子个数的最大值称为B树的阶，通常用m表示。一棵m阶B树或为空树，或为满足如下特性的m叉树:</p>
<ol>
<li>树中每个结点至多有m棵子树，即至多含有m-1个关键字。</li>
<li>若根结点不是终端结点，则至少有两棵子树。</li>
<li>除根结点外的所有非叶结点至少有[m&#x2F;2]棵子树，即至少含有[m&#x2F;2]-1个关键字。</li>
<li>如下<br><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/B%E6%A0%91%E7%89%B9%E5%BE%814.png" alt="B树特征4"></li>
<li>所有的叶结点都出现在同一层次上，并且不带信息(可以视为外部结点或类似于折半查找判定树的查找失败结点，实际上这些结点不存在，指向这些结点的指针为空)。</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="✍B树的插入"><a href="#✍B树的插入" class="headerlink" title="✍B树的插入"></a>✍B树的插入</h2><ul>
<li>在插入key后，若导致原结点关键字数超过上限，则从中间位置([m&#x2F;2])将其中的关键字分为两部分，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，中间位置（[m&#x2F;2]）的结点插入原结点的父结点。若此时导致其父结点的关键字个数也超过了上限，则继续进行这种分裂操作，直至这个过程传到根结点为止，进而导致B树高度增1。</li>
</ul>
<h2 id="✍B树的删除"><a href="#✍B树的删除" class="headerlink" title="✍B树的删除"></a>✍B树的删除</h2><p><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/B%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4.png" alt="B树的删除"></p>
<h1 id="🔥B-树"><a href="#🔥B-树" class="headerlink" title="🔥B+树"></a>🔥B+树</h1><p><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/B+%E6%A0%91%E6%A6%82%E5%BF%B5.png" alt="B+树概念"><br><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/B%E6%A0%91%E4%B8%8EB+%E6%A0%91.png" alt="B树与B+树"></p>
<h1 id="🔥散列表"><a href="#🔥散列表" class="headerlink" title="🔥散列表"></a>🔥散列表</h1><h2 id="✍概念-1"><a href="#✍概念-1" class="headerlink" title="✍概念"></a>✍概念</h2><ul>
<li>又称<strong>哈希表</strong>，是一种数据结构，数据元素关键字与其存储地址通过<strong>散列函数（哈希函数）</strong>直接相关</li>
</ul>
<p><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/%E6%95%A3%E5%88%97%E8%A1%A8.png" alt="散列表"></p>
<ul>
<li>如上，若不同关键字通过函数映射到同一个值，称它们为<strong>同义词</strong></li>
<li>通过散列函数确定的位置已经存放其他元素，称这种情况为<strong>冲突</strong>，通过<strong>拉链法</strong>可以解决冲突问题</li>
</ul>
<h2 id="✍处理冲突"><a href="#✍处理冲突" class="headerlink" title="✍处理冲突"></a>✍处理冲突</h2><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/%E6%95%A3%E5%88%97%E8%A1%A8%E6%8B%89%E9%93%BE%E6%B3%95.png" alt="拉链法"></p>
<ul>
<li>拉链法就是将同义词存在同一个链表中</li>
<li>查找目标只需要通过散列函数进行查找即可，如果没有查找到，查找长度是0，查找长度与链表中位置一致</li>
<li>冲突越多ASL（平均查找长度）越大，最理想就是没有冲突，这与哈希函数的设计有关</li>
<li>散列表相当于<strong>用空间换时间</strong>，用很多散列地址加快了查找速度</li>
<li>每一个链表中关键字的顺序可以随意，但是如果是有大小顺序的将更利于查找。</li>
</ul>
<h3 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h3><ul>
<li>这个方法允许空闲地址向其非同义词表项开放，公式如下：<br><img src="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/%E5%BC%80%E6%94%BE%E5%AE%9A%E5%9D%80%E6%B3%95%E9%80%92%E6%8E%A8%E5%85%AC%E5%BC%8F.png" alt="开放定址法递推公式"></li>
</ul>
<blockquote>
<p>增量d的设定方法：</p>
<ol>
<li>线性探测法：d<sub>i</sub>&#x3D;0,1,2,…,m-1。发生冲突时会向后面的地址逐个检测是否为空，为空就存入。<br>查找也按照递推公式逐个查找比较。但是如果最后没有空缺，容易使得查找失败需要遍历大量地址。<br>删除不能直接清空，需要设置一个标记（标志位）让指针查到这里的时候继续查</li>
<li>平方探测法：d<sub>i</sub>&#x3D;0<sup>2</sup>,±1<sup>2</sup>,±2<sup>2</sup>,…,±k<sup>2</sup>。又称<strong>二次探测法</strong>，k≤m&#x2F;2。发生冲突时会<strong>交替</strong>往前往后检测空闲地址。<br>由于增量是不连续的，这会使得空缺更多，不容易像线性探测法产生聚集</li>
<li>伪随机序列法：d<sub>i</sub>是一个伪随机序列</li>
</ol>
</blockquote>
<h3 id="再散列法"><a href="#再散列法" class="headerlink" title="再散列法"></a>再散列法</h3><ul>
<li>又名<strong>再哈希法</strong>：除了原始散列函数外，可以有多几个散列函数，查找的时候可以一次使用这些散列函数查找</li>
</ul>
<h2 id="✍散列函数"><a href="#✍散列函数" class="headerlink" title="✍散列函数"></a>✍散列函数</h2><ul>
<li><p><strong>残留余数法</strong>：H(key)&#x3D;k%p，对于m长的散列表，取一个不大于m但最接近或者等于m的<strong>质数</strong>p。这会使得存储分布更均匀（虽然这意味着舍弃p到m之间的位置），这在《数论》中有证明</p>
</li>
<li><p><strong>数字分析法</strong>：选取数码分布较为均匀的若干位作为散列地址<br>设关键字是r进制数（如十进制数），而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀一些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，此时可选取数码分布较为均匀的若干位作为散列地址。这种方法适合于已知的关键字集合，若更换了关键字，则需要重新构造新的散列函数。（如手机号码末尾4位分布很散，可以作为关键字）</p>
</li>
<li><p><strong>平方取中法</strong>：取关键字的平方值的中间几位作为散列地址。因为求平方后的数中间几位总是和关键字整体相关，而首末的位总是只和关键字头尾相关。<br>具体取多少位要视实际情况而定。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数。（如身份证）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第六章 图</title>
    <url>/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥基本概念"><a href="#🔥基本概念" class="headerlink" title="🔥基本概念"></a>🔥基本概念</h1><ul>
<li><p>图G记为G&#x3D;(V,E)<span id="more"></span><br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E5%9B%BE%E7%9A%84%E7%A4%BA%E6%84%8F.png" alt="图"></p>
</li>
<li><p>顶点集V：所有顶点（结点）的集合，用|V|表示顶点个数</p>
</li>
<li><p>边集E：所有边的集合，用|E|表示图G中边的条数</p>
</li>
<li><p>图的顶点集不能是空的，但是边集可以是空的，边两头一定都有顶点</p>
</li>
<li><p>无向图和有向图：E是<strong>无向边（边）</strong>的集合，(v,w)&#x3D;(w,v)，则G是<strong>无向图</strong>；E是<strong>有向边（弧）</strong>的集合，弧记为&lt;v,w&gt;，v是弧尾，w是弧头，&lt;v,w&gt;!&#x3D;&lt;w,v&gt;，则G是<strong>有向图</strong></p>
</li>
<li><p>简单图和多重图：不存在重复边和顶点到自身的边的图是<strong>简单图</strong>，反之则为<strong>多重图</strong>。它们都分为有向和无向，我们主要讨论简单图。</p>
</li>
<li><p>度：</p>
</li>
</ul>
<ol>
<li>无向图：顶点v的度是依附于该点的边数TD(v)</li>
<li>有向图：<strong>入度</strong>是以顶点v为终点（指向v）的有向边数ID(v)，<strong>出度</strong>是以v为起点的有向边数OD(v)，度是出度入度之和<strong>TD&#x3D;ID+OD</strong></li>
</ol>
<ul>
<li>顶点之间关系：</li>
</ul>
<ol>
<li>路径：两点之间的线路的<strong>顶点序列</strong>，有向图要求考虑方向一致性</li>
<li>回路（环）：第一个顶点即最后一个顶点的路径</li>
<li>简单路径：不重复经过结点的路径</li>
<li>简单回路：头尾相同的简单路径</li>
<li>路径长度：路径上的边数</li>
<li>点到点的距离；u到v的最短路径若存在即为距离，不存在则为无穷</li>
</ol>
<ul>
<li><p>连通图：任意两点都连通（有路径）的<strong>无向图</strong>，则为连通图</p>
</li>
<li><p>强连通图：任意两点都强连通（有路径）的<strong>有向图</strong>，则为强连通图</p>
</li>
<li><p>子图：图的一部分（注意前提得是图）</p>
</li>
<li><p>连通分量：无向图的极大连通子图称为连通分量，极大连通子图是<strong>必须连通且包含尽可能多的顶点和边</strong>的子图（尽可能多连）</p>
</li>
<li><p>强连通分量：有向图的极大强连通子图称为强连通分量，极大强连通子图是<strong>必须强连通且包含尽可能多的顶点和边</strong>的子图</p>
</li>
<li><p>生成树：连通图的生成树是<strong>包含图中全部顶点</strong>的一个极小连通子图（边尽可能少），不唯一 <span id="生成树"></span></p>
</li>
<li><p>生成森林：将图的连通分量<strong>分别</strong>生成生成树</p>
</li>
<li><p>边的权：给边赋予的权值</p>
</li>
<li><p>带权图：边带有权的图是带权图，也称为<strong>网</strong></p>
</li>
<li><p>带权路径长度：带权图中，一条路径上所有边的权值之和</p>
</li>
<li><p>其他图：</p>
</li>
</ul>
<ol>
<li>无向完全图：任何两点都存在边的无向图</li>
<li>有向完全图：任何两点都存在<strong>方向相反</strong>的两条弧的有向图</li>
<li>树：不存在回路且连通的无向图，即上一章的树，树属于图</li>
<li>森林：和树同理</li>
<li>有向树：一个顶点入度为0，其余顶点入度均为1的有向图</li>
</ol>
<h1 id="🔥图的存储结构"><a href="#🔥图的存储结构" class="headerlink" title="🔥图的存储结构"></a>🔥图的存储结构</h1><h2 id="邻接矩阵法"><a href="#邻接矩阵法" class="headerlink" title="邻接矩阵法"></a>邻接矩阵法</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%B3%95.png" alt="邻接矩阵法"></p>
<ul>
<li>矩阵的0和1代表两点之间的边存在与否</li>
<li>无向图的邻接矩阵是对称矩阵，可以进行压缩存储</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> MaxVertexNum 100      </span><span class="token comment" spellcheck="true">//顶点数目最大值</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  <span class="token keyword">char</span> Vex<span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//顶点表</span>
  <span class="token keyword">int</span> Edge<span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//邻接矩阵，即边表，可以用char和bool减小空间</span>
  <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//图的当前顶点树和边数/弧树</span>
<span class="token punctuation">}</span> MGraph<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>无向图的顶点的度等于该点所在行或列的非零元素个数；有向图顶点出度是<strong>行</strong>非零元素个数，入度是<strong>列</strong>非零元素个数，度是两者之和。</li>
<li>对于带权图，只要把矩阵的0,1改成权值</li>
<li>邻接矩阵空间复杂度很高，适合用于存放边很密的图（空间利用率大），</li>
<li>A<sup>n</sup>[i][j]等于i到j顶点的长度为n的路径的数目，以此可以得到矩阵A<sup>n</sup>，如下：<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%80%A7%E8%B4%A8.png" alt="邻接矩阵性质"></li>
</ul>
<h2 id="邻接表法（顺序-链式）"><a href="#邻接表法（顺序-链式）" class="headerlink" title="邻接表法（顺序+链式）"></a>邻接表法（顺序+链式）</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%B3%95.png" alt="邻接表法"></p>
<ul>
<li>如上图，^代表空，求顶点度只需要查找对应的链表即可</li>
<li>每个顶点链表的边顺序不唯一</li>
<li>邻接表找入边很不方便，需要遍历整个邻接表。删除边也很不方便，需要删两份数据</li>
</ul>
<h2 id="十字链表法"><a href="#十字链表法" class="headerlink" title="十字链表法"></a>十字链表法</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%AD%98%E6%9C%89%E5%90%91%E5%9B%BE.png" alt="十字链表存有向图"></p>
<ul>
<li>如图，对于有向图，从一个顶点出发顺着橙色寻找可以找到所有指向它的弧，顺着绿色寻找可以找到所有指出的弧</li>
<li>十字链表找出入边都方便，但只能存有向图</li>
</ul>
<h2 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8%E5%AD%98%E6%97%A0%E5%90%91%E5%9B%BE.png" alt="邻接多重表存无向图"></p>
<ul>
<li>类似十字链表，不会有冗余数据，删除方便</li>
<li>邻接多重表只能存无向图</li>
</ul>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93.png" alt="存储方式"></p>
<h1 id="🔥图的基本操作"><a href="#🔥图的基本操作" class="headerlink" title="🔥图的基本操作"></a>🔥图的基本操作</h1><ul>
<li>Adjacent(G,x,y):判断图G是否存在边&lt;x, y&gt;或(x, y)。</li>
<li>Neighbors(G,x):列出图G中与结点x邻接的边。</li>
<li>InsertVertex(G,x):在图G中插入顶点x。</li>
<li>DeleteVertex(G,x):从图G中删除顶点x。</li>
<li>AddEdge(G,x,y):若无向边(x,y)或有向边&lt;x, y&gt;不存在，则向图G中添加该边。</li>
<li>RemoveEdge(G,x,y):若无向边(x,y)或有向边&lt;x, y&gt;存在，则从图G中删除该边</li>
<li>FirstNeighbor(G,x):求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图中不存在x，则返回-1。</li>
<li>NextNeighbor(G,x,y):假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回-1。</li>
<li>Get_edge_value(G,x,y):获取图G中边(x, y)或&lt;x, y&gt;对应的权值。</li>
<li>Set_edge_value(G,x,y,v):设置图G中边(x, y)或&lt;x, y&gt;对应的权值为v</li>
</ul>
<h1 id="🔥图的遍历"><a href="#🔥图的遍历" class="headerlink" title="🔥图的遍历"></a>🔥图的遍历</h1><h2 id="广度优先遍历（BFS）"><a href="#广度优先遍历（BFS）" class="headerlink" title="广度优先遍历（BFS）"></a>广度优先遍历（BFS）</h2><ul>
<li>BFS的思路和树的广度优先遍历一样，借助<strong>辅助队列</strong>进行</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//访问标记数组，已经访问过的点设为true</span>
<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从顶点v出发广度优先遍历G</span>
  <span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//访问操作</span>
  visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标记已访问点</span>
  <span class="token function">Enqueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//顶点v入队Q</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//一直遍历直到队列为空</span>
    <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//顶点v出列</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//所有v的邻接点</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//访问未被访问过的邻接点</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        EnQueue<span class="token punctuation">[</span>Q<span class="token punctuation">,</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//对G进行广度优先遍历</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//访问标记数组的初始化</span>
  <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//初始化辅助队列Q</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//从0号顶点开始遍历</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//对每个连通分量调用一次BFS</span>
      <span class="token function">BFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//对未被访问过的点进行BFS</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>BFSTraverse函数的存在保证非连通图也能遍历完全</li>
<li><strong>广度优先生成树</strong>：根据上述的BFS操作，我们可以根据遍历的先后获取一个树，这是因为一次遍历过程中，每个顶点是通过哪个点遍历到是唯一的，这恰恰是树的结构。邻接表遍历过程不唯一，生成树也就不唯一<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%94%9F%E6%88%90%E6%A0%91.png" alt="广度优先生成树"></li>
<li>广度优先生成森林：非连通图可以多个广度优先生成树，构成森林就是广度优先生成森林。</li>
<li>有向图从不同点遍历，需要的次数可能不一样</li>
</ul>
<h2 id="深度优先遍历（DFS）"><a href="#深度优先遍历（DFS）" class="headerlink" title="深度优先遍历（DFS）"></a>深度优先遍历（DFS）</h2><ul>
<li>一条路走到底再回头，类似树的先根遍历，利用递归实现<span id="DFS算法"></span></li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> visited<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//访问标记数组</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//已访问标记</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//w为u尚未访问的邻接顶点</span>
      <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>
    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//从第一个顶点开始遍历</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//遍历时访问过的就不用再遍历</span>
      <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>和BFS一样，使用DFSTraverse防止非连通图遍历不全的问题</li>
<li><strong>深度优先生成树</strong>：根据深度优先遍历获得的序列得到生成树，同广度优先生成树</li>
<li><strong>深度优先生成森林</strong>：类似广度优先生成森林</li>
</ul>
<h1 id="🔥最小生成树"><a href="#🔥最小生成树" class="headerlink" title="🔥最小生成树"></a>🔥最小生成树</h1><ul>
<li>又名<strong>最小代价树</strong>，<a href="#%E7%94%9F%E6%88%90%E6%A0%91">生成树</a>中边权值之和最小的即为最小生成树。研究对象是<strong>带权连通的无向图</strong></li>
</ul>
<h2 id="Prim（普里姆）算法"><a href="#Prim（普里姆）算法" class="headerlink" title="Prim（普里姆）算法"></a>Prim（普里姆）算法</h2><ul>
<li>从某个顶点开始构建生成树，每次仅将代价（边的权值）最小的新顶点纳入生成树，直到所有顶点都纳入为止</li>
<li>同一顶点Prim算法可以得到不同的生成树</li>
<li>时间复杂度与顶点数相关，适用于边密的图</li>
</ul>
<h2 id="Kruskal（克鲁斯卡尔）算法"><a href="#Kruskal（克鲁斯卡尔）算法" class="headerlink" title="Kruskal（克鲁斯卡尔）算法"></a>Kruskal（克鲁斯卡尔）算法</h2><ul>
<li>在所有边中每次选择一条权值最小的边，使这条边两头连通（已连通的就不选），直到所有结点连通</li>
<li>时间复杂度与边数相关，适合边稀疏的图</li>
</ul>
<h1 id="🔥最短路径"><a href="#🔥最短路径" class="headerlink" title="🔥最短路径"></a>🔥最短路径</h1><ul>
<li>分为<strong>单源最短路径</strong>（特定一个点分别到多点）和<strong>各顶点间最短路径</strong>（任何两点之间）</li>
<li>单源最短路径方法：BFS算法（用于无权图），Dijkstra算法（带权、无权图）</li>
<li>各顶点间最短路径：Floyd算法（带权、无权图）</li>
</ul>
<h2 id="BFS算法"><a href="#BFS算法" class="headerlink" title="BFS算法"></a>BFS算法</h2><ul>
<li>思路上就是修改BFS遍历算法，visit的具体操作是修改最短路径（d）和前驱结点（path）</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">BFS_MIN_Distance</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//d[i]表示u到i结点的最短路径</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//初始化路径无穷大</span>
    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//最短路径从哪个顶点来的（前驱结点）</span>
  <span class="token punctuation">}</span>
  d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//未访问过的邻接结点</span>
        d<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//到这个点的路径等于到前驱结点路径+1</span>
        path<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最短路径从u到w</span>
        visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//w入队</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/BFS%E7%AE%97%E6%B3%95%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.png" alt="BFS算法最短路径"></p>
<ul>
<li>如上图，要知道2如何到8最短，只要顺着表格中path从8按前驱结点依次找回到2，其间经过的结点也是路径上的结点，8的d也就是最短路径长度，最短路径就是2-&gt;6-&gt;7-&gt;8</li>
<li>对应广度优先生成树，我们可以看到每个结点所在的层数也能反映其最短路径：<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/BFS%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%94%9F%E6%88%90%E6%A0%91.png" alt="BFS最短路径与广度优先生成树"></li>
</ul>
<h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/Dijkstra%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF.png" alt="Dijkstra算法思路"></p>
<ul>
<li>如上图，以有向图为例，思路上是对于未确定最短路径的点不断更新其路径，需要n-1轮处理。思路和<strong>Prim算法</strong>的思路类似<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/Dijkstra%E7%AE%97%E6%B3%95.png" alt="Dijkstra算法"></li>
<li>得到如上结果，就可以顺着表格找寻点1到任何一点的最短路径及其长度</li>
<li>Dijkstra算法不适用<strong>有负权值的边</strong>的图</li>
</ul>
<h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><ul>
<li>利用<strong>动态规划</strong>思想，分阶段求解<blockquote>
<p>对于n个顶点的图G，求任意一对顶点Vi-&gt;Vj之间的最短路径可分为如下几个阶段:<br>初始：不允许在其他顶点中转，最短路径是？<br>0：若允许在Vo中转，最短路径是？<br>1：若允许在Vo、V1中转，最短路径是？<br>2：若允许在Vo、V1、V2中转，最短路径是？<br>…<br>n-1：若允许在Vo、V1、V2. …..Vn-1中转，最短路径是?</p>
</blockquote>
</li>
</ul>
<p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/Floyd%E7%AE%97%E6%B3%95.png" alt="Floyd算法"></p>
<ul>
<li>如此得到2个矩阵，可以通过左边这个矩阵查找最短距离，右边这个矩阵查找中转点，如果不止一个中转点，需要考虑端点到中转点的最短路径，就是多查找表格几次，直到路径是存在的。</li>
<li>代码上核心逻辑如下：</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//考虑Vk作为中转点</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//遍历整个矩阵，i为行号，j为列号</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//考虑Vk作为中转点会不会缩短路径</span>
        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新最短路径</span>
        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//中转点</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Floyd算法<strong>可以解决带负权值的图</strong>，但是不能解决<strong>带负权回路</strong>的图，如下图这样，每经过一圈，最短路径就会减小，相当于不存在最短路径。<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E8%B4%9F%E6%9D%83%E5%9B%9E%E8%B7%AF%E7%9A%84%E5%9B%BE.png" alt="负权回路的图"></li>
</ul>
<h1 id="🔥有向无环图的应用"><a href="#🔥有向无环图的应用" class="headerlink" title="🔥有向无环图的应用"></a>🔥有向无环图的应用</h1><h2 id="描述表达式"><a href="#描述表达式" class="headerlink" title="描述表达式"></a>描述表达式</h2><ul>
<li>有向无环图（DAG）：没有环路的有向图</li>
<li>表达式可以用树来实现，对于有重复运算项的表达式，可以通过合并分支来生成DAG以减少结点数</li>
<li>求解方法举例如下<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE%E8%A7%A3%E9%A2%98%E4%B8%BE%E4%BE%8B.png" alt="有向无环图解题举例"></li>
</ul>
<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/AOV%E7%BD%91.png" alt="AOV网"></p>
<ul>
<li>拓扑排序是图论的概念，以上面这个AOV网为对象，简而言之是找到做事的先后顺序，这是不唯一的</li>
<li>拓扑排序的实现:</li>
</ul>
<ol>
<li>从AOV网中选择一个没有前驱(入度为0)的顶点并输出。</li>
<li>从网中删除该顶点和所有以它为起点的有向边。</li>
<li>重复1和2直到当前的AOV网为空或当前网中不存在无前驱的顶点为止</li>
</ol>
<ul>
<li>逆拓扑排序：相当于和拓扑排序反着来，对一个AOV网，如果采用下列步骤进行排序，则称之为逆拓扑排序（不唯一）：</li>
</ul>
<ol>
<li>从AOV网中选择一个没有后继（出度为0）的顶点并输出。</li>
<li>从网中删除该顶点和所有以它为终点的有向边。</li>
<li>重复1和2直到当前的AOV网为空。</li>
</ol>
<ul>
<li><a href="#DFS%E7%AE%97%E6%B3%95">DFS算法</a>中每进行一次DFS都打印v就可以得到逆拓扑排序序列</li>
</ul>
<h2 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h2><ul>
<li>AOE网：在带权有向图中，以<strong>顶点表示事件</strong>，以<strong>有向边表示活动</strong>，以边上的<strong>权值表示完成该活动的开销</strong>（如完成活动所需的时间），称之为用边表示活动的网络，简称AOE网(Activity On Edge NetWork)<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/AOE%E7%BD%91%E4%B8%BE%E4%BE%8B.png" alt="AOE网举例"></li>
<li>AOE网具有以下两个性质:</li>
</ul>
<ol>
<li>只有在某顶点所代表的事件发生后，从该顶点出发的各有向边所代表的活动才</li>
<li>只有在进入某顶点的各有向边所代表的活动都已结束时，该顶点所代表的事件才能发生。另外，有些活动是可以并行进行的</li>
</ol>
<ul>
<li><p>在AOE网中仅有一个入度为0的顶点，称为开始顶点（源点），它表示整个工程的开始;</p>
</li>
<li><p>也仅有一个出度为0的顶点，称为结束顶点（汇点），它表示整个工程的结束。</p>
</li>
<li><p>从源点到汇点的有向路径可能有多条，所有路径中，具有<strong>最大路径长度</strong>的路径称为<strong>关键路径</strong>，而把关键路径上的活动称为<strong>关键活动</strong></p>
</li>
<li><p>完成整个工程的<strong>最短时间</strong>就是<strong>关键路径的长度</strong>，若关键活动不能按时完成，则整个工程的完成时间就会延长，关键路径问题其实就是小学学过的的时间安排问题</p>
</li>
<li><p>关键路径的时间方面有以下几个参数：<br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E6%9C%80%E6%97%A9%E6%97%B6%E9%97%B4.png" alt="关键路径最早时间"><br><img src="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E6%9C%80%E8%BF%9F%E6%97%B6%E9%97%B4.png" alt="关键路径最迟时间"></p>
</li>
<li><p>求关键路径：</p>
</li>
</ul>
<ol>
<li>求所有事件的最早发生时间ve()，需要进行拓扑排序以方便逐个考虑事件</li>
<li>求所有事件的最迟发生时间vl()，需要进行逆拓扑排序以方便逐个考虑事件</li>
<li>求所有活动的最早发生时间e()</li>
<li>求所有活动的最迟发生时间I()</li>
<li>求所有活动的时间余量d()，d(i)&#x3D;0即为关键活动，由关键活动即可获取关键路径</li>
</ol>
<ul>
<li>当关键活动改变也会相应地改变关键路径，当关键活动缩短到一定程度可能改变关键路径，该活动可能会变成非关键活动，此时继续压缩该活动就不会缩短关键路径长度。所以显然，也可能存在<strong>多个</strong>关键路径。</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第五章 树与二叉树</title>
    <url>/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥树的基本概念"><a href="#🔥树的基本概念" class="headerlink" title="🔥树的基本概念"></a>🔥树的基本概念</h1><ul>
<li>树是一种<strong>递归</strong>定义的结构，树的结构示意图如下：<span id="more"></span><br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91.png" alt="树的结构示意图"></li>
<li>没有结点的树叫空树（∅）</li>
<li>非空树的特性：</li>
</ul>
<ol>
<li>有且仅有一个<strong>根结点</strong></li>
<li>没有后继的结点成为<strong>叶子结点</strong>（终端结点）</li>
<li>有后继的结点成为<strong>分支结点</strong>（非终端结点）</li>
<li>除了根结点外，任何结点有且仅有一个前驱</li>
<li>每个节点可以有0个或多个后继</li>
</ol>
<ul>
<li>子树的示意图如下：<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%90%E6%A0%91.png" alt="子树"></li>
<li>树从左到右顺序可以更改，不影响逻辑的，成为<strong>无序树</strong>，反之则为<strong>有序树</strong></li>
</ul>
<h2 id="✍结点关系"><a href="#✍结点关系" class="headerlink" title="✍结点关系"></a>✍结点关系</h2><ol>
<li>祖先结点：逆着路径向上的所有结点都是祖先结点</li>
<li>子孙结点：与祖先结点相反</li>
<li>父节点：顾名思义</li>
<li>孩子结点：父节点相反</li>
<li>兄弟结点：同一个父节点的所有孩子结点之间互为兄弟结点</li>
<li>堂兄弟结点：同一层的结点之间互为堂兄弟结点</li>
<li>路径：只能从上往下走</li>
<li>路径长度：经过的边的个数</li>
</ol>
<h2 id="✍属性"><a href="#✍属性" class="headerlink" title="✍属性"></a>✍属性</h2><ol>
<li>结点的层次：从上往下数</li>
<li>结点的高度：从下往上数</li>
<li>数的高度（深度）：总层数</li>
<li>结点的度：有几个孩子结点（分支），非叶子结点度大于0</li>
<li>树的度：各结点度中的最大值</li>
</ol>
<h2 id="✍其他概念"><a href="#✍其他概念" class="headerlink" title="✍其他概念"></a>✍其他概念</h2><ul>
<li>森林：多个<strong>无交集</strong>的树组成的集合。森林和树有相互转化的问题</li>
</ul>
<h1 id="🔥树的性质"><a href="#🔥树的性质" class="headerlink" title="🔥树的性质"></a>🔥树的性质</h1><ul>
<li><strong>结点数 &#x3D; 总度数 + 1</strong> （这个1就是根结点）</li>
<li>度为m的树与m叉树：<table>
<thead>
<tr>
<th align="center">度为m的树</th>
<th align="center">m叉树</th>
</tr>
</thead>
<tbody><tr>
<td align="center">任意结点的度≤m（最多m个孩子）</td>
<td align="center">任意结点的度≤m（最多m个孩子）</td>
</tr>
<tr>
<td align="center">至少有一个结点度为m（有m个孩子）</td>
<td align="center">允许所有结点度都&lt; m</td>
</tr>
<tr>
<td align="center">一定是非空树，至少有m+1个结点</td>
<td align="center">可以是空树</td>
</tr>
</tbody></table>
</li>
</ul>
<p>　也就是三叉树有可能是一个二叉树甚至线性表，度为m的树一定是三叉树</p>
<ul>
<li>度为m的树或者m叉树第i层至多有m<sup>i-1</sup>个结点</li>
<li>高度为h的m叉树最多有 (m<sup>h</sup>-1)&#x2F;(m-1) 个结点，最少有h个结点</li>
<li>高度为h、度为m的树至少有h+m-1个结点</li>
<li>有n个结点的m叉树最小高度为 log<sub>m</sub>(n(m-1)+1)</li>
</ul>
<h1 id="🔥二叉树"><a href="#🔥二叉树" class="headerlink" title="🔥二叉树"></a>🔥二叉树</h1><h2 id="✍基本概念"><a href="#✍基本概念" class="headerlink" title="✍基本概念"></a>✍基本概念</h2><ul>
<li>二叉树是n（n≥0）个结点的有限集合：要么是空二叉树，要么由一个根结点和两个互不相交的被称为根的<strong>左子树</strong>和<strong>右子树</strong>组成。左右子树也都是二叉树（可以是空的）。</li>
<li>二叉树特点：</li>
</ul>
<ol>
<li>每个结点至多有两个子树</li>
<li>左右子树不能颠倒（<strong>有序树</strong>）</li>
</ol>
<h2 id="✍特殊的二叉树"><a href="#✍特殊的二叉树" class="headerlink" title="✍特殊的二叉树"></a>✍特殊的二叉树</h2><ul>
<li>满二叉树：</li>
</ul>
<ol>
<li>除了叶子结点都有两个孩子结点，只有最后一层有叶子结点</li>
<li>不存在度为1的结点</li>
<li>按层序从1开始编号，结点i左孩子为 2i ，右孩子为 2i+1 ；结点i的父节点为 i&#x2F;2（如果有）</li>
</ol>
<ul>
<li>完全二叉树：去掉任意个满二叉树编号<strong>最大</strong>的结点（必须是最大的连续的几个），最多只有一个度为1的结点。显然，满二叉树属于完全二叉树。</li>
</ul>
<p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="满二叉树和完全二叉树"></p>
<ul>
<li>二叉排序树：一棵二叉树要么是空二叉树，要么具有如下性质的二叉树：</li>
</ul>
<ol>
<li>左子树上所有结点的关键字均小于根结点</li>
<li>右子树上所有结点的关键字均大于根结点</li>
<li>左右子树各是一棵二叉排序树</li>
</ol>
<p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91.png" alt="二叉排序树"></p>
<ul>
<li>平衡二叉树：任意结点的左子树和右子树深度之差不超过1。平衡二叉树高度通常不会很高，尽可能的宽，使得搜索变得更快，更高效</li>
</ul>
<p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="平衡二叉树"></p>
<h2 id="✍二叉树的顺序存储"><a href="#✍二叉树的顺序存储" class="headerlink" title="✍二叉树的顺序存储"></a>✍二叉树的顺序存储</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 100</span>
<span class="token keyword">struct</span> TreeNode<span class="token punctuation">{</span>
  ElemType value<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//结点中的数据元素</span>
  bool isEmpty<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结点是否为空</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
TreeNode t<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义一个数组，从上到下，从左往右的顺序依次存储<strong>完全二叉树</strong>的各个结点</li>
<li>非完全二叉树顺序存储可以将元素与完全二叉树一一对应，在空缺的地方不存数据，这会造成大量空闲的空间，所以二叉树一般不用顺序存储</li>
</ul>
<h2 id="✍二叉树的链式存储"><a href="#✍二叉树的链式存储" class="headerlink" title="✍二叉树的链式存储"></a>✍二叉树的链式存储</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTNode<span class="token punctuation">{</span>
  ElemType data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//数据</span>
  <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//左、右孩子指针</span>
  <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>parent<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//父指针</span>
<span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span><span class="token operator">*</span>BiTree<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这种实现方式成为<strong>二叉链表</strong></li>
<li>没有孩子结点的指针就是空指针，n个结点的二叉链表有n+1个<strong>空链域</strong>（空指针）</li>
<li>父指针通常在<strong>需要经常反向查找</strong>的情况下使用</li>
<li>编程过程中要熟悉如下结点之间的序列关系：</li>
</ul>
<p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E7%82%B9%E6%95%B0%E5%80%BC%E5%85%B3%E7%B3%BB.png" alt="完全二叉树结点数值关系"></p>
<h2 id="✍二叉树的遍历"><a href="#✍二叉树的遍历" class="headerlink" title="✍二叉树的遍历"></a>✍二叉树的遍历</h2><h3 id="先中后序遍历"><a href="#先中后序遍历" class="headerlink" title="先中后序遍历"></a>先中后序遍历</h3><ul>
<li>先序遍历：根-&gt;左-&gt;右 的顺序遍历(NLR)</li>
<li>中序遍历：左-&gt;根-&gt;右 的顺序遍历(LNR)</li>
<li>后序遍历：左-&gt;右-&gt;根 的顺序遍历(LRN)<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%85%88%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E4%B8%BE%E4%BE%8B.png" alt="先中后序遍历举例"></li>
<li>二叉树的先中后序遍历也能获得之前章节的前中后缀表达式：<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E7%AE%97%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%88%86%E6%9E%90%E6%A0%91.png" alt="算数表达式的分析树"></li>
<li>代码实现，以先序为例</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//访问根结点，visit表示需要对结点进行的操作</span>
    <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归遍历左子树</span>
    <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归遍历右子树</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>对于中、后序遍历只需更改if下的三条语句顺序即可</li>
<li>先序遍历为例，实现过程如下，一条路一直往左边走，只要左边有路就走到底，左边走完回头走右边，右边走完再往回走，如此往复。也就是在每个路口（结点）都得作出判断，优先走左边，然后走右边，最后回头。<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E8%B7%AF%E5%BE%84%E5%9B%BE.png" alt="先序遍历路径图"></li>
<li>因此，每个结点最终都会<strong>经过三次</strong>，先序遍历时结点在第一次会被访问。</li>
</ul>
<h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><ul>
<li>按一层一层的顺序遍历（从上到下，从左往右）</li>
<li>算法思想：</li>
</ul>
<ol>
<li>初始化一个辅助<strong>队列</strong></li>
<li>根结点入队</li>
<li>若队列非空，则队头结点出队，访问该结点，并将该结点的左右孩子结点依次入队（如果有的话）</li>
<li>重复3直到队列为空</li>
</ol>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
  LinkQueue Q<span class="token punctuation">;</span>
  <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//初始化辅助队列</span>
  BiTree p<span class="token punctuation">;</span>
  <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//根结点入队</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//队列不空则继续遍历</span>
    <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//队头结点出队</span>
    <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//访问该出队结点（进行需要的操作）</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
      <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//左孩子入队</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
      <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//右孩子入队</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="✍线索二叉树"><a href="#✍线索二叉树" class="headerlink" title="✍线索二叉树"></a>✍线索二叉树</h2><ul>
<li>以中序遍历为例，将中序遍历序列中每一个结点的<strong>前驱作为左孩子</strong>，<strong>后继作为右孩子</strong>，形成中序线索二叉树，这种时候的左右孩子就是<strong>左右线索</strong>。如果没有线索（在遍历序列头尾）就是空指针。之前提到的二叉树n+1个空链域就刚好用来作为线索。</li>
<li>线索化的目的就是利于找前驱后继<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="线索二叉树"></li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ThreadNode<span class="token punctuation">{</span>
  ElemType data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> ThreadNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ltag<span class="token punctuation">,</span>rtag<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左右线索标志</span>
<span class="token punctuation">}</span>ThreadNode<span class="token punctuation">,</span><span class="token operator">*</span>ThreadTree<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如上，当对应ltag为0，说明该结点的左孩子指针指向的确实是左孩子结点，为1代表指针是线索。rtag同理。</li>
<li>线索化实现，中序为例，其他的略有不同，不做具体记录</li>
</ul>
<p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E5%8C%96.png" alt="中序线索化"></p>
<ul>
<li>线索化之后，中序二叉树找前驱后继的方法如下<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%BE%E5%89%8D%E9%A9%B1.png" alt="中序线索二叉树找前驱"><br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%BE%E5%90%8E%E7%BB%A7.png" alt="中序线索二叉树找后继"></li>
<li><strong>先序线索二叉树找不到前驱，后序线索二叉树找不到后继</strong>，除非用原始方法，从根开始一个一个找</li>
</ul>
<h1 id="🔥树的存储结构"><a href="#🔥树的存储结构" class="headerlink" title="🔥树的存储结构"></a>🔥树的存储结构</h1><h2 id="✍双亲表示法（顺序存储）"><a href="#✍双亲表示法（顺序存储）" class="headerlink" title="✍双亲表示法（顺序存储）"></a>✍双亲表示法（顺序存储）</h2><p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="双亲表示法"></p>
<ul>
<li>如上，每个结点的父结点“指针”（实际是整型）存放的是父结点的物理位置索引</li>
</ul>
<h2 id="✍孩子表示法（顺序-链式存储）"><a href="#✍孩子表示法（顺序-链式存储）" class="headerlink" title="✍孩子表示法（顺序+链式存储）"></a>✍孩子表示法（顺序+链式存储）</h2><p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="孩子表示法"></p>
<ul>
<li>如上，每个结点指针指向第一个孩子</li>
</ul>
<h2 id="✍孩子兄弟表示法（链式存储）"><a href="#✍孩子兄弟表示法（链式存储）" class="headerlink" title="✍孩子兄弟表示法（链式存储）"></a>✍孩子兄弟表示法（链式存储）</h2><p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="孩子兄弟表示法"></p>
<ul>
<li>结点的指针分别指向第一个孩子和右兄弟，把它们分别视作左右孩子，实质上就完成了<strong>树与二叉树的转化</strong></li>
</ul>
<h2 id="✍森林和二叉树转换"><a href="#✍森林和二叉树转换" class="headerlink" title="✍森林和二叉树转换"></a>✍森林和二叉树转换</h2><p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A3%AE%E6%9E%97%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%8D%A2.png" alt="森林和二叉树转换"></p>
<ul>
<li>和孩子兄弟表示法一样，把森林的各个根结点视作兄弟结点连起来，就变成一个二叉树存储起来。反过来，把森林的二叉树最右边一路依次拆开即可变成森林</li>
</ul>
<h1 id="🔥树的遍历"><a href="#🔥树的遍历" class="headerlink" title="🔥树的遍历"></a>🔥树的遍历</h1><h2 id="✍先根遍历"><a href="#✍先根遍历" class="headerlink" title="✍先根遍历"></a>✍先根遍历</h2><p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%A0%91%E7%9A%84%E5%85%88%E6%A0%B9%E9%81%8D%E5%8E%86.png" alt="树的先根遍历"></p>
<ul>
<li>若树非空，先访问根结点，再依次对每个子树进行先根遍历</li>
</ul>
<h2 id="✍后根遍历"><a href="#✍后根遍历" class="headerlink" title="✍后根遍历"></a>✍后根遍历</h2><p><img src="/%E6%A0%91%E7%9A%84%E5%90%8E%E5%85%88%E6%A0%B9%E9%81%8D%E5%8E%86.png" alt="树的后根遍历"></p>
<ul>
<li>和先根相反，先进入子树，最后访问根结点</li>
</ul>
<h2 id="✍层次遍历"><a href="#✍层次遍历" class="headerlink" title="✍层次遍历"></a>✍层次遍历</h2><ul>
<li>方法和二叉树的层序遍历一样，用队列实现，不再赘述</li>
<li>层次遍历也成为对树的<strong>广度优先遍历</strong>，先根遍历和后根遍历是<strong>深度优先遍历</strong></li>
</ul>
<h1 id="🔥森林的遍历"><a href="#🔥森林的遍历" class="headerlink" title="🔥森林的遍历"></a>🔥森林的遍历</h1><ul>
<li>先序遍历：相当于把每个树看作子树依次进行先根遍历</li>
<li>中序遍历；相当于把森林转换的二叉树进行中序遍历</li>
</ul>
<h1 id="🔥二叉排序树"><a href="#🔥二叉排序树" class="headerlink" title="🔥二叉排序树"></a>🔥二叉排序树</h1><ul>
<li>又名<strong>二叉查找树（BST）</strong>特点如下：</li>
</ul>
<ol>
<li>左子树上所有结点的关键字均小于根结点</li>
<li>右子树上所有结点的关键字均大于根结点</li>
<li>左右子树各是一棵二叉排序树</li>
</ol>
<ul>
<li>中序遍历一个二叉排序树就可以得到递增序列，这利于查找</li>
</ul>
<h2 id="✍查找"><a href="#✍查找" class="headerlink" title="✍查找"></a>✍查找</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//二叉排序树中查找值为key的结点</span>
BSTNode <span class="token operator">*</span><span class="token function">BST_Search</span><span class="token punctuation">(</span>BSTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> key<span class="token operator">!=</span>T<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//若树空或等于根结点值，则结束</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>T<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>  T<span class="token operator">=</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//小于，则在左子树查找（往大的方向查）</span>
    <span class="token keyword">else</span> T<span class="token operator">=</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//大于，则在右子树上查找</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> T<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//查到就返回结果，查不到会返回NULL</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>也可以通过<strong>递归</strong>实现：</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp">BSTNode <span class="token operator">*</span><span class="token function">BSTSearch</span><span class="token punctuation">(</span>BSTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查不到</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>T<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> T<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//成功</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span> T<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">BSTSearch</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>lchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//左子树</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token function">BSTSearch</span><span class="token punctuation">(</span>T<span class="token operator">-</span><span class="token operator">></span>rchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//右子树</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>查找长度</strong>，即需要查找对比的步数，反应时间复杂度</li>
<li>查找<strong>成功</strong>的<strong>平均查找长度ASL</strong>：任意结点查找的机会相同，那么平均需要进行的对比次数。相同数据高度越大的树ASL越大，若排序树是平衡二叉树那么ASL就会最小。</li>
<li>查找<strong>失败</strong>的<strong>平均查找长度ASL</strong>：每个空指针查找的机会相同，以此进行求平均，也是越高的树ASL越大。</li>
</ul>
<h2 id="✍插入"><a href="#✍插入" class="headerlink" title="✍插入"></a>✍插入</h2><ul>
<li>方法类似查找，当值小于根结点就插入左子树，反之插入右子树，如果查到一样的值就不能插入。</li>
<li>也可以使用递归和循环两种方法实现，不再记录</li>
</ul>
<h2 id="✍构造"><a href="#✍构造" class="headerlink" title="✍构造"></a>✍构造</h2><p><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.png" alt="二叉排序树的构造"></p>
<h2 id="✍删除"><a href="#✍删除" class="headerlink" title="✍删除"></a>✍删除</h2><ol>
<li>删除叶子结点，不破坏排序树性质</li>
<li>若该结点只有左或者右子树之一，则让该子树直接代替该结点的位置即可（简单地上移一格）</li>
<li>若结点有左右两个子树，可以用其<strong>直接后继</strong>或<strong>直接前驱</strong>结点替代其位置，再删去这个直接后继或者前驱原来的位置即可</li>
</ol>
<h1 id="🔥平衡二叉树"><a href="#🔥平衡二叉树" class="headerlink" title="🔥平衡二叉树"></a>🔥平衡二叉树</h1><ul>
<li>简称AVL，任意结点的左子树和右子树深度之差不超过1。</li>
<li>平衡因子：一个结点左子树高度减去右子树高度的差</li>
<li>使得二叉树平衡的方法思路：将<strong>最小不平衡子树</strong>进行改造，所有不平衡都会解决</li>
<li>导致不平衡的原因及对策：</li>
</ul>
<ol>
<li><strong>LL</strong>：在A的左孩子的左子树中插入导致不平衡<br>LL平衡旋转（右单旋转）。由于在结点A的左孩子(L)的左子树(L)上插入了新结点，A的平衡因子由1增至2，导致以A为根的子树失去平衡，需要一次向右的旋转操作。将A的左孩子B向右上旋转代替A成为根结点，将A结点向右下旋转成为B的右子树的根结点，而B的原右子树则作为A结点的左子树。</li>
<li><strong>RR</strong>：在A的右孩子的右子树中插入导致不平衡<br>RR平衡旋转（左单旋转）。由于在结点A的右孩子（R）的右子树(R)上插入了新结点，A的平衡因子由-1减至-2，导致以A为根的子树失去平衡，需要一次向左的旋转操作。将A的右孩子B向左上旋转代替A成为根结点，将A结点向左下旋转成为B的左子树的根结点，而B的原左子树则作为A结点的右子树。</li>
<li><strong>LR</strong>：在A的左孩子的右子树中插入导致不平衡<br>LR平衡旋转（先左后右双旋转）。由于在A的左孩子(L)的石子树（R）上抽人新结点，A的平衡因子由1增至2，导致以A为根的子树失去平衡，需要进行两次旋转操作，先左旋转后右旋转。先将A结点<br>的左孩子B的右子树的根结点c向左上旋转提升到B结点的位置，然后再把该c结点向右上旋转提升到A结点的位置。</li>
<li><strong>RL</strong>：在A的右孩子的左子树中插入导致不平衡<br>RL平衡旋转（先右后左双旋转）。由于在A的右孩子（R）的左子树(L)上插入新结点，A的平衡因子由-1减至-2，导致以A为根的子树失去平衡，需要进行两次旋转操作，先右旋转后左旋转。先将A结点的右孩子B的左子树的根结点c向右上旋转提升到B结点的位置，然后再把该C结点向左上旋转提升到A结点的位置。</li>
</ol>
<h1 id="🔥哈夫曼树"><a href="#🔥哈夫曼树" class="headerlink" title="🔥哈夫曼树"></a>🔥哈夫曼树</h1><ul>
<li>结点的<strong>权</strong>：给结点赋予一个特殊意义的值，类似重要性等现实意义，父结点权值为两个孩子结点（如果有的话）权值之和</li>
<li><strong>结点的带权路径长度</strong>：<strong>根到该结点的路径长度</strong> 与 <strong>结点权值</strong> 的 乘积</li>
<li><strong>树的带权路径长度（WPL）</strong>：所有<strong>叶子结点</strong>的带权路径长度和</li>
<li>含有n个带权叶子结点的<strong>二叉树</strong>中，带权路径长度<strong>最小</strong>的二叉树成为<strong>哈夫曼树</strong>，也称<strong>最优二叉树</strong>，可能不止一个</li>
<li>哈夫曼树构造方法如下：<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.png" alt="哈夫曼树的构造"></li>
<li>本质上是让权值大的结点尽可能靠上层，那样其带权路径长度会尽可能小</li>
</ul>
<blockquote>
<p><strong>哈夫曼树的应用</strong><br>固定长度编码：每个字符用等长度二进制表示（类似ASCII码）<br>可变长度编码：每个字符允许用不同长度二进制表示<br>前缀编码：可变长度编码要求没有一个编码是另一个编码的前缀<br><strong>哈夫曼编码</strong>：用哈夫曼树获得的编码，字符集中的每个字符作为叶子结点，每个字符的出现频度作为权值，以此构建哈夫曼树。方案也不唯一，但编码量一样，常用于<strong>压缩数据</strong><br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.png" alt="哈夫曼编码"></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第四章 串</title>
    <url>/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥概念"><a href="#🔥概念" class="headerlink" title="🔥概念"></a>🔥概念</h1><ul>
<li>串即<strong>字符串</strong>是0个或多个字符组成的有限序列，字符个数n即字符串长度，n&#x3D;0的串为空串（∅）<span id="more"></span></li>
<li>子串：串中的任意个连续的字符组成的子序列</li>
<li>主串：包含子串的串</li>
<li>字符串在主串的位置：字符在串中的序号，从1开始</li>
</ul>
<h1 id="🔥基本操作"><a href="#🔥基本操作" class="headerlink" title="🔥基本操作"></a>🔥基本操作</h1><p>大部分操作都和线性表操作类似，接下来不会进行过多的记录，只会重点记录其中几个</p>
<ul>
<li>StrAssign(&amp;T,chars)：赋值操作。把串T赋值为chars。</li>
<li>StrCopy(&amp;T,S)：复制操作。由串s复制得到串T。</li>
<li>StrEmpty(S)：判空操作。若s为空串，则返回TRUE，否则返回FALSE</li>
<li>StrLength(S)：求串长。返回串S的元素个数。</li>
<li>ClearString(&amp;S)：清空操作。将S清为空串。</li>
<li>DestroyString(&amp;S)：销毁串。将串S销毁（回收存储空间）。</li>
<li>Concat(&amp;T,S1,S2)：串联接。用T返回由S1和S2联接而成的新串</li>
<li>SubString(&amp;Sub,S,pos,len)：求子串。用Sub返回串S的第pos个字符起长度为len的子串。</li>
<li>Index(S,T)：定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为0。</li>
<li>StrCompare(S,T)：比较操作。若S&gt;T，则返回值&gt;0；若S&#x3D;T，则返回值&#x3D;0；若S &lt; T，则返回值&lt;0。</li>
</ul>
<h1 id="🔥顺序存储"><a href="#🔥顺序存储" class="headerlink" title="🔥顺序存储"></a>🔥顺序存储</h1><ul>
<li>静态数组（定长顺序存储）</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> MAXLEN 255    </span><span class="token comment" spellcheck="true">//预定义最大串长</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  <span class="token keyword">char</span> ch<span class="token punctuation">[</span>MAXLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> length<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//实际长度</span>
<span class="token punctuation">}</span>SString<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>动态数组（堆分配存储）</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//ch指向串的基地址</span>
  <span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>HString<span class="token punctuation">;</span>
HString S<span class="token punctuation">;</span>
S<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAXLEN <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
S<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>常见字符串顺序存储方案</li>
</ul>
<ol>
<li>在空间末尾放置length变量</li>
<li>在空间开头放置length变量，这占用了0位置，使得数组下标和字符在串中的位序一致，缺点是<strong>字符串长度不能超过255</strong>否则length只有一位无法表示</li>
<li>没有length变量，而是在字符串末尾放置一个 <strong>\0</strong> 表示结尾</li>
<li>结合1、2的方案，舍弃第0位的使用，在末尾放置length变量，这会降低空间利用率</li>
</ol>
<h1 id="🔥链式存储"><a href="#🔥链式存储" class="headerlink" title="🔥链式存储"></a>🔥链式存储</h1><ul>
<li>每个结点一个字符</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StringNode<span class="token punctuation">{</span>
  <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> StringNode <span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>StringNode<span class="token punctuation">,</span> <span class="token operator">*</span> String<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>每个结点多个字符，存储密度提高</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StringNode<span class="token punctuation">{</span>
  <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> StringNode <span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>StringNode<span class="token punctuation">,</span> <span class="token operator">*</span> String<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥求子串"><a href="#🔥求子串" class="headerlink" title="🔥求子串"></a>🔥求子串</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">SubString</span><span class="token punctuation">(</span>SString <span class="token operator">&amp;</span>Sub<span class="token punctuation">,</span> SString S<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//越界</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">+</span>len<span class="token number">-1</span><span class="token operator">></span>S<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pos<span class="token operator">+</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//将子串每一位依次赋值给Sub</span>
    Sub<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token operator">-</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥比较操作"><a href="#🔥比较操作" class="headerlink" title="🔥比较操作"></a>🔥比较操作</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//比较，若S>T，则返回值>0；若S=T，则返回值=0；若S&lt;T，则返回值&lt;0</span>
<span class="token keyword">int</span> <span class="token function">StrCompare</span><span class="token punctuation">(</span>SString S<span class="token punctuation">,</span> SString T<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>S<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;=</span>T<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>T<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> S<span class="token punctuation">.</span>length<span class="token operator">-</span>T<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//若所有之前的字符都相同，则长度长的串更大，相同则为0</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥模式匹配（查找）"><a href="#🔥模式匹配（查找）" class="headerlink" title="🔥模式匹配（查找）"></a>🔥模式匹配（查找）</h1><h2 id="使用比较操作"><a href="#使用比较操作" class="headerlink" title="使用比较操作"></a>使用比较操作</h2><ul>
<li>利用比较操作可以很容易实现查找<strong>模式串</strong>（即需要查找的子串）</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>SString S<span class="token punctuation">,</span> SString T<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">=</span><span class="token function">StrLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
  SString sub<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//暂存子串</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">SubString</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span>S<span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StrCompare</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不相同就继续位移比较</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//返回子串在主串的位置</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//S中不存在T</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="朴素匹配模式算法"><a href="#朴素匹配模式算法" class="headerlink" title="朴素匹配模式算法"></a>朴素匹配模式算法</h2><ul>
<li>基于简单的数组操作，每次比较当比较到一个不相同就立刻进行位移</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>SString S<span class="token punctuation">,</span>SString T<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>S<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>T<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token operator">++</span>i<span class="token punctuation">;</span>
      <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//继续比较后继字符</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
      k<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//检查下一个子串</span>
      i<span class="token operator">=</span>k<span class="token punctuation">;</span>
      j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>T<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
      <span class="token keyword">return</span> k<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这种算法缺点是，当一些子串经常与模式串部分的匹配时，使得扫描指针需要经常回溯，增加时间开销</li>
<li>模式匹配最坏时间复杂度是<strong>n*m</strong>，即主串与模式串长度之积</li>
</ul>
<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><ul>
<li><p>对朴素匹配模式算法进行优化，希望扫描指针能够像人眼查看字符串一样不用时常回看，只需要回溯<strong>模式串的指针</strong></p>
</li>
<li><p>next数组用来存放模式串指针回溯的位置<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/KMP%E7%AE%97%E6%B3%95%E6%A8%A1%E5%BC%8F%E4%B8%B2%E6%8C%87%E9%92%88%E5%9B%9E%E6%BA%AF%E4%BD%8D%E7%BD%AE.png" alt="模式串指针回溯位置"></p>
</li>
<li><p>根据复杂的归纳，我们可以得到如下的求取next数组的方法<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/%E6%B1%82%E6%A8%A1%E5%BC%8F%E4%B8%B2%E7%9A%84next%E6%95%B0%E7%BB%84.png" alt="求模式串的next数组"></p>
</li>
<li><p>可以发现，next数组的<strong>前两个值一定分别是0和1</strong></p>
</li>
<li><p>next数组也能总结成以下式子<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/next%E6%95%B0%E7%BB%84%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="next数组表达式"></p>
</li>
<li><p>代码实现<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/KMP%E7%AE%97%E6%B3%95.png" alt="KMP算法"></p>
</li>
<li><p>KMP算法只有出现子串和模式串时常匹配的情况时才会比朴素算法高效很多，其他情况不具有太多优势，朴素算法使用依然很广泛</p>
</li>
</ul>
<h2 id="KMP算法优化"><a href="#KMP算法优化" class="headerlink" title="KMP算法优化"></a>KMP算法优化</h2><ul>
<li>如果next数组对应的字符是相同的，那么可以将它们的next值都设置为靠前的那个next值（尽可能小），这样可以尽可能<strong>减少回溯的距离</strong>，以此得到新的数组nextval进一步提升效率<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/KMP%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96.png" alt="KMP算法优化"></li>
<li>代码实现<br><img src="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/nextval%E6%95%B0%E7%BB%84%E6%B1%82%E6%B3%95.png" alt="nextval数组求法及举例"></li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第三章 栈与队列</title>
    <url>/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥栈"><a href="#🔥栈" class="headerlink" title="🔥栈"></a>🔥栈</h1><h2 id="✍基本概念"><a href="#✍基本概念" class="headerlink" title="✍基本概念"></a>✍基本概念</h2><span id="more"></span>
<ul>
<li>栈只允许在一端进行数据操作，不能在中间进行插入（进栈）和删除（出栈）操作，没有元素的栈即<strong>空栈</strong>，栈内元素<strong>先进后出（LIFO）</strong></li>
<li><strong>栈底</strong>：不允许操作的一端</li>
<li><strong>栈顶</strong>：允许操作的一端</li>
</ul>
<h2 id="✍基本操作"><a href="#✍基本操作" class="headerlink" title="✍基本操作"></a>✍基本操作</h2><ul>
<li>InitStack(&amp;S)： 初始化栈，构造空栈S，分配内存</li>
<li>DestroyStack(&amp;L)：销毁栈，销毁释放S占用空间</li>
<li>Push(&amp;S,x)：进栈，若S未满，则将x加入使之成为新的栈顶</li>
<li>Pop(&amp;S,&amp;x)：出栈，若S非空，则弹处栈顶元素，用x返回</li>
<li>GetTop(S,&amp;x)：读栈顶元素，若栈S非空，则用x返回栈顶元素（不删除）</li>
<li>StackEmpty(S)：判断栈S是否为空，返回bool</li>
</ul>
<h2 id="✍顺序栈"><a href="#✍顺序栈" class="headerlink" title="✍顺序栈"></a>✍顺序栈</h2><p>按顺序空间存储的栈（类似顺序表）</p>
<h3 id="1、顺序栈初始化"><a href="#1、顺序栈初始化" class="headerlink" title="1、顺序栈初始化"></a>1、顺序栈初始化</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 10    </span><span class="token comment" spellcheck="true">//元素最大个数</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态数组存放栈中元素</span>
  <span class="token keyword">int</span> top<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//栈顶指针</span>
<span class="token punctuation">}</span> SqStack<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
  S<span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//初始化栈</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>top指针指向-1即为空</li>
</ul>
<h3 id="2、顺序栈进栈"><a href="#2、顺序栈进栈" class="headerlink" title="2、顺序栈进栈"></a>2、顺序栈进栈</h3><pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>MaxSize<span class="token number">-1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//满栈，报错</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指针+1</span>
  S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//新元素入栈</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3、顺序栈出栈"><a href="#3、顺序栈出栈" class="headerlink" title="3、顺序栈出栈"></a>3、顺序栈出栈</h3><pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//注意&amp;x</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//空栈，报错</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  x<span class="token operator">=</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//栈顶元素先出</span>
  S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指针再减一</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h3><ul>
<li>读栈顶元素和出栈类似，只不过<strong>无需将指针减1</strong>，不再赘述</li>
<li>清空一个栈只需将<strong>top指向-1</strong>，空间的释放在函数结束会自动完成</li>
<li>上述是一种操作思路，另一种思路是将指针<strong>指向栈顶元素之后</strong>的那个位置，也就是下一个可以进栈的位置，这使得进栈可以先入栈再移动指针，出栈先指针减一再弹出元素。也因此top指向0即为空栈。</li>
<li><strong>共享栈</strong>：即两个栈共用一个空间，栈顶指针分别从空间两头向中间移动</li>
<li>共享栈栈满条件是 <code>top0 + 1 == top1;</code><br><img src="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E5%85%B1%E4%BA%AB%E6%A0%88.png" alt="共享栈"></li>
</ul>
<h2 id="✍链栈"><a href="#✍链栈" class="headerlink" title="✍链栈"></a>✍链栈</h2><ul>
<li>链式存储的栈（类似单链表）</li>
<li>链栈的实现方式和单链表几乎一样，不再详细记录，也分为<strong>带头结点</strong>和<strong>不带头结点</strong>，推荐是不带头结点。链栈进栈类似单链表头插法，出栈则对应后删操作。</li>
</ul>
<h2 id="✍栈的应用"><a href="#✍栈的应用" class="headerlink" title="✍栈的应用"></a>✍栈的应用</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><ul>
<li>IDE开发环境中可以检测括号是否出现配对错误（没有成双成对），当检测到左括号就入栈，当检测到右括号就出栈进行对比，若属于同一形状则匹配成功，反之则匹配失败报错。当检测到右括号而栈为空，则也是报错。<br><img src="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="括号匹配流程图"><br><img src="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E4%BB%A3%E7%A0%81.png" alt="括号匹配代码"></li>
</ul>
<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><ul>
<li><p>输入一个表达式，如 <em>((15÷ (7-(1+1))) × 3)-(2+ (1 +1))</em> 对其求出结果</p>
</li>
<li><p>使用<strong>波兰表达式（前缀表达式）</strong>和<strong>逆波兰表达式（后缀表达式）</strong><br><img src="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E5%89%8D%E7%BC%80%E3%80%81%E4%B8%AD%E7%BC%80%E3%80%81%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="前缀、中缀、后缀表达式"></p>
</li>
<li><p>表达式各个部分生效顺序可以不同，意味着一个中缀表达式可以对应多个前、后缀表达式。</p>
</li>
<li><p><strong>左优先原则</strong>：左边的运算符能先算就先算，这保证了一个中缀表达式得到的<strong>后缀表达式</strong>的唯一性</p>
</li>
<li><p><strong>右优先原则</strong>：左边的运算符能先算就先算，这保证了一个中缀表达式得到的<strong>前缀表达式</strong>的唯一性</p>
</li>
<li><p>栈实现<strong>后缀表达式</strong>运算：</p>
</li>
</ul>
<ol>
<li>从左往右扫描下一个元素，直到处理完所有元素</li>
<li>若扫描到操作数则压入栈，并回到1；否则执行3</li>
<li>若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到1</li>
</ol>
<ul>
<li>栈实现<strong>前缀表达式</strong>的计算:</li>
</ul>
<ol>
<li>从右往左扫描下一个元素，直到处理完所有元素</li>
<li>若扫描到操作数则压入栈，并回到1;否则执行3</li>
<li>若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到1</li>
</ol>
<blockquote>
<p><strong>中缀表达式转后缀表达式</strong><br>初始化一个栈，用于保存暂时还不能确定运算顺序的运算符。</p>
<p>从左到右处理各个元素，直到末尾。可能遇到三种情况:</p>
<ol>
<li>遇到操作数。直接加入后缀表达式。</li>
<li>遇到界限符。遇到“(”直接入栈;遇到“)”则依次弹出栈内运算符并加入后缀表达式，自到弹出“(”为止。注意:“(”不加入后缀表达式。</li>
<li>遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到“(”或栈空则停止。之后再把当前运算符入栈。</li>
</ol>
<p>按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。</p>
</blockquote>
<ul>
<li>中缀表达式求值 &#x3D; 中缀表达式转后缀表达式 + 后缀表达式运算 ，这是算法上的结合，实际上可以同时进行，所以不是简单地将两者独立进行。</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul>
<li>函数调用：最后被调用的函数最先被执行（LIFO），函数调用时需要用一个栈存储调用<strong>返回地址</strong>、<strong>实参</strong>、<strong>局部变量</strong></li>
<li>递归调用时，函数调用栈可称为 <strong>“递归工作栈”</strong>。每进入一层递归，就将递归调用所需信息压入栈顶；每退出一层递归，就从栈顶弹出相应信息</li>
<li>太多层递归会导致空间复杂度升高，可能导致<strong>栈溢出</strong></li>
</ul>
<h1 id="🔥队列"><a href="#🔥队列" class="headerlink" title="🔥队列"></a>🔥队列</h1><h2 id="✍基本概念-1"><a href="#✍基本概念-1" class="headerlink" title="✍基本概念"></a>✍基本概念</h2><ul>
<li>队列只允许在一端进行插入（入队），另一端进行删除（出队），无元素的队列即空队列，队内元素<strong>先进先出（FIFO）</strong></li>
<li><strong>队头</strong>：允许删除操作的一端</li>
<li><strong>队尾</strong>：允许插入操作的一端</li>
</ul>
<h2 id="✍基本操作-1"><a href="#✍基本操作-1" class="headerlink" title="✍基本操作"></a>✍基本操作</h2><ul>
<li>lnitQueue(&amp;Q):初始化队列，构造一个空队列Q。</li>
<li>DestroyQueue(&amp;Q):销毁队列。销毁并释放队列Q所占用的内存空间。</li>
<li>EnQueue(&amp;Q,x):入队，若队列Q未满，将x加入，使之成为新的队尾。</li>
<li>DeQueue(&amp;Q,&amp;x):出队，若队列Q非空，删除队头元素，并用x返回。</li>
</ul>
<h2 id="✍顺序队列"><a href="#✍顺序队列" class="headerlink" title="✍顺序队列"></a>✍顺序队列</h2><p>预分配空间</p>
<h3 id="1、顺序队列初始化"><a href="#1、顺序队列初始化" class="headerlink" title="1、顺序队列初始化"></a>1、顺序队列初始化</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 10</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
  ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//静态数组存放队列元素</span>
  <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//队头指针和队尾指针</span>
<span class="token punctuation">}</span> SqQueue<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//初始化队列</span>
  Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//队头、队尾指针指向0</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>队尾指针指向下一个可插入元素的位置，队头指针指向队头元素</li>
<li>用<code>Q.rear==Q.front</code>判空</li>
</ul>
<h3 id="2、顺序队列入队"><a href="#2、顺序队列入队" class="headerlink" title="2、顺序队列入队"></a>2、顺序队列入队</h3><ul>
<li>当队列只有一个空间时就判断为满队列，否则两个指针将重叠，这导致判空和判满冲突。</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>MaxSize<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//判断满的条件</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//x插入队尾</span>
  Q<span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//队尾指针+1后取模，保证队列空间循环使用</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如上，队列空间类似环形，新释放的空间能被使用，称为<strong>循环队列</strong></li>
</ul>
<h3 id="3、顺序队列出队"><a href="#3、顺序队列出队" class="headerlink" title="3、顺序队列出队"></a>3、顺序队列出队</h3><pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//判断空</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  x<span class="token operator">=</span>Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
  Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//队头指针后移</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4、顺序队列查询"><a href="#4、顺序队列查询" class="headerlink" title="4、顺序队列查询"></a>4、顺序队列查询</h3><ul>
<li>查询通常只查队头元素</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//判空</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  x<span class="token operator">=</span>Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="5、其他"><a href="#5、其他" class="headerlink" title="5、其他"></a>5、其他</h3><ul>
<li>第二种方案可以利用所有申请到的空间，就是在结构体添加一个<strong>size</strong>变量，实时反馈当前队列的元素，用size的大小进行判空和判满，就不会发生冲突。同时这也增大了结构体空间，但是增加了一个数量信息。</li>
<li>第三种方案，结构体添加一个变量<strong>tag</strong>记录上一步操作，当上一步进行删除就为0，进行添加就为1，当两个指针相等时，只有上一步进行了添加才能是满的，上一步进行了删除才是空的。该变量可以用bool值比较省空间</li>
</ul>
<h2 id="✍链式队列"><a href="#✍链式队列" class="headerlink" title="✍链式队列"></a>✍链式队列</h2><ul>
<li>操作思想和单链表差不多，动态分配空间</li>
<li>一般不判满，因为一般是够用的</li>
</ul>
<h3 id="1、链式队列初始化"><a href="#1、链式队列初始化" class="headerlink" title="1、链式队列初始化"></a>1、链式队列初始化</h3><p><img src="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="链式队列初始化"></p>
<h3 id="2、链式队列入队"><a href="#2、链式队列入队" class="headerlink" title="2、链式队列入队"></a>2、链式队列入队</h3><ul>
<li>带头结点</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  LinkNode <span class="token operator">*</span>s<span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//申请新的结点的空间</span>
  s<span class="token operator">-></span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>
  s<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
  Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//新结点插入到rear后</span>
  Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>s<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//修改队尾指针</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>不带头结点</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  LinkNode <span class="token operator">*</span>s<span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//申请新的结点的空间</span>
  s<span class="token operator">-></span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>
  s<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//空队列的第一个元素</span>
    Q<span class="token punctuation">.</span>front<span class="token operator">=</span>s<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//膝盖队头队尾指针</span>
    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span><span class="token punctuation">{</span>
    Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//新结点插入到rear后</span>
    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>s<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//修改队尾指针</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3、链式队列出队"><a href="#3、链式队列出队" class="headerlink" title="3、链式队列出队"></a>3、链式队列出队</h3><ul>
<li>带头结点</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  LinkNode <span class="token operator">*</span>p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>
  x<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//用x返回队头元素</span>
  Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改头结点的next指针</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>p<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//此次是最后一个结点出队</span>
    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//修改rear指针</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//释放结点空间</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>不带头结点</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  LinkNode <span class="token operator">*</span>p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//p指向此次出队的结点</span>
  x<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>
  Q<span class="token punctuation">.</span>front<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改front指针</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token constant">NULL</span>
  <span class="token punctuation">}</span>
  <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//释放结点空间</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="✍双端队列"><a href="#✍双端队列" class="headerlink" title="✍双端队列"></a>✍双端队列</h2><ul>
<li>允许从两端插入和删除的队列</li>
<li>分为三种：</li>
</ul>
<ol>
<li>输入输出两端都能进行</li>
<li>输入受限：一端插入，两端删除</li>
<li>输出受限：一端删除，两端插入</li>
</ol>
<h2 id="✍队列的应用"><a href="#✍队列的应用" class="headerlink" title="✍队列的应用"></a>✍队列的应用</h2><ul>
<li><strong>树的层次遍历</strong>：对于每一层，将当层的每个结点的子结点加入队尾，然后删去改层的结点，如此往复遍历树的每一层。树的概念将在后面的章节详细记录</li>
<li><strong>图的广度优先遍历</strong>：类似树的层次遍历，都将在后续记录</li>
<li><strong>操作系统</strong>：多进程抢占资源时，<strong>FCFS</strong>（先来先服务）是常用的策略，类似队列的先进先出原则。也可以应用在打印机的缓冲区存放打印请求队列</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第二章 线性表</title>
    <url>/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="🔥线性表"><a href="#🔥线性表" class="headerlink" title="🔥线性表"></a>🔥线性表</h1><ul>
<li>线性表是具有相同数据类型（每个元素占用空间一样大）的n（n≥0）个数据元素的有限序列，n为表长，n&#x3D;0时是一个空表。<span id="more"></span><br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8.png" alt="线性表"></li>
</ul>
<h1 id="🔥顺序表"><a href="#🔥顺序表" class="headerlink" title="🔥顺序表"></a>🔥顺序表</h1><h2 id="顺序表定义"><a href="#顺序表定义" class="headerlink" title="顺序表定义"></a>顺序表定义</h2><p>用顺序存储的方式实现线性表顺序存储。逻辑上相邻的元素存储在物理位置也相邻的存储单元中。实现分为 <strong>静态分配</strong> 和 <strong>动态分配</strong> 举例：</p>
<ul>
<li>静态分配</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 10              </span><span class="token comment" spellcheck="true">//定义最大长度</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//静态数组存放数据元素</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//顺序表当前长度</span>
<span class="token punctuation">}</span>SqList<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//顺序表类型定义</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>动态分配</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span> InitSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>如上用 <em>malloc</em> 和 <em>free</em> 函数可以为链表获取空间和释放空间，两者必须成对出现，否则内存没法释放</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> InitSize 10</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//指示动态分配数组的指针</span>
    <span class="token keyword">int</span> MaxSize<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//顺序表最大容量</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//顺序表当前长度</span>
<span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//顺序表类型定义（动态分配方式）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%AE%9E%E7%8E%B0.png" alt="动态分配实现"></p>
<ul>
<li>顺序表特点：</li>
</ul>
<ol>
<li>随机访问，可在常数级时间内查到第i个元素</li>
<li>存储密度高，每个节点只存储数据元素</li>
<li>可拓展，但不方便</li>
<li>插入、删除不方便，要移动大量元素</li>
</ol>
<h2 id="顺序表插入"><a href="#顺序表插入" class="headerlink" title="顺序表插入"></a>顺序表插入</h2><pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注意&amp;符号，地址操作</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//判断范围有效</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">>=</span>MaxSize<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//存储空间已满</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//第i个元素及之后的元素后移</span>
        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//第i个位置放入e</span>
    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="顺序表删除"><a href="#顺序表删除" class="headerlink" title="顺序表删除"></a>顺序表删除</h2><pre class="line-numbers language-c"><code class="language-c">bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//判断范围有效</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    e<span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//删除的元素赋值给e</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//第i个位置后的元素前移</span>
        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//第i个位置放入e</span>
    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="顺序表查找"><a href="#顺序表查找" class="headerlink" title="顺序表查找"></a>顺序表查找</h2><ul>
<li>分为 <strong>按位查找</strong> 和 <strong>按值查找</strong><br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C.png" alt="顺序表查找"></li>
</ul>
<h1 id="🔥单链表"><a href="#🔥单链表" class="headerlink" title="🔥单链表"></a>🔥单链表</h1><h2 id="单链表定义"><a href="#单链表定义" class="headerlink" title="单链表定义"></a>单链表定义</h2><p>数据存储位置不连续，需要有<strong>后继指针next</strong>指向下一个节点，最后一个结点指向NULL（是一个空指针）</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> LNode<span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//定义单链表结点类型</span>
    ElemType data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//每个节点存放一个数据元素（数据域）</span>
    <span class="token keyword">struct</span> LNode <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//指针指向下一个节点</span>
<span class="token punctuation">}</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span>
bool <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//初始化单链表</span>
    L <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//空表</span>
    returnt true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    LinkList L<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//声明一个指针指向单链表</span>
    <span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化单链表</span>
    <span class="token comment" spellcheck="true">//后续……</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>和顺序表一样，可以用malloc函数添加节点，p指针指向该节点</li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> LNode <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>两种实现方式：带头结点、不带头结点</li>
<li>带头结点不存储数据，相当于创造一个“第0个结点”作为引入，只是为了操作方便</li>
</ul>
<h2 id="单链表插入"><a href="#单链表插入" class="headerlink" title="单链表插入"></a>单链表插入</h2><ul>
<li><p><strong>带头结点</strong><br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E6%8F%92%E5%85%A5.png" alt="单链表带头结点插入"></p>
</li>
<li><p><strong>不带头结点</strong><br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%8D%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E6%8F%92%E5%85%A5.png" alt="单链表不带头结点插入"></p>
</li>
<li><p>将两个方法中的<strong>在某个位置后面插入一个元素</strong>封装成函数<br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%90%8E%E6%8F%92%E6%93%8D%E4%BD%9C.png" alt="指定结点后插操作"></p>
</li>
<li><p>或者前插也行，但方法有所不同：<br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%89%8D%E6%8F%92%E6%93%8D%E4%BD%9C.png" alt="指定结点前插操作"></p>
</li>
</ul>
<h2 id="单链表删除"><a href="#单链表删除" class="headerlink" title="单链表删除"></a>单链表删除</h2><p><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png" alt="单链表删除操作"></p>
<h2 id="单链表查找"><a href="#单链表查找" class="headerlink" title="单链表查找"></a>单链表查找</h2><ul>
<li><strong>按位查找</strong></li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">LNode <span class="token operator">*</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    LNode <span class="token operator">*</span>p<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//p指向扫描到的结点</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前指向的结点索引（第几个）</span>
    p <span class="token operator">=</span> L<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//L指向头结点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//循环直到第i个点</span>
        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>按值查找</strong></li>
</ul>
<pre class="line-numbers language-c"><code class="language-c">LNode <span class="token operator">*</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//从第1个结点开始查找数据为e的结点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>data<span class="token operator">!=</span>e<span class="token punctuation">)</span>
        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//找到返回指针，否则NULL</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="单链表建立"><a href="#单链表建立" class="headerlink" title="单链表建立"></a>单链表建立</h2><ul>
<li><p><strong>尾插法</strong><br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%B0%BE%E6%8F%92%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="尾插法建立单链表"></p>
</li>
<li><p><strong>头插法</strong><br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%A4%B4%E6%8F%92%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="头插法建立单链表"></p>
</li>
</ul>
<h1 id="🔥双链表"><a href="#🔥双链表" class="headerlink" title="🔥双链表"></a>🔥双链表</h1><ul>
<li>链表中既有<strong>后继指针next</strong>又有<strong>前驱指针prior</strong>，使链表可以向两个方向遍历，不重点记录<br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8F%8C%E9%93%BE%E8%A1%A8.png" alt="双链表"></li>
</ul>
<h1 id="🔥循环链表"><a href="#🔥循环链表" class="headerlink" title="🔥循环链表"></a>🔥循环链表</h1><ul>
<li><p>循环单链表：单链表最后一个结点的next指向头结点即成为循环单链表，使得链表从任意结点出发都可以找到任何其他结点</p>
</li>
<li><p>循环双链表：表头结点的prior指针指向表尾结点，表尾结点的next指针指向表头结点（形成双闭环）<br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="循环链表"></p>
</li>
</ul>
<h1 id="🔥静态链表"><a href="#🔥静态链表" class="headerlink" title="🔥静态链表"></a>🔥静态链表</h1><ul>
<li>分配一整片连续的空间，各个结点集中安置</li>
<li>用-1标记最后一个结点，-2标记空闲结点</li>
<li>静态链表用于不支持指针的语言、数据元素数量固定不变的场景（现在很少用）<br><img src="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="静态链表示意图"></li>
</ul>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize 10          </span><span class="token comment" spellcheck="true">//静态链表最大长度</span>
<span class="token keyword">struct</span> Node<span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//静态链表结构类型定义</span>
    ElemType data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//存储数据元素</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//下一个元素的数组下标（物理位置）</span>
<span class="token punctuation">}</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="🔥顺序表和链表比较"><a href="#🔥顺序表和链表比较" class="headerlink" title="🔥顺序表和链表比较"></a>🔥顺序表和链表比较</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">顺序表</th>
<th align="center">链表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">弹性（可扩容）</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">增删</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">查</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
</tbody></table>
<ul>
<li>链表：表长不确定，增删比较多（餐厅取号）</li>
<li>顺序表：表长稳定，查询操作多（课堂点名）</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第一章 概述</title>
    <url>/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">系列链接</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/" title="数据结构第一章 概述">第一章 概述</a></td>
<td align="center"><a href="/2023/03/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/" title="数据结构第二章 线性表">第二章 线性表</a></td>
<td align="center"><a href="/2023/03/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/" title="数据结构第三章 栈与队列">第三章 栈与队列</a></td>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%B2/" title="数据结构第四章 串">第四章 串</a></td>
</tr>
<tr>
<td align="center"><a href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/" title="数据结构第五章 树与二叉树">第五章 树与二叉树</a></td>
<td align="center"><a href="/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%9B%BE/" title="数据结构第六章 图">第六章 图</a></td>
<td align="center"><a href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%9F%A5%E6%89%BE/" title="数据结构第七章 查找">第七章 查找</a></td>
<td align="center"><a href="/2023/03/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8E%92%E5%BA%8F/" title="数据结构第八章 排序">第八章 排序</a></td>
</tr>
</tbody></table>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>　　数据结构(data structure)是带有结构特性的数据元素的集合<span id="more"></span>，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。<br>数据的逻辑结构和物理结构是数据结构的两个密切相关的方面，同一逻辑结构可以对应不同的存储结构。算法的设计取决于数据的逻辑结构，而算法的实现依赖于指定的存储结构。</p>
<p>　　数据结构的研究内容是构造复杂软件系统的基础，它的核心技术是分解与抽象。通过分解可以划分出数据的3个层次；再通过抽象，舍弃数据元素的具体内容，就得到逻辑结构。类似地，通过分解将处理要求划分成各种功能，再通过抽象舍弃实现细节，就得到运算的定义。上述两个方面的结合可以将问题变换为数据结构。这是一个从具体（即具体问题）到抽象（即数据结构）的过程。然后，通过增加对实现细节的考虑进一步得到存储结构和实现运算，从而完成设计任务。这是一个从抽象（即数据结构）到具体（即具体实现）的过程。</p>
</blockquote>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><img src="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.png" class title="数据结构">
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><img src="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" class title="时间复杂度">
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><img src="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" class title="空间复杂度">
<h1 id="算法基本概念"><a href="#算法基本概念" class="headerlink" title="算法基本概念"></a>算法基本概念</h1><img src="/2023/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/%E7%AE%97%E6%B3%95%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png" class title="算法基本概念">]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode编译运行和调试多种语言</title>
    <url>/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="#说明"></a>#说明</h1><blockquote>
<p>使用VSCode轻量化编辑平台运行C、C++以及其他语言</p>
</blockquote>
<h1 id="一、为Windows安装C编译器"><a href="#一、为Windows安装C编译器" class="headerlink" title="一、为Windows安装C编译器"></a>一、为Windows安装C编译器</h1><span id="more"></span>
<h3 id="Ⅰ-下载安装包-mingw-w64"><a href="#Ⅰ-下载安装包-mingw-w64" class="headerlink" title="Ⅰ- 下载安装包 (mingw-w64)"></a>Ⅰ- 下载安装包 (mingw-w64)</h3><blockquote>
<p>因为vscode只是一个代码编辑器，没有自带有C&#x2F;C++的编译器，因此首先需要安装一个C&#x2F;C++编译器并且设置环境变量</p>
<p>mingw-w64只负责程序的编译,只提供命令行操作没有编辑代码的图像界面,代码的编写需要由文本编辑器(如<a href="https://code.visualstudio.com/">vscode</a>)来完成</p>
<p>因为网络问题很难下载,此处分享百度云链接：<a href="https://pan.baidu.com/s/18VZoRqyqnTKJXEDT9f1ecg">https://pan.baidu.com/s/18VZoRqyqnTKJXEDT9f1ecg</a>  提取码：h123</p>
</blockquote>
<h3 id="Ⅱ-解压"><a href="#Ⅱ-解压" class="headerlink" title="Ⅱ -  解压"></a>Ⅱ -  解压</h3><blockquote>
<p>下载后选一个合适的位置解压,这个位置也就相当于是安装位置(此处可以给文件夹改个简短的名字),本人放在C盘</p>
<p>然后进入文件夹下的bin文件夹 ,复制路径,此路径要用来配置环境变量</p>
<p><img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903153829788.png" alt="image-20210903153829788"></p>
</blockquote>
<h3 id="Ⅲ-配置环境变量"><a href="#Ⅲ-配置环境变量" class="headerlink" title="Ⅲ - 配置环境变量"></a>Ⅲ - 配置环境变量</h3><blockquote>
<p>然后在[此电脑]鼠标右键选择属性 –&gt;选择高级系统设置 –&gt; 点环境变量 –&gt; 选择系统环境变量下的Path –&gt; 选择编辑 –&gt;新建:然后把刚刚复制的文件路径粘贴进去 –&gt;一路点击确定退出</p>
<p><img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903154508550.png" alt="image-20210903154508550"> </p>
</blockquote>
<h4 id="Ⅳ-验证"><a href="#Ⅳ-验证" class="headerlink" title="Ⅳ - 验证"></a>Ⅳ - 验证</h4><blockquote>
<p>按win+r运行cmd或者powershell输入gcc -v ,出现以下信息说明一切顺利</p>
<p><img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903154559126.png" alt="image-20210903154559126"></p>
<p>之后就能通过g++ xxx.cpp -o xxx.exe这样的命令行指令编译c&#x2F;cpp文件了 </p>
</blockquote>
<h1 id="二、安装与配置VSCode"><a href="#二、安装与配置VSCode" class="headerlink" title="二、安装与配置VSCode"></a>二、安装与配置VSCode</h1><h3 id="Ⅰ-安装VSCode"><a href="#Ⅰ-安装VSCode" class="headerlink" title="Ⅰ - 安装VSCode"></a>Ⅰ - 安装VSCode</h3><blockquote>
<p>首先在<a href="https://code.visualstudio.com/">微软官网</a>下载并安装好<code>visual stdio code</code>，建议在安装时将选项全勾选上,傻瓜式操作就不说了</p>
</blockquote>
<h3 id="Ⅱ-安装必要的插件"><a href="#Ⅱ-安装必要的插件" class="headerlink" title="Ⅱ - 安装必要的插件"></a>Ⅱ - 安装必要的插件</h3><blockquote>
<ul>
<li>C&#x2F;C++</li>
<li>Code Runner</li>
</ul>
<p><img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903154905460.png" alt="image-20210903154905460"> </p>
</blockquote>
<h3 id="Ⅲ-编译运行程序"><a href="#Ⅲ-编译运行程序" class="headerlink" title="Ⅲ - 编译运行程序"></a>Ⅲ - 编译运行程序</h3><blockquote>
<p>编译运行程序介绍两种方法</p>
<ol>
<li>使用之前安装好的<code>Code Runner插件</code>一键编译运行程序</li>
<li>打开vscode的<code>集成终端</code>使用命令行编译和运行</li>
</ol>
</blockquote>
<h4 id="1、测试一下是否可用"><a href="#1、测试一下是否可用" class="headerlink" title="1、测试一下是否可用"></a>1、测试一下是否可用</h4><blockquote>
<p><strong>点击：文件&gt;新建文件</strong>，出现一个空白文档，将下面的代码复制粘贴到空白文档中,然后点击右上角运行</p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What is your name?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello,%s,nice to meet you!\n"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="2、可能出现的问题1"><a href="#2、可能出现的问题1" class="headerlink" title="2、可能出现的问题1:"></a>2、可能出现的问题1:</h4><blockquote>
<p>程序段中使用了<code>scanf</code>函数从键盘读取一串字符，这时无法输入数据，也无法结束程序，需要重启一下vscode<img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903170118118.png" alt="image-20210903170118118"> </p>
<p>然后依次打开：<strong>文件&gt;首选项&gt;设置&gt;用户&gt;拓展&gt;Run Code Configuration</strong>–&gt;找到**<code>Run In Terminal</code>**勾选上</p>
<p><img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903170159366.png" alt="image-20210903170159366"></p>
</blockquote>
<h4 id="3、找不到头文件问题"><a href="#3、找不到头文件问题" class="headerlink" title="3、找不到头文件问题:"></a>3、<strong>找不到头文件问题</strong>:</h4><blockquote>
<p>对于安装了vs2019却使用mingw的情况，这时vscode代码检测会默认使用vs2019的msvc编译器的头文件，如果你使用mingw独有的特殊头文件会报找不到头文件的错误。<br>鼠标移动到报错头文件会显示一个灯泡，点击，选编辑”includePath”设置，然后在指定编译器下拉列表中选择gcc或者g++<img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903171136019.png" alt="image-20210903171136019">  </p>
</blockquote>
<h4 id="3、vscode集成终端问题"><a href="#3、vscode集成终端问题" class="headerlink" title="3、vscode集成终端问题"></a>3、<strong>vscode集成终端问题</strong></h4><blockquote>
<p>windows 10 1903&#x2F;1909版本，不能使用<code>cmd</code>（包括<code>cmder</code>），<code>git bash</code>作为默认终端，这两个终端输入<code>clear</code> &#x2F; <code>cls</code>指令后再关闭终端会造成vscode无响应<br><code>PowerShell</code>作为默认终端时，虽然不存在<code>clear</code>的问题，但如果往终端输入了任何数据或指令又没有按回车就直接关闭了，同样会造成vscode无响应<br><code>WSL</code>没有发现类似的bug</p>
</blockquote>
<h4 id="4、成功"><a href="#4、成功" class="headerlink" title="4、成功"></a>4、成功</h4><blockquote>
<p><img src="/2023/03/04/VSCode%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80/image-20210903170537452.png" alt="image-20210903170537452"> </p>
<p>至此 已经可以在VSCode的集成终端中正常运行C&#x2F;C++程序了</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序知识点</title>
    <url>/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="一、初识微信小程序"><a href="#一、初识微信小程序" class="headerlink" title="一、初识微信小程序"></a>一、初识微信小程序</h1><h2 id="1、什么是微信小程序"><a href="#1、什么是微信小程序" class="headerlink" title="1、什么是微信小程序"></a>1、什么是微信小程序</h2><h3 id="Ⅰ-小程序历史"><a href="#Ⅰ-小程序历史" class="headerlink" title="Ⅰ-小程序历史"></a>Ⅰ-小程序历史</h3><span id="more"></span>
<blockquote>
<ol>
<li>2017 年度百度百科十大热词之一 </li>
<li>微信小程序，简称小程序，英文名 Mini Program，是一种不需要下载安装即可使用的应用 (<code>张小龙对其的定义是无需安装,用完即走,实际上是需要安装的,只不过小程序的体积特别小,下载速度很快,用户感觉不到下载的过程</code> ) </li>
<li>小程序刚发布的时候要求压缩包的体积不能大于 1M,，否则无法通过，在2017年4月做了改进，由原来的1M提升到2M；</li>
<li>2017年1月9日0点，万众瞩目的微信第一批小程序正式低调上线。</li>
</ol>
</blockquote>
<h3 id="Ⅱ-小程序的优势"><a href="#Ⅱ-小程序的优势" class="headerlink" title="Ⅱ-小程序的优势"></a>Ⅱ-小程序的优势</h3><blockquote>
<ol>
<li>微信有海量⽤⼾，⽽且粘性很⾼，在微信⾥开发产品更容易触达⽤⼾；</li>
<li>推⼴app 或公众号的成本太⾼。 </li>
<li>开发适配成本低。</li>
<li>容易⼩规模试错，然后快速迭代。</li>
<li>跨平台。</li>
</ol>
</blockquote>
<h2 id="2、小程序准备"><a href="#2、小程序准备" class="headerlink" title="2、小程序准备"></a>2、小程序准备</h2><h3 id="Ⅰ-环境准备"><a href="#Ⅰ-环境准备" class="headerlink" title="Ⅰ-环境准备"></a>Ⅰ-环境准备</h3><blockquote>
<ol>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">安装微信小程序开发工具</a>,建议安装稳定版进行开发</p>
</li>
<li><p>注册小程序账号</p>
</li>
<li><p>使用注册的appid进行使用，如果是测试号会限制很多功能</p>
</li>
</ol>
<p>  在官网<a href="https://mp.weixin.qq.com/">登录</a>成功后可以看到下面的界面，然后复制你的APPID,悄悄的保存起来，<code>不要给别⼈看到</code>😄。<img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210420175717770.png" alt="image-20210420175717770"><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210420175813507.png" alt="image-20210420175813507"></p>
</blockquote>
<h3 id="Ⅱ-新建小程序流程"><a href="#Ⅱ-新建小程序流程" class="headerlink" title="Ⅱ-新建小程序流程"></a>Ⅱ-新建小程序流程</h3><blockquote>
<ol>
<li><p>打开开发者工具，第一次打开需要扫码登陆</p>
</li>
<li><p>新建小程序项目</p>
</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210420180254814.png" alt="image-20210420180254814"></p>
<ol start="3">
<li>填写项目信息</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210420180344226.png" alt="image-20210420180344226"></p>
<ol start="4">
<li>新建成功</li>
</ol>
</blockquote>
<h3 id="Ⅲ-微信开发者工具介绍"><a href="#Ⅲ-微信开发者工具介绍" class="headerlink" title="Ⅲ-微信开发者工具介绍"></a>Ⅲ-微信开发者工具介绍</h3><h4 id="1）开发工具界面图解"><a href="#1）开发工具界面图解" class="headerlink" title="1）开发工具界面图解"></a>1）开发工具界面图解</h4><blockquote>
<p>详细的使⽤，可以查看<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html">官⽹</a>:</p>
<p><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%B3%A8%E9%87%8A%E5%9B%BE.png" alt="image-20210420181145002"></p>
</blockquote>
<h4 id="2）开发工具的一些基本配置"><a href="#2）开发工具的一些基本配置" class="headerlink" title="2）开发工具的一些基本配置"></a>2）开发工具的一些基本配置</h4><blockquote>
<ol>
<li>点击<code>工具栏</code>–&gt;<code>详情</code>–&gt;<code>本地设置</code>，除了默认勾选，需要勾选其他的几个如：增强编译、不校验合法域名…</li>
</ol>
<p> <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E8%AF%A6%E6%83%85_%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E6%B3%A8%E8%A7%A3%E5%9B%BE.png" alt="image-20210420183249939"></p>
<ol start="2">
<li><p>常用快捷键<code>keyMap修改</code>设置(本人习惯记录)：</p>
<ol>
<li><p><code>ctrl+P</code>：全局搜索</p>
</li>
<li><p><code>alt+/</code>or <code>shift+j</code>:代码提示</p>
<p><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210421141701374.png" alt="image-20210421141701374"></p>
</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="Ⅳ-微信小程序名称或者原始id该如何找回？"><a href="#Ⅳ-微信小程序名称或者原始id该如何找回？" class="headerlink" title="Ⅳ-微信小程序名称或者原始id该如何找回？"></a>Ⅳ-微信小程序名称或者原始id该如何找回？</h3><blockquote>
<p>问题描述：很久没有进行开发了，小程序的名称跟原始id都忘记了，找回需要先填写,如何解决</p>
<p>解决：首先<a href="https://developers.weixin.qq.com/community/develop/doc/000ea0f82d4f58b41589642b456809"><code>查询自己的原始id</code></a>,在这个网站能查询到自己的原始id，再通过这个原始id进行找回</p>
</blockquote>
<hr>
<h1 id="二、小程序的基本目录结构与文件作用剖析"><a href="#二、小程序的基本目录结构与文件作用剖析" class="headerlink" title="二、小程序的基本目录结构与文件作用剖析"></a>二、小程序的基本目录结构与文件作用剖析</h1><blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html">小程序框架</a>的⽬标是通过尽可能简单、⾼效的⽅式让开发者可以在微信中开发具有原⽣APP体验的服务。 </p>
<p>⼩程序框架提供了⾃⼰的视图层描述语⾔ <code>WXML 和 WXSS</code> ，以及 JavaScript ，并<code>在视图层与逻辑层间提供了数据传输和事件系统</code>，让开发者能够专注于数据与逻辑。</p>
</blockquote>
<h2 id="1、小程序文件结构和传统web对比"><a href="#1、小程序文件结构和传统web对比" class="headerlink" title="1、小程序文件结构和传统web对比"></a>1、小程序文件结构和传统web对比</h2><blockquote>
<table>
<thead>
<tr>
<th></th>
<th>传统web</th>
<th>微信小程序</th>
</tr>
</thead>
<tbody><tr>
<td>项目骨架、结构</td>
<td>HTML</td>
<td>WXML</td>
</tr>
<tr>
<td>页面样式</td>
<td>CSS</td>
<td>WXSS</td>
</tr>
<tr>
<td>项目逻辑</td>
<td>Javascript</td>
<td>Javascript</td>
</tr>
<tr>
<td>配置</td>
<td>无</td>
<td>JSON</td>
</tr>
</tbody></table>
<ol>
<li><p>通过以上对⽐得出传统web是<code>三层结构</code>。⽽微信⼩程序是<code>四层结构</code>，多了⼀层<code>配置.json</code></p>
</li>
<li><p>当这几个文件在同一级目录下且命名相同(后缀不同),可以互相引用却不用导入</p>
</li>
</ol>
</blockquote>
<h2 id="2、基本的项目目录"><a href="#2、基本的项目目录" class="headerlink" title="2、基本的项目目录"></a>2、基本的项目目录</h2><h3 id="Ⅰ-项目目录解释"><a href="#Ⅰ-项目目录解释" class="headerlink" title="Ⅰ-项目目录解释"></a>Ⅰ-项目目录解释</h3><blockquote>
<ol>
<li>项目目录图解:</li>
</ol>
 <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/ 基本的项目目录图例.png" alt="image-20210420190111436" style="zoom: 67%;">

<ol start="2">
<li>以<code>app</code>开头的文件是应用程序级别的文件,更改一处全局生效。而页面<code>pages</code>的配置优先级高于全局配置(<code>就近原则</code>)</li>
<li>小程序是允许你修改文件目录名的</li>
</ol>
</blockquote>
<h2 id="3、小程序配置文件"><a href="#3、小程序配置文件" class="headerlink" title="3、小程序配置文件"></a>3、小程序配置文件</h2><blockquote>
<p>⼀个⼩程序应⽤程序会包括最基本的两种配置⽂件。⼀种是全局的app.json 和 ⻚⾯⾃⼰的page.json</p>
</blockquote>
<h3 id="Ⅰ-全局配置app-json"><a href="#Ⅰ-全局配置app-json" class="headerlink" title="Ⅰ-全局配置app.json"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">全局配置app.json</a></h3><blockquote>
<ol>
<li><p><code>app.json</code> 是当前⼩程序的全局配置，包括了⼩程序的所有⻚⾯路径、界⾯表现、⽹络超时时间、底部tab等。普通快速启动项⽬⾥边的 app.json 配置</p>
</li>
<li><p>代码</p>
</li>
</ol>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"pages"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>
    <span class="token string">"pages/logs/logs"</span>
 <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"window"</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"backgroundTextStyle"</span><span class="token operator">:</span><span class="token string">"light"</span><span class="token punctuation">,</span>
    <span class="token property">"navigationBarBackgroundColor"</span><span class="token operator">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>
    <span class="token property">"navigationBarTitleText"</span><span class="token operator">:</span> <span class="token string">"WeChat"</span><span class="token punctuation">,</span>
    <span class="token property">"navigationBarTextStyle"</span><span class="token operator">:</span><span class="token string">"black"</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li><p>字段的含义</p>
<p> 1）pages 字段⸺⽤于描述当前⼩程序所有⻚⾯路径，这是为了让微信客⼾端知道当前你的⼩程序⻚⾯定义在哪个⽬录。</p>
</li>
</ol>
<p>​	<code>默认显示此字段中的第一项</code></p>
<p>​	2）window 字段⸺定义⼩程序所有⻚⾯的顶部背景颜⾊，⽂字颜⾊定义等。</p>
<p>​	3）完整的配置信息请参考 app.json配置</p>
<p>​	4) <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar">tabBar</a>-底部 <code>tab</code> 栏的表现:<br><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/tabBar_%E5%BA%95%E9%83%A8tab%E6%A0%8F%E7%9A%84%E8%A1%A8%E7%8E%B0%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="image-20210421102125607"></p>
<p>更多配置详细请看<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html"><code>app配置文档</code></a></p>
</blockquote>
<h3 id="Ⅱ-页面配置page-json"><a href="#Ⅱ-页面配置page-json" class="headerlink" title="Ⅱ-页面配置page.json"></a>Ⅱ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">页面配置page.json</a></h3><blockquote>
<ol>
<li><p>这⾥的 <code>page.json</code> 其实⽤来表⽰⻚⾯⽬录下的 page.json 这类和⼩程序⻚⾯相关的配置。 开发者可以独⽴定义每个⻚⾯的⼀些属性，如顶部颜⾊、是否允许下拉刷新等等。 ⻚⾯的配置只能设置 app.json 中部分 window 配置项的内容，⻚⾯中配置项会覆盖 app.json 的 window 中相同的配置项。</p>
</li>
<li><p>常用配置属性列举:</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarBackgroundColor</td>
<td>HexColor</td>
<td>#000000</td>
<td>导航栏背景颜⾊，如 #000000</td>
</tr>
<tr>
<td>navigationBarTextStyle</td>
<td>String</td>
<td>white</td>
<td>导航栏标题颜⾊，仅⽀持 black &#x2F; white</td>
</tr>
<tr>
<td>navigationBarTitleText</td>
<td>String</td>
<td></td>
<td>导航栏标题⽂字内容</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>#ffffff</td>
<td>窗⼝的背景⾊</td>
</tr>
<tr>
<td>backgroundTextStyle</td>
<td>String</td>
<td>dark</td>
<td>下拉<code>loading</code>的样式，仅⽀持 dark &#x2F; light</td>
</tr>
<tr>
<td>enablePullDownRefresh</td>
<td>Boolean</td>
<td>false</td>
<td>是否全局开启下拉刷新。 详⻅ <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh">Page.onPullDownRefresh</a></td>
</tr>
<tr>
<td>onReachBottomDistance</td>
<td>Number</td>
<td>50</td>
<td>⻚⾯上拉触底事件触发时距⻚⾯底部距离，单位为px。 详⻅ <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom">Page.onReachBottom</a></td>
</tr>
<tr>
<td>disableScroll</td>
<td>Boolean</td>
<td>false</td>
<td>设置为 true 则⻚⾯整体不能上下滚动；只在⻚⾯配置中有效，⽆法在 app.json 中设置该项</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="Ⅲ-sitemap-配置-了解即可"><a href="#Ⅲ-sitemap-配置-了解即可" class="headerlink" title="Ⅲ-sitemap 配置-了解即可"></a>Ⅲ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html">sitemap 配置</a>-了解即可</h3><blockquote>
<p>⼩程序根⽬录下的 <code>sitemap.json</code> ⽂件⽤于配置⼩程序及其⻚⾯是否允许被微信索引。<code>主要服务于搜索</code></p>
</blockquote>
<h2 id="4、小程序框架接口"><a href="#4、小程序框架接口" class="headerlink" title="4、小程序框架接口"></a>4、小程序框架接口</h2><h3 id="Ⅰ-App-Object-object"><a href="#Ⅰ-App-Object-object" class="headerlink" title="Ⅰ-App(Object object)"></a>Ⅰ-App(Object object)</h3><blockquote>
<ol>
<li><p>注册小程序。接受一个 <code>Object</code> 参数，其指定小程序的生命周期回调等。</p>
</li>
<li><p><strong>App() 必须在 <code>app.js</code> 中调用，必须调用且只能调用一次。不然会出现无法预期的后果</strong></p>
</li>
<li><p>相应的app()参数在下方的<code>小程序生命周期中有指出</code></p>
</li>
</ol>
</blockquote>
<h4 id="AppObject-getApp-Object-object"><a href="#AppObject-getApp-Object-object" class="headerlink" title="AppObject getApp(Object object)"></a><strong>AppObject <code>getApp(Object object)</code></strong></h4><blockquote>
<ol>
<li><p>获取到小程序全局唯一的 <code>App</code> 实例。</p>
</li>
<li><p>代码示例</p>
</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// other.js</span>
<span class="token keyword">var</span> appInstance <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appInstance<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// I am global dat</span>
<span class="token comment" spellcheck="true">//或者</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>GbaseUrl<span class="token punctuation">}</span> <span class="token operator">=</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//GbaseUrl是自己在app.js定义的全局变量</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>Object object</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">必填</th>
<th align="left">说明</th>
<th align="left">最低版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">allowDefault</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">否</td>
<td align="left">在 <code>App</code> 未定义时返回默认实现。当App被调用时，默认实现中定义的属性会被覆盖合并到App中。一般用于<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/independent.html">独立分包</a></td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.2.4</a></td>
</tr>
</tbody></table>
<ol start="4">
<li>注意</li>
</ol>
<ul>
<li>不要在定义于 <code>App()</code> 内的函数中，或调用 <code>App</code> 前调用 <code>getApp()</code> 。使用 <code>this</code> 就可以拿到 app 实例。</li>
<li>通过 <code>getApp()</code> 获取实例之后，不要私自调用生命周期函数</li>
</ul>
</blockquote>
<hr>
<h1 id="三、小程序的基础知识储备"><a href="#三、小程序的基础知识储备" class="headerlink" title="三、小程序的基础知识储备"></a>三、小程序的基础知识储备</h1><blockquote>
<p>整个小程序学习过程中遇到的 所需基础知识 或 补充知识 将整合至此</p>
<p>相关知识点本人在<code>一二阶段补缺笔记</code>中有记录,在此便只举例大概,不详细记录</p>
</blockquote>
<h2 id="1、Flex-布局"><a href="#1、Flex-布局" class="headerlink" title="1、Flex 布局"></a>1、Flex 布局</h2><h3 id="Ⅰ-基本知识点概念"><a href="#Ⅰ-基本知识点概念" class="headerlink" title="Ⅰ-基本知识点概念"></a>Ⅰ-基本知识点概念</h3><blockquote>
<ol>
<li><p>Flex基本概念</p>
<ol>
<li><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 </p>
</li>
<li><p>任何一个容器都可以指定为 Flex 布局。 </p>
</li>
<li><p>display: ‘flex’</p>
</li>
</ol>
</li>
</ol>
<p>​	<img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210421111211248.png" alt="image-20210421111211248"></p>
<p>​	4) 这部分是一阶段基础知识,可看<a href="http://www.runoob.com/w3cnote/flex-grammar.html">文档</a>学习</p>
<ol start="2">
<li>在小程序中,通常使用<code>&lt;view/&gt;</code>代替<code>&lt;div/&gt;</code>作为容器来做布局–&gt;代码示例在<code>第一章的第三小节第三点</code></li>
</ol>
</blockquote>
<h3 id="Ⅱ-解决flex布局中-space-between方法的排版问题"><a href="#Ⅱ-解决flex布局中-space-between方法的排版问题" class="headerlink" title="Ⅱ-解决flex布局中 space-between方法的排版问题"></a>Ⅱ-解决flex布局中 space-between方法的排版问题</h3><blockquote>
<p>详见下方<code>杂记-初学阶段遇到的问题与解决-问题Ⅷ</code></p>
</blockquote>
<h2 id="2、移动端相关知识点"><a href="#2、移动端相关知识点" class="headerlink" title="2、移动端相关知识点"></a>2、移动端相关知识点</h2><blockquote>
<p>自行补充学习,相关知识点本人在<code>一二阶段补缺笔记</code>中有记录,便不再赘述</p>
</blockquote>
<h3 id="Ⅰ-物理像素"><a href="#Ⅰ-物理像素" class="headerlink" title="Ⅰ-物理像素"></a>Ⅰ-物理像素</h3><blockquote>
<ol>
<li><p>屏幕的分辨率 </p>
</li>
<li><p>设备能控制显示的最小单元，可以把物理像素看成是对应的像素点</p>
</li>
</ol>
</blockquote>
<h3 id="Ⅱ-设备独立像素-、-css-像素"><a href="#Ⅱ-设备独立像素-、-css-像素" class="headerlink" title="Ⅱ-设备独立像素 、 css 像素"></a>Ⅱ-设备独立像素 、 css 像素</h3><blockquote>
<p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用并控制的<code>虚拟像素</code>(比如：CSS 像素,只是在 android 机中 CSS 像素就不叫”CSS 像素”了而是叫”设备独立像素”)，然后由相关系统转换为物理像素。 </p>
</blockquote>
<h3 id="Ⅲ-dpr比-、DPI-、PPI"><a href="#Ⅲ-dpr比-、DPI-、PPI" class="headerlink" title="Ⅲ-dpr比 、DPI 、PPI"></a>Ⅲ-dpr比 、DPI 、PPI</h3><blockquote>
<ol>
<li><p>概念</p>
<ol>
<li><p>dpr: 设备像素比，物理像素&#x2F;设备独立像素 &#x3D; dpr， 一般以 Iphon6 的 dpr 为准 dpr &#x3D; 2</p>
</li>
<li><p>PPI: 一英寸显示屏上的像素点个数 </p>
</li>
<li><p>DPI：最早指的是打印机在单位面积上打印的墨点数，墨点越多越清晰</p>
</li>
</ol>
</li>
<li><p>不同机型对比表</p>
</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210508115100483.png" alt="image-20210508115100483"></p>
<ol start="3">
<li>部分机型图示</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210508115306709.png" alt="image-20210508115306709"></p>
</blockquote>
<h2 id="3、移动端适配方案"><a href="#3、移动端适配方案" class="headerlink" title="3、移动端适配方案"></a>3、移动端适配方案</h2><blockquote>
<p>相关知识点本人在<code>一二阶段补缺笔记</code>中有记录,想详细查阅可以去看,这是个<code>面试考点</code></p>
</blockquote>
<h3 id="Ⅰ-viewport-适配"><a href="#Ⅰ-viewport-适配" class="headerlink" title="Ⅰ-viewport 适配"></a>Ⅰ-viewport 适配</h3><blockquote>
<ol>
<li><p>为什么做 <code>viewport</code> 适配 ?</p>
<p>  a) 手机厂商在生产手机的时候大部分手机默认页面宽度为 980px </p>
<p>  b) 手机实际视口宽度都要小于 980px，如: iphone6 为 750px</p>
<p>  c) 开发需求需要将 980 的页面完全显示在手机屏幕上且没有滚动条 </p>
</li>
<li><p>代码实现</p>
</li>
</ol>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅱ-rem-适配"><a href="#Ⅱ-rem-适配" class="headerlink" title="Ⅱ- rem 适配"></a>Ⅱ- rem 适配</h3><blockquote>
<ol>
<li>为什么做 <code>rem</code> 适配?</li>
</ol>
<p>  a) 机型太多,不同的机型屏幕大小不一样 </p>
<p>  b) 需求：一套设计稿的内容在不同的机型上呈现的效果一致,根据屏幕大小不同的变化,页面中的内容也相应变化</p>
<ol start="2">
<li>原生代码实现:</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">remRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">let</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span> 
<span class="token comment" spellcheck="true">// 将屏幕等分 10 份</span>
<span class="token keyword">let</span> rem <span class="token operator">=</span> clientWidth <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">'12px'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
<span class="token function">remRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 函数防抖</span>
<span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
timeoutId <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
<span class="token function">remRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>第三方库实现</li>
</ol>
<blockquote>
<p>lib-flexible + px2rem-loader</p>
</blockquote>
</blockquote>
<hr>
<h1 id="四、视图层详解"><a href="#四、视图层详解" class="headerlink" title="四、视图层详解"></a>四、视图层详解</h1><blockquote>
<p>框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。</p>
<p>将逻辑层的数据反映成视图，同时将视图层的事件发送给逻辑层。</p>
<p>WXML(WeiXin Markup language) 用于描述页面的结构。</p>
<p>WXS(WeiXin Script) 是小程序的一套脚本语言，结合 <code>WXML</code>，可以构建出页面的结构。</p>
<p>WXSS(WeiXin Style Sheet) 用于描述页面的样式。</p>
<p>组件(Component)是视图的基本组成单元。</p>
<p>该部分将<code>截取官方文档</code>并加以注解</p>
</blockquote>
<h2 id="1、WXSS样式文件详解"><a href="#1、WXSS样式文件详解" class="headerlink" title="1、WXSS样式文件详解"></a>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">WXSS</a>样式文件详解</h2><blockquote>
<ol>
<li><p>WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。</p>
</li>
<li><p>WXSS 用来决定 WXML 的组件应该怎么显示。</p>
</li>
</ol>
<p>  为了适应广大的前端开发者，WXSS 具有 CSS 大部分特性。同时为了更适合开发微信小程序，WXSS 对 CSS 进行了扩充以及修改。</p>
<ol start="3">
<li><p>与 CSS 相比，WXSS 扩展的特性有：</p>
<ol>
<li>响应式⻓度单位:即尺寸单位 –&gt;<code>rpx</code></li>
<li>样式导入</li>
</ol>
</li>
<li><p>注意:</p>
</li>
</ol>
<p>  当页面文件在同一级目录下且命名相同(后缀不同),<code>可以互相引用却不用导入</code></p>
</blockquote>
<h3 id="Ⅰ-尺寸单位"><a href="#Ⅰ-尺寸单位" class="headerlink" title="Ⅰ-尺寸单位"></a>Ⅰ-尺寸单位</h3><blockquote>
<ol>
<li><code>rpx（responsive pixel）</code>: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 <code>iPhone6</code> 上，屏幕宽度为375px，共有750个物理像素，则750rpx &#x3D; 375px &#x3D; 750物理像素，1rpx &#x3D; 0.5px &#x3D; 1物理像素。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">设备</th>
<th align="left">rpx换算px (屏幕宽度&#x2F;750)</th>
<th align="left">px换算rpx (750&#x2F;屏幕宽度)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">iPhone5</td>
<td align="left">1rpx &#x3D; 0.42px</td>
<td align="left">1px &#x3D; 2.34rpx</td>
</tr>
<tr>
<td align="left">iPhone6</td>
<td align="left">1rpx &#x3D; 0.5px</td>
<td align="left">1px &#x3D; 2rpx</td>
</tr>
<tr>
<td align="left">iPhone6 Plus</td>
<td align="left">1rpx &#x3D; 0.552px</td>
<td align="left">1px &#x3D; 1.81rpx</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>建议与注意点:</p>
<ol>
<li>开发微信小程序时<code>推荐设计师可以用iPhone6作为视觉稿的标准</code>–&gt;即只有在<code>iPhone6</code>标准中才可以<code>一比二换算</code>,更方便</li>
<li>在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="Ⅱ-样式导⼊"><a href="#Ⅱ-样式导⼊" class="headerlink" title="Ⅱ-样式导⼊"></a>Ⅱ-样式导⼊</h3><blockquote>
<ol>
<li>使用<code>@import</code>语句可以导入外联样式表,也可以和less中的导⼊混⽤，<code>@import</code>后跟需要导入的外联样式表的<code>相对路径</code>(只⽀持相对路径)，用<code>;</code>表示语句结束。</li>
</ol>
<pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/** common.wxss **/</span>
<span class="token selector"><span class="token class">.small-p</span> </span><span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/** app.wxss **/</span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"common.wxss"</span><span class="token punctuation">;</span></span>
<span class="token selector"><span class="token class">.middle-p</span> </span><span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅲ-内联样式"><a href="#Ⅲ-内联样式" class="headerlink" title="Ⅲ-内联样式"></a>Ⅲ-内联样式</h3><blockquote>
<p>框架组件上支持使用 style、class 属性来控制组件的样式。</p>
<ol>
<li><code>style</code>：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度</li>
</ol>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">color:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li><code>class</code>：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上<code>.</code>，样式类名之间用空格分隔</li>
</ol>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal_view<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h2 id="2、WXML语法详解"><a href="#2、WXML语法详解" class="headerlink" title="2、WXML语法详解"></a>2、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/">WXML</a>语法详解</h2><blockquote>
<p>WXML（WeiXin Markup Language）是框架设计的⼀套标签语⾔，结合<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">基础组件</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件系统</a>，可以构建出⻚⾯的结构。</p>
<p>该部分将<code>截取官方文档</code>加以自己见解说明,同学们也可以直接去看文档</p>
</blockquote>
<h3 id="Ⅰ-数据绑定与写法规则"><a href="#Ⅰ-数据绑定与写法规则" class="headerlink" title="Ⅰ-数据绑定与写法规则"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html#%E5%86%85%E5%AE%B9">数据绑定与写法规则</a></h3><blockquote>
<ol>
<li><p>WXML 中的动态数据均来自对应 Page 的 data。</p>
</li>
<li><p>Mustache 语法{{}}视作运算标记,里面的内容表示表达式</p>
</li>
</ol>
</blockquote>
<h4 id="1-单向简单数据绑定"><a href="#1-单向简单数据绑定" class="headerlink" title="1) 单向简单数据绑定"></a>1) 单向简单数据绑定</h4><blockquote>
<ol>
<li><p>此处是单向绑定(数据驱动视图),双向绑定出现的场景如(input等)将在下方<code>四-3、双向绑定</code>处记录</p>
</li>
<li><p><code>简单绑定</code>:数据绑定使用 Mustache 语法（双大括号）将变量包起来，可以作用于：</p>
</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//pages.wxml</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">// pages.js</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">:</span> <span class="token string">'Hello MINA!'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>绑定<code>boolean</code>类型(需要在双引号之内)</li>
</ol>
<p>  <code>true</code>：boolean 类型的 true，代表真值。<code>false</code>： boolean 类型的 false，代表假值。</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checkbox</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{false}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checkbox</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  <em><strong>特别注意：不要直接写 <code>checked=&quot;false&quot;</code>，其计算结果是一个字符串，转成 boolean 类型后代表真值</strong></em></p>
</blockquote>
<h4 id="2-运算"><a href="#2-运算" class="headerlink" title="2) 运算"></a>2) 运算</h4><blockquote>
<p>可以在 <code>{{}}</code> 内进行简单的运算，支持的有如下几种方式：</p>
<ol>
<li>三元运算</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{flag</span> <span class="token attr-name">?</span> <span class="token attr-name">true</span> <span class="token attr-name">:</span> <span class="token attr-name">false}}"</span><span class="token punctuation">></span></span> Hidden <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>算数运算</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">+</span> d <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">//view中的内容为 `3 + 3 + d`。</span>
<span class="token comment" spellcheck="true">//pages.js</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>逻辑判断</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{length</span> <span class="token punctuation">></span> <span class="token attr-name">5}}"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li>字符串运算</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"hello"</span> <span class="token operator">+</span> name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> 'MINA<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>数据路径运算</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token punctuation">{</span>object<span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">//view中的内容为 hello  MINA</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    object<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      key<span class="token punctuation">:</span> <span class="token string">'Hello '</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'MINA'</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="3-组合"><a href="#3-组合" class="headerlink" title="3) 组合"></a>3) 组合</h4><blockquote>
<p>也可以在 Mustache 内直接进行组合，构成新的对象或者数组。</p>
<ol>
<li>数组 –&gt; 最终组合成数组<code>[0, 1, 2, 3, 4]</code>。</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[zero,</span> <span class="token attr-name">1,</span> <span class="token attr-name">2,</span> <span class="token attr-name">3,</span> <span class="token attr-name">4]}}"</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span> zero<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>对象   –&gt;</p>
<ol>
<li><p>最终组合成的对象是 <code>&#123;for: 1, bar: 2&#125;</code> </p>
<pre class="line-numbers language-JSx"><code class="language-JSx"><template is="objectCombine" data="{{for: a, bar: b}}"></template>
Page({
  data: {a: 1, b: 2}
})
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>也可以用扩展运算符 <code>...</code> 来将一个对象展开–&gt;最终组合成的对象是 <code>&#123;a: 1, b: 2, c: 3, d: 4, e: 5&#125;</code>。</p>
<pre class="line-numbers language-JSx"><code class="language-JSx"><template is="objectCombine" data="{{...obj1, ...obj2, e: 5}}"></template>
Page({
  data: {
    obj1: { a: 1, b: 2 },
    obj2: { c: 3, d: 4}
  }
})
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>如果对象的 key 和 value 相同，也可以间接地表达。–&gt;最终组合成的对象是 <code>&#123;foo: &#39;my-foo&#39;, bar:&#39;my-bar&#39;&#125;</code></p>
<pre class="line-numbers language-JSx"><code class="language-JSx"><template is="objectCombine" data="{{foo, bar}}"></template>
Page({
  data: {
    foo: 'my-foo',
    bar: 'my-bar'
  }
})
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>注意</code>：上述方式可以随意组合，但是如有存在变量名相同的情况，后边的会覆盖前面 –&gt; 最终组合成的对象是 <code>&#123;a: 5, b: 3, c: 6&#125;</code>。</p>
<pre class="line-numbers language-JSx"><code class="language-JSx"><template is="objectCombine" data="{{...obj1, ...obj2, a, c: 6}}"></template>
Page({
  data: {
    obj1: { a: 1,  b: 2},
    obj2: { b: 3, c: 4},
    a: 5
  }
})
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>注意</code>： 花括号和引号之间如果有空格，将最终被解析成为字符串</p>
<pre class="line-numbers language-JSx"><code class="language-JSx">  <view wx:for="{{[1,2,3]}} ">
    {{item}}
  </view>
  等同于
                        
  <view wx:for="{{[1,2,3] + ' '}}">
    {{item}}
  </view>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
</ol>
</blockquote>
<h4 id="4-自定义属性data-的命名与使用"><a href="#4-自定义属性data-的命名与使用" class="headerlink" title="4) 自定义属性data-*的命名与使用"></a>4) 自定义属性<code>data-*</code>的命名与使用</h4><blockquote>
<ol>
<li>同一容器中可以存在多个<code>data-*</code></li>
<li>凡是以<code>data-</code>开头的数据,都会在<code>event的currentTarget</code>中体现,且回缺省<code>data-</code>(data-id  –&gt;  id)</li>
<li><code>data-*</code>后面接的单词将自动转换 第一个单词首字母小写,第二个及之后的单词首字母大写 (data-post-my-id –&gt; postMyId)</li>
</ol>
</blockquote>
<h3 id="Ⅱ-列表渲染"><a href="#Ⅱ-列表渲染" class="headerlink" title="Ⅱ-列表渲染"></a>Ⅱ-列表渲染</h3><h4 id="1-wx-for"><a href="#1-wx-for" class="headerlink" title="1) wx:for"></a>1) wx:for</h4><blockquote>
<ol>
<li><p>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</p>
</li>
<li><p>默认数组的当前项的下标变量名默认为 <code>index</code>，数组当前项的变量名默认为 <code>item</code></p>
</li>
<li><p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名：</p>
</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{array}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">{</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>itemName<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li><code>wx:for</code> 也可以嵌套，下边是一个九九乘法表</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,</span> <span class="token attr-name">2,</span> <span class="token attr-name">3,</span> <span class="token attr-name">4,</span> <span class="token attr-name">5,</span> <span class="token attr-name">6,</span> <span class="token attr-name">7,</span> <span class="token attr-name">8,</span> <span class="token attr-name">9]}}"</span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,</span> <span class="token attr-name">2,</span> <span class="token attr-name">3,</span> <span class="token attr-name">4,</span> <span class="token attr-name">5,</span> <span class="token attr-name">6,</span> <span class="token attr-name">7,</span> <span class="token attr-name">8,</span> <span class="token attr-name">9]}}"</span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>j<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{i</span> <span class="token attr-name">&lt;</span><span class="token attr-value"><span class="token punctuation">=</span> j}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">*</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>j<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token string">"{{i"</span> j<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span> view<span class="token operator">></span> <span class="token operator">&lt;</span> code<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">=</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="2-block-wx-for"><a href="#2-block-wx-for" class="headerlink" title="2) block wx:for"></a>2) block wx:for</h4><blockquote>
<p>类似 <code>block wx:if</code>，也可以将 <code>wx:for</code> 用在<code>&lt;block/&gt;</code>标签上，以渲染一个包含多节点的结构块。例如：</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,</span> <span class="token attr-name">2,</span> <span class="token attr-name">3]}}"</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong> <code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性</p>
</blockquote>
<h4 id="3-wx-key"><a href="#3-wx-key" class="headerlink" title="3) wx:key"></a>3) wx:key</h4><blockquote>
<p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 中的输入内容，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch</a> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p>
</blockquote>
<h5 id="①-wx-key-的值以两种形式提供"><a href="#①-wx-key-的值以两种形式提供" class="headerlink" title="① wx:key 的值以两种形式提供"></a>① <code>wx:key</code> 的值以两种形式提供</h5><blockquote>
<ol>
<li><p>字符串，代表在for循环的array中<code>item的某个property</code>，该property的值需要是列表中唯一的字符串或数字，且不能动态改变。</p>
</li>
<li><p>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个<code>唯一的字符串或者数字</code>。</p>
</li>
</ol>
<pre class="line-numbers language-JSX"><code class="language-JSX"><block wx:for="{{posts}}"   wx:key="id"></blocK>
//id是posts数组中的对象里的一个属性
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<h5 id="②使用-wx-key-的意义"><a href="#②使用-wx-key-的意义" class="headerlink" title="②使用 wx:key 的意义"></a>②使用 <code>wx:key</code> 的意义</h5><blockquote>
<p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件<code>，框架会确保他们被重新排序，而不是重新创建</code>，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p>
<p>如不提供 <code>wx:key</code>，会报一个 <code>warning</code>， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</p>
</blockquote>
<h4 id="4-列表渲染注意点"><a href="#4-列表渲染注意点" class="headerlink" title="4) 列表渲染注意点"></a>4) 列表渲染注意点</h4><h5 id="①-当-wx-for-的值为字符串时，会将字符串解析成字符串数组"><a href="#①-当-wx-for-的值为字符串时，会将字符串解析成字符串数组" class="headerlink" title="① 当 wx:for 的值为字符串时，会将字符串解析成字符串数组"></a>① 当 <code>wx:for</code> 的值为字符串时，会将字符串解析成字符串数组</h5><blockquote>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
等同于

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[<span class="token punctuation">'</span>a<span class="token punctuation">'</span>,<span class="token punctuation">'</span>r<span class="token punctuation">'</span>,<span class="token punctuation">'</span>r<span class="token punctuation">'</span>,<span class="token punctuation">'</span>a<span class="token punctuation">'</span>,<span class="token punctuation">'</span>y<span class="token punctuation">'</span>]}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h5 id="②-花括号和引号之间如果有空格，将最终被解析成为字符串"><a href="#②-花括号和引号之间如果有空格，将最终被解析成为字符串" class="headerlink" title="② 花括号和引号之间如果有空格，将最终被解析成为字符串"></a>② 花括号和引号之间如果有空格，将最终被解析成为字符串</h5><blockquote>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,2,3]}}</span> <span class="token attr-name">"</span><span class="token punctuation">></span></span>
 <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
等同于

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,2,3]</span> <span class="token attr-name">+</span> <span class="token attr-name">'</span> <span class="token attr-name">'}}"</span> <span class="token punctuation">></span></span>
 <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅲ-条件渲染"><a href="#Ⅲ-条件渲染" class="headerlink" title="Ⅲ-条件渲染"></a>Ⅲ-条件渲染</h3><h4 id="1-wx-if"><a href="#1-wx-if" class="headerlink" title="1) wx:if"></a>1) wx:if</h4><blockquote>
<ol>
<li>在框架中，使用 <code>wx:if=&quot;&quot;</code> 来判断是否需要渲染该代码块：</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{condition}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> True <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>也可以用 <code>wx:elif</code> 和 <code>wx:else</code> 来添加一个 else 块:</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{length</span> <span class="token punctuation">></span> <span class="token attr-name">5}}"</span><span class="token punctuation">></span></span> <span class="token number">1</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{length</span> <span class="token punctuation">></span> <span class="token attr-name">2}}"</span><span class="token punctuation">></span></span> <span class="token number">2</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token punctuation">></span></span> <span class="token number">3</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="2-block-wx-if"><a href="#2-block-wx-if" class="headerlink" title="2) block wx:if"></a>2) block wx:if</h4><blockquote>
<p>因为 <code>wx:if</code> 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 <code>&lt;block/&gt;</code> 标签将多个组件包装起来，并在上边使用 <code>wx:if</code> 控制属性</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{true}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> view1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> view2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong> <code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性</p>
</blockquote>
<h4 id="3-wx-if-vs-hidden"><a href="#3-wx-if-vs-hidden" class="headerlink" title="3) wx:if vs hidden"></a>3) <code>wx:if</code> vs <code>hidden</code></h4><blockquote>
<ol>
<li><p>因为 <code>wx:if</code> 之中的模板也可能包含数据绑定，所以当 <code>wx:if</code> 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。</p>
</li>
<li><p>同时 <code>wx:if</code> 也是<strong>惰性的</strong>，如果在初始渲染条件为 <code>false</code>，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。</p>
</li>
</ol>
<p>  相比之下，<code>hidden</code> 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。</p>
<ol start="3">
<li>一般来说，<code>wx:if</code> 有更高的切换消耗而 <code>hidden</code> 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 <code>hidden</code> 更好，如果在运行时条件不大可能改变则 <code>wx:if</code> 较好。</li>
</ol>
</blockquote>
<h3 id="Ⅳ-模板"><a href="#Ⅳ-模板" class="headerlink" title="Ⅳ-模板"></a>Ⅳ-模板</h3><blockquote>
<ol>
<li><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用</p>
</li>
<li><p>模板拥有自己的<code>作用域</code>，只能使用 <code>data</code> 传入的数据以及模板定义文件中定义的 <code>&lt;wxs /&gt;</code> 模块。</p>
</li>
</ol>
</blockquote>
<h4 id="1-定义模板"><a href="#1-定义模板" class="headerlink" title="1) 定义模板"></a>1) 定义模板</h4><blockquote>
<p>使用 name 属性，作为模板的名字。然后在<code>&lt;template/&gt;</code>内定义代码片段，如</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>
 index<span class="token punctuation">:</span> int
 msg<span class="token punctuation">:</span> string
 time<span class="token punctuation">:</span> string
<span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msgItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span> Time<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>time<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="2-使用模板"><a href="#2-使用模板" class="headerlink" title="2) 使用模板"></a>2) 使用模板</h4><blockquote>
<ol>
<li>使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msgItem<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{...item}}<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">:</span> <span class="token punctuation">{</span> index<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'this is a template'</span><span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token string">'2016-09-15'</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>odd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> odd <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>even<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> even <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1,</span> <span class="token attr-name">2,</span> <span class="token attr-name">3,</span> <span class="token attr-name">4,</span> <span class="token attr-name">5]}}"</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item</span> <span class="token attr-name">%</span> <span class="token attr-name">2</span> <span class="token attr-name">=</span><span class="token attr-value"><span class="token punctuation">=</span> 0</span> <span class="token attr-name">?</span> <span class="token attr-name">'even'</span> <span class="token attr-name">:</span> <span class="token attr-name">'odd'}}"</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅴ-引用"><a href="#Ⅴ-引用" class="headerlink" title="Ⅴ-引用"></a>Ⅴ-引用</h3><blockquote>
<p>WXML 提供两种文件引用方式<code>import</code>和<code>include</code></p>
</blockquote>
<h4 id="1-import"><a href="#1-import" class="headerlink" title="1) import"></a>1) import</h4><h5 id="①-使用示例"><a href="#①-使用示例" class="headerlink" title="① 使用示例"></a>① 使用示例</h5><blockquote>
<ol>
<li>在 item.wxml 中定义了一个叫<code>item</code>的<code>template</code>：</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> item<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>在 index.wxml 中引用了 item.wxml，就可以使用<code>item</code>模板：</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.wxml<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{text:</span> <span class="token attr-name">'forbar'}}"</span><span class="token punctuation">/></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<h5 id="②-import-的作用域"><a href="#②-import-的作用域" class="headerlink" title="② import 的作用域"></a>② import 的作用域</h5><blockquote>
<p>import有作用域的概念，即只会 import 目标文件中定义的 template，而不会import目标文件import的template。</p>
<p>**如：C import B，B import A，在C中可以使用B定义的<code>template</code>，在B中可以使用A定义的<code>template</code>，但是C不能使用A定义的<code>template</code>**。</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> A<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span> A template <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> B<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.wxml<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span> B template <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> C<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.wxml<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Error<span class="token operator">!</span> Can not use tempalte when not <span class="token keyword">import</span> A<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="2-include"><a href="#2-include" class="headerlink" title="2) include"></a>2) include</h4><blockquote>
<p><code>include</code> 可以将目标文件<strong>除了</strong> <code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 <code>include</code> 位置，如：</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> index<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header.wxml<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> body <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer.wxml<span class="token punctuation">"</span>/</span><span class="token punctuation">></span></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> header<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> header <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> footer<span class="token punctuation">.</span>wxml <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> footer <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h2 id="3、双向绑定"><a href="#3、双向绑定" class="headerlink" title="3、双向绑定"></a>3、双向绑定</h2><h3 id="Ⅰ-双向绑定语法"><a href="#Ⅰ-双向绑定语法" class="headerlink" title="Ⅰ-双向绑定语法"></a>Ⅰ-双向绑定语法</h3><blockquote>
</blockquote>
<h3 id="Ⅱ-setData–-gt-数据更新"><a href="#Ⅱ-setData–-gt-数据更新" class="headerlink" title="Ⅱ- setData–&gt;数据更新"></a>Ⅱ- <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html"><code>setData</code></a>–&gt;数据更新</h3><blockquote>
<ol>
<li><p><code>setData</code> 是小程序开发中使用最频繁的接口，也是最容易引发性能问题的接口。</p>
</li>
<li><p>小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的 JavascriptCore 作为运行环境。在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。当前，视图层和逻辑层的数据传输，实际上通过两边提供的 <code>evaluateJavascript</code> 所实现。即用户传输的数据，①<code>需要将其转换为字符串形式传递</code>，② <code>同时把转换后的数据内容拼接成一份 JS 脚本</code>，③<code>再通过执行 JS 脚本的形式传递到两边独立环境</code>。</p>
</li>
<li><p>而 <code>evaluateJavascript</code> 的执行会受很多方面的影响，数据到达视图层并不是实时的</p>
</li>
</ol>
</blockquote>
<h4 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1) 简单使用"></a>1) 简单使用</h4><blockquote>
<p><code>setData</code>可以直接将数据加入data中;如果在data中已经有该值,则修改它有着创建+更新功能  但正常是用来更新</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>test<span class="token punctuation">:</span> <span class="token string">"测试数据"</span><span class="token punctuation">,</span>flag<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token comment" spellcheck="true">//更新</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>posts<span class="token punctuation">:</span> content<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="2-常见的-setData-操作错误"><a href="#2-常见的-setData-操作错误" class="headerlink" title="2) 常见的 setData 操作错误"></a>2) 常见的 setData 操作错误</h4><h5 id="①-频繁的去-setData"><a href="#①-频繁的去-setData" class="headerlink" title="① 频繁的去 setData"></a>① <strong>频繁的去 setData</strong></h5><blockquote>
<p>在我们分析过的一些案例里，部分小程序会非常频繁（毫秒级）的去<code>setData</code>，其导致了两个后果：</p>
<ul>
<li>Android 下用户在滑动时会感觉到卡顿，操作反馈延迟严重，因为 JS 线程一直在编译执行渲染，未能及时将用户操作事件传递到逻辑层，逻辑层亦无法及时将操作处理结果及时传递到视图层；</li>
<li>渲染有出现延时，由于 WebView 的 JS 线程一直处于忙碌状态，逻辑层到页面层的通信耗时上升，视图层收到的数据消息时距离发出时间已经过去了几百毫秒，渲染的结果并不实时；</li>
</ul>
</blockquote>
<h5 id="②-每次-setData-都传递大量新数据"><a href="#②-每次-setData-都传递大量新数据" class="headerlink" title="② 每次 setData 都传递大量新数据"></a>② <strong>每次 setData 都传递大量新数据</strong></h5><blockquote>
<p>由<code>setData</code>的底层实现可知，我们的数据传输实际是一次 <code>evaluateJavascript</code> 脚本过程，当数据量过大时会增加脚本的编译执行时间，占用 WebView JS 线程，</p>
</blockquote>
<h5 id="③-后台态页面进行-setData"><a href="#③-后台态页面进行-setData" class="headerlink" title="③ 后台态页面进行 setData"></a>③ <strong>后台态页面进行 setData</strong></h5><blockquote>
<p>当页面进入后台态（用户不可见），不应该继续去进行<code>setData</code>，后台态页面的渲染用户是无法感受的，另外后台态页面去<code>setData</code>也会抢占前台页面的执行</p>
</blockquote>
<h2 id="4、事件系统"><a href="#4、事件系统" class="headerlink" title="4、事件系统"></a>4、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件系统</a></h2><h3 id="Ⅰ-什么是事件"><a href="#Ⅰ-什么是事件" class="headerlink" title="Ⅰ-什么是事件?"></a>Ⅰ-什么是事件?</h3><blockquote>
<ul>
<li><code>事件是视图层到逻辑层的通讯方式</code>。</li>
<li>事件可以将用户的行为反馈到逻辑层进行处理。</li>
<li>事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。</li>
<li>事件对象可以携带额外信息，如 id, dataset, touches。</li>
</ul>
</blockquote>
<h3 id="Ⅱ-事件分类"><a href="#Ⅱ-事件分类" class="headerlink" title="Ⅱ-事件分类"></a>Ⅱ-事件分类</h3><blockquote>
<p>事件分为冒泡事件和非冒泡事件：</p>
<ol>
<li><p><code>冒泡事件</code>：当一个组件上的事件被触发后，该事件会向父节点传递。</p>
</li>
<li><p><code>非冒泡事件</code>：当一个组件上的事件被触发后，该事件不会向父节点传递。</p>
</li>
<li><p>WXML的冒泡事件列表：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">触发条件</th>
<th align="left">最低版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">touchstart</td>
<td align="left">手指触摸动作开始</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">touchmove</td>
<td align="left">手指触摸后移动</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">touchcancel</td>
<td align="left">手指触摸动作被打断，如来电提醒，弹窗</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">touchend</td>
<td align="left">手指触摸动作结束</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">tap</td>
<td align="left">手指触摸后马上离开</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">longpress</td>
<td align="left">手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td>
</tr>
<tr>
<td align="left">longtap</td>
<td align="left">手指触摸后，超过350ms再离开（推荐使用longpress事件代替）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">transitionend</td>
<td align="left">会在 WXSS transition 或 wx.createAnimation 动画结束后触发</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">animationstart</td>
<td align="left">会在一个 WXSS animation 动画开始时触发</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">animationiteration</td>
<td align="left">会在一个 WXSS animation 一次迭代结束时触发</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">animationend</td>
<td align="left">会在一个 WXSS animation 动画完成时触发</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">touchforcechange</td>
<td align="left">在支持 3D Touch 的 iPhone 设备，重按时会触发</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td>
</tr>
</tbody></table>
<ol start="4">
<li><code>注</code>：除上表之外的其他组件自定义事件如无特殊声明<code>都是非冒泡事件</code>，如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/form.html">form</a> 的<code>submit</code>事件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 的<code>input</code>事件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a> 的<code>scroll</code>事件，(详见各个<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">组件</a>)</li>
</ol>
</blockquote>
<h3 id="Ⅲ-事件的绑定方式"><a href="#Ⅲ-事件的绑定方式" class="headerlink" title="Ⅲ-事件的绑定方式"></a>Ⅲ-事件的绑定方式</h3><h4 id="1-普通事件绑定-bind-绑定"><a href="#1-普通事件绑定-bind-绑定" class="headerlink" title="1) 普通事件绑定-bind 绑定"></a>1) 普通事件绑定-<code>bind</code> 绑定</h4><blockquote>
<ol>
<li>代码示例</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tapName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>start_container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">//也可以加冒号分隔</span>
    <span class="token comment" spellcheck="true">//&lt;view bind:tap="tapName" class='start_container'></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>start<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>开启小程序之旅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  tapName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>如果用户点击这个 view ，则页面的 <code>tapName</code> 会被调用。</p>
</li>
<li><p>此时，页面的 <code>this.data.tapName</code> 必须是一个字符串，指定事件处理函数名；如果它是个空字符串，则这个绑定会失效（可以利用这个特性来暂时禁用一些事件）</p>
</li>
<li><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a> 起，在大多数组件和自定义组件中， <code>bind</code> 后可以紧跟一个冒号，其含义不变，如 <code>bind:tap</code> 。基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.1</a> 起，在所有组件中开始提供这个支持。</p>
</li>
</ol>
</blockquote>
<h4 id="2-绑定并阻止事件冒泡-catch-绑定"><a href="#2-绑定并阻止事件冒泡-catch-绑定" class="headerlink" title="2) 绑定并阻止事件冒泡-catch 绑定:"></a>2) 绑定并阻止事件冒泡-<code>catch</code> 绑定:</h4><blockquote>
<ol>
<li><p>除 <code>bind</code> 外，也可以用 <code>catch</code> 来绑定事件。与 <code>bind</code> 不同， <code>catch</code> 会阻止事件向上冒泡。</p>
</li>
<li><p>代码示例:</p>
</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  outer view
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">catchtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    middle view
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      inner view
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>例如在上边这个例子中，点击 inner view 会先后调用<code>handleTap3</code>和<code>handleTap2</code>(因为tap事件会冒泡到 middle view，而 middle view 阻止了 tap 事件冒泡，不再向父节点传递)，点击 middle view 会触发<code>handleTap2</code>，点击 outer view 会触发<code>handleTap1</code>。</li>
</ol>
</blockquote>
<h4 id="3-互斥事件绑定"><a href="#3-互斥事件绑定" class="headerlink" title="3) 互斥事件绑定"></a>3) 互斥事件绑定</h4><blockquote>
<ol>
<li><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.2</a> 起，除 <code>bind</code> 和 <code>catch</code> 外，还可以使用 <code>mut-bind</code> 来绑定事件。一个 <code>mut-bind</code> 触发后，如果事件冒泡到其他节点上，其他节点上的 <code>mut-bind</code> 绑定函数不会被触发，但 <code>bind</code> 绑定函数和 <code>catch</code> 绑定函数依旧会被触发。</p>
</li>
<li><p>换而言之，所有 <code>mut-bind</code> 是“互斥”的，只会有其中一个绑定函数被触发。同时，它完全不影响 <code>bind</code> 和 <code>catch</code> 的绑定效果</p>
</li>
<li><p>例如在下边这个例子中，点击 inner view 会先后调用 <code>handleTap3</code> 和 <code>handleTap2</code> ，点击 middle view 会调用 <code>handleTap2</code> 和 <code>handleTap1</code></p>
</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">mut-bind:</span>tap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  outer view
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    middle view
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">mut-bind:</span>tap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      inner view
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅳ-事件的捕获阶段"><a href="#Ⅳ-事件的捕获阶段" class="headerlink" title="Ⅳ-事件的捕获阶段"></a>Ⅳ-事件的捕获阶段</h3><blockquote>
<ol>
<li><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a> 起，触摸类事件支持捕获阶段。捕获阶段位于冒泡阶段之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段<code>恰好相反</code>。需要在捕获阶段监听事件时，可以采用<code>capture-bind</code>、<code>capture-catch</code>关键字，后者将中断捕获阶段和取消冒泡阶段。</p>
</li>
<li><p>在下面的代码中，点击 inner view 会先后调用<code>handleTap2</code>、<code>handleTap4</code>、<code>handleTap3</code>、<code>handleTap1</code></p>
</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">capture-bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  outer view
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">capture-bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    inner view
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  如果将上面代码中的第一个capture-bind改为capture-catch，将<code>只触发handleTap2</code>。</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">capture-catch:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  outer view
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap3<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">capture-bind:</span>touchstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleTap4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    inner view
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅴ-事件对象"><a href="#Ⅴ-事件对象" class="headerlink" title="Ⅴ-事件对象"></a>Ⅴ-事件对象</h3><blockquote>
<p>如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。</p>
</blockquote>
<h4 id="1-BaseEvent-基础事件对象属性列表"><a href="#1-BaseEvent-基础事件对象属性列表" class="headerlink" title="1) BaseEvent 基础事件对象属性列表"></a>1) <strong>BaseEvent 基础事件对象属性列表</strong></h4><blockquote>
<ol>
<li>表格:</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
<th align="left">基础库版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#type">type</a></td>
<td align="left">String</td>
<td align="left">代表事件的类型</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#timeStamp">timeStamp</a></td>
<td align="left">Integer</td>
<td align="left">事件生成时的时间戳–页面打开到触发事件所经过的毫秒数</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#target">target</a></td>
<td align="left">Object</td>
<td align="left">触发事件的组件的一些属性值集合–触发事件的源组件</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget">currentTarget</a></td>
<td align="left">Object</td>
<td align="left">当前组件的一些属性值集合–事件绑定的当前组件</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#mark">mark</a></td>
<td align="left">Object</td>
<td align="left">事件标记数据</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.1</a></td>
</tr>
</tbody></table>
<ol start="2">
<li><p>补充说明</p>
</li>
<li><p>target</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">String</td>
<td align="left">事件源组件的id</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset">dataset</a></td>
<td align="left">Object</td>
<td align="left">事件源组件上由<code>data-</code>开头的自定义属性组成的集合</td>
</tr>
</tbody></table>
</li>
<li><p>currentTarget</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">id</td>
<td align="left">String</td>
<td align="left">当前组件的id</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset">dataset</a></td>
<td align="left">Object</td>
<td align="left">当前组件上由<code>data-</code>开头的自定义属性组成的集合</td>
</tr>
</tbody></table>
<p><code>说明</code>： target 和 currentTarget 可以参考上例中，点击 inner view 时，<code>handleTap3</code> 收到的事件对象 target 和 currentTarget 都是 inner，而 <code>handleTap2</code> 收到的事件对象 target 就是 inner，currentTarget 就是 middle</p>
</li>
</ol>
</blockquote>
<h4 id="2-TouchEvent-触摸事件对象属性列表（继承-BaseEvent）："><a href="#2-TouchEvent-触摸事件对象属性列表（继承-BaseEvent）：" class="headerlink" title="2) TouchEvent 触摸事件对象属性列表（继承 BaseEvent）："></a>2) <strong>TouchEvent 触摸事件对象属性列表（继承 BaseEvent）：</strong></h4><blockquote>
<ol>
<li>表格:</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#touches">touches</a></td>
<td align="left">Array</td>
<td align="left">触摸事件，当前停留在屏幕中的触摸点信息的数组</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#changedTouches">changedTouches</a></td>
<td align="left">Array</td>
<td align="left">触摸事件，当前变化的触摸点信息的数组</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>补充说明</p>
</li>
<li><p>touches</p>
<p>touches 是一个数组，每个元素为一个 Touch 对象（canvas 触摸事件中携带的 touches 是 CanvasTouch 数组）。 表示当前停留在屏幕上的触摸点。</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">identifier</td>
<td align="left">Number</td>
<td align="left">触摸点的标识符</td>
</tr>
<tr>
<td align="left">pageX, pageY</td>
<td align="left">Number</td>
<td align="left">距离文档左上角的距离，文档的左上角为原点 ，横向为X轴，纵向为Y轴</td>
</tr>
<tr>
<td align="left">clientX, clientY</td>
<td align="left">Number</td>
<td align="left">距离页面可显示区域（屏幕除去导航条）左上角距离，横向为X轴，纵向为Y轴</td>
</tr>
</tbody></table>
</li>
<li><p>changedTouches</p>
<p>changedTouches 数据格式同 touches。 表示有变化的触摸点，如从无变有（touchstart），位置变化（touchmove），从有变无（touchend、touchcancel）</p>
</li>
</ol>
</blockquote>
<h4 id="3-CustomEvent-自定义事件对象属性列表（继承-BaseEvent）："><a href="#3-CustomEvent-自定义事件对象属性列表（继承-BaseEvent）：" class="headerlink" title="3) CustomEvent 自定义事件对象属性列表（继承 BaseEvent）："></a>3) <strong>CustomEvent 自定义事件对象属性列表（继承 BaseEvent）：</strong></h4><blockquote>
<ol>
<li>表格</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#detail">detail</a></td>
<td align="left">Object</td>
<td align="left">额外的信息<br>自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入，媒体的错误事件会携带错误信息，详见<a href="https://developers.weixin.qq.com/miniprogram/dev/component">组件</a>定义中各个事件的定义。</td>
</tr>
</tbody></table>
</blockquote>
<hr>
<h1 id="五、逻辑层详解"><a href="#五、逻辑层详解" class="headerlink" title="五、逻辑层详解"></a>五、逻辑层详解</h1><blockquote>
<ol>
<li>原理:小程序开发框架的逻辑层使用 <code>JavaScript</code> 引擎为小程序提供开发者 <code>JavaScript</code> 代码的运行环境以及微信小程序的特有功能。</li>
</ol>
<p>  ​	逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。</p>
<p>  ​	开发者写的所有代码最终将会打包成一份 <code>JavaScript</code> 文件，并在小程序启动的时候运行，直到小程序销毁。这一行为类似<a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">ServiceWorker</a>，所以逻辑层也称之为 App Service。</p>
<ol start="2">
<li>在 <code>JavaScript</code> 的基础上，我们增加了一些功能，以方便小程序的开发：</li>
</ol>
<ul>
<li>增加 <code>App</code> 和 <code>Page</code> 方法，进行<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">程序注册</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">页面注册</a>。</li>
<li>增加 <code>getApp</code> 和 <code>getCurrentPages</code> 方法，分别用来获取 <code>App</code> 实例和当前页面栈。</li>
<li>提供丰富的 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html">API</a>，如微信用户数据，扫一扫，支付等微信特有能力。</li>
<li>提供<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html#%E6%A8%A1%E5%9D%97%E5%8C%96">模块化</a>能力，每个页面有独立的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html#%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%9F%9F">作用域</a>。</li>
</ul>
<p><strong>注意：小程序框架的逻辑层并非运行在浏览器中，因此 <code>JavaScript</code> 在 web 中一些能力都无法使用，如 <code>window</code>，<code>document</code> 等。</strong></p>
<p>该部分将<code>截取官方文档</code>并加以注解</p>
</blockquote>
<h2 id="1、页面路由"><a href="#1、页面路由" class="headerlink" title="1、页面路由"></a>1、页面路由</h2><blockquote>
<p>在小程序中所有页面的路由全部由框架进行管理</p>
</blockquote>
<h3 id="Ⅰ-页面栈与路由方式"><a href="#Ⅰ-页面栈与路由方式" class="headerlink" title="Ⅰ-页面栈与路由方式"></a>Ⅰ-页面栈与路由方式</h3><blockquote>
<ol>
<li>框架以<code>栈</code>的形式维护了当前的所有页面。</li>
<li>对于路由的<code>触发方式</code>以及页面<code>生命周期函数</code>如下：</li>
</ol>
<table>
<thead>
<tr>
<th align="left">路由方式</th>
<th>页面栈表现</th>
<th align="left">触发时机</th>
<th align="left">路由前页面</th>
<th align="left">路由后页面</th>
</tr>
</thead>
<tbody><tr>
<td align="left">初始化</td>
<td>新页面入栈</td>
<td align="left">小程序打开的第一个页面</td>
<td align="left"></td>
<td align="left">onLoad, onShow</td>
</tr>
<tr>
<td align="left">打开新页面</td>
<td>新页面入栈</td>
<td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">wx.navigateTo</a> <br>使用组件<navigator open-type="navigateTo"></navigator></td>
<td align="left">onHide</td>
<td align="left">onLoad, onShow</td>
</tr>
<tr>
<td align="left">页面重定向</td>
<td>当前页面出栈，新页面入栈</td>
<td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html">wx.redirectTo</a> <br>使用组件<navigator open-type="redirectTo"></navigator></td>
<td align="left">onUnload</td>
<td align="left">onLoad, onShow</td>
</tr>
<tr>
<td align="left">页面返回</td>
<td>页面不断出栈，直到目标返回页</td>
<td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">wx.navigateBack</a> <br>使用组件<navigator open-type="navigateBack"> <br>用户按左上角返回按钮</navigator></td>
<td align="left">onUnload</td>
<td align="left">onShow</td>
</tr>
<tr>
<td align="left">Tab 切换</td>
<td>页面全部出栈，只留下新的 Tab 页面<br>如果从没有<code>tabBar</code>的页面跳转至有<code>tabBar</code>的页面就<code>一定要用这个</code>,而不是上面的,否则会报错</td>
<td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html">wx.switchTab</a> <br>使用组件<navigator open-type="switchTab"><br>用户切换 Tab</navigator></td>
<td align="left"></td>
<td align="left">各种情况请参考下表</td>
</tr>
<tr>
<td align="left">重启动</td>
<td>页面全部出栈，只留下新的页面</td>
<td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> <br>使用组件<navigator open-type="reLaunch"></navigator></td>
<td align="left">onUnload</td>
<td align="left">onLoad, onShow</td>
</tr>
</tbody></table>
<ol start="2">
<li>代码示例:</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx">wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当前页面被隐藏，缓存在栈中，最多存放10个页面</span>
url<span class="token punctuation">:</span> <span class="token string">"/pages/posts/post"</span> <span class="token comment" spellcheck="true">//跳转的页面路径</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当前页面被销毁</span>
url<span class="token punctuation">:</span> <span class="token string">"/pages/posts/post"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>Tab 切换对应的生命周期（以 A、B 页面为 Tabbar 页面，C 是从 A 页面打开的页面，D 页面是从 C 页面打开的页面为例）：</li>
</ol>
<table>
<thead>
<tr>
<th align="left">当前页面</th>
<th align="left">路由后页面</th>
<th align="left">触发的生命周期（按顺序）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">A</td>
<td align="left">Nothing happend</td>
</tr>
<tr>
<td align="left">A</td>
<td align="left">B</td>
<td align="left">A.onHide(), B.onLoad(), B.onShow()</td>
</tr>
<tr>
<td align="left">A</td>
<td align="left">B（再次打开）</td>
<td align="left">A.onHide(), B.onShow()</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">A</td>
<td align="left">C.onUnload(), A.onShow()</td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">B</td>
<td align="left">C.onUnload(), B.onLoad(), B.onShow()</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">B</td>
<td align="left">D.onUnload(), C.onUnload(), B.onLoad(), B.onShow()</td>
</tr>
<tr>
<td align="left">D（从转发进入）</td>
<td align="left">A</td>
<td align="left">D.onUnload(), A.onLoad(), A.onShow()</td>
</tr>
<tr>
<td align="left">D（从转发进入）</td>
<td align="left">B</td>
<td align="left">D.onUnload(), B.onLoad(), B.onShow()</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="Ⅱ-Tips"><a href="#Ⅱ-Tips" class="headerlink" title="Ⅱ-Tips"></a>Ⅱ-Tips</h3><blockquote>
<ul>
<li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li>
<li><code>switchTab</code> 只能打开 tabBar 页面。</li>
<li><code>reLaunch</code> 可以打开任意页面。</li>
<li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li>
<li>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</li>
<li><code>注意</code>:开发者可以使用 <code>getCurrentPages()</code> 函数获取当前页面栈</li>
<li>页面栈中最多存在<code>10</code>个</li>
</ul>
</blockquote>
<h2 id="2、模块化"><a href="#2、模块化" class="headerlink" title="2、模块化"></a>2、模块化</h2><blockquote>
<p>可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/module.html"><code>module.exports</code></a> 或者 <code>exports</code> 才能对外暴露接口。</p>
</blockquote>
<hr>
<h1 id="六、组件与组件库"><a href="#六、组件与组件库" class="headerlink" title="六、组件与组件库"></a>六、组件与组件库</h1><h2 id="1、官方组件"><a href="#1、官方组件" class="headerlink" title="1、官方组件"></a>1、官方组件</h2><blockquote>
<p>重点举例⼩程序中常⽤的布局组件 view,tex 等,现只举例部分,之后遇到觉得需要mark再写入,大部分可以看<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">官方文档组件部分</a>,便不太多赘述</p>
</blockquote>
<h3 id="Ⅰ-view"><a href="#Ⅰ-view" class="headerlink" title="Ⅰ-view"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">view</a></h3><blockquote>
<ol>
<li>在小程序中,通常使用<code>&lt;view/&gt;</code>代替<code>&lt;div/&gt;</code>作为容器来做布局</li>
</ol>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--pages/welcome/welcome.wxml--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/测试头像图片.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>Hello,洪jl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- &lt;button>开启小程序之旅&lt;/button> --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>开启小程序之旅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅱ-text"><a href="#Ⅱ-text" class="headerlink" title="Ⅱ-text"></a>Ⅱ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/text.html">text</a></h3><blockquote>
<ol>
<li><p>⽂本标签 </p>
</li>
<li><p>只能嵌套text </p>
</li>
<li><p>⻓按⽂字可以复制（只有该标签有这个功能）–&gt;selectable</p>
</li>
<li><p>可以对如: <code>空格回车&amp;nbsp;</code> 进⾏编码  –&gt;decode</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>selectable</td>
<td>Boolean</td>
<td>false</td>
<td>⽂本是否可选</td>
</tr>
<tr>
<td>decode</td>
<td>Boolean</td>
<td>false</td>
<td>是否解码</td>
</tr>
</tbody></table>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">selectable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{false}}<span class="token punctuation">"</span></span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{false}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   普<span class="token entity" title="&nbsp;">&amp;nbsp;</span>通
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅲ-image"><a href="#Ⅲ-image" class="headerlink" title="Ⅲ-image"></a>Ⅲ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">image</a></h3><blockquote>
<ol>
<li><p>图⽚标签，image组件<code>默认</code>宽度320px、⾼度240px,所以如果不进行宽高设置,不会进行自适应</p>
</li>
<li><p>⽀持懒加载</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>String</td>
<td></td>
<td>图⽚资源地址</td>
</tr>
<tr>
<td>mode</td>
<td>String</td>
<td><code>scaleToFill</code></td>
<td>图⽚裁剪、缩放的模式</td>
</tr>
<tr>
<td>lazy-load</td>
<td>Boolean</td>
<td>false</td>
<td>图⽚懒加载</td>
</tr>
</tbody></table>
<ol start="3">
<li><code>mode</code>模式列举:</li>
</ol>
<table>
<thead>
<tr>
<th>模式</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>缩放</td>
<td>scaleToFill</td>
<td>不保持纵横⽐缩放图⽚，使图⽚的宽⾼完全拉伸⾄填满image 元素</td>
</tr>
<tr>
<td>缩放</td>
<td>aspectFit</td>
<td>保持纵横⽐缩放图⽚，使图⽚的⻓边能完全显⽰出来。</td>
</tr>
<tr>
<td>缩放</td>
<td>aspectFill</td>
<td>保持纵横⽐缩放图⽚，只保证图⽚的短边能完全显⽰出来</td>
</tr>
<tr>
<td>缩放</td>
<td>widthFix</td>
<td>宽度不变，⾼度⾃动变化，保持原图宽⾼⽐不变</td>
</tr>
<tr>
<td>裁剪</td>
<td>top</td>
<td>不缩放图⽚，只显⽰图⽚的顶部区域</td>
</tr>
<tr>
<td>裁剪</td>
<td>bottom</td>
<td>不缩放图⽚，只显⽰图⽚的底部区域</td>
</tr>
<tr>
<td>裁剪</td>
<td>center</td>
<td>不缩放图⽚，只显⽰图⽚的中间区域</td>
</tr>
<tr>
<td>裁剪</td>
<td>left</td>
<td>不缩放图⽚，只显⽰图⽚的左边区域</td>
</tr>
<tr>
<td>裁剪</td>
<td>right</td>
<td>不缩放图⽚，只显⽰图⽚的右边区域</td>
</tr>
<tr>
<td>裁剪</td>
<td><code>top left</code>、<code>top right</code><br><code>bottom left</code>、<code>bottom right</code></td>
<td>不缩放图⽚,只显示值所指向区域</td>
</tr>
</tbody></table>
<ol start="4">
<li>代码示例:</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>  <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectFit<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/测试头像图片.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="5">
<li><p>应用场景举例,简单效果对比</p>
<ol>
<li><p>使用默认mode效果 –&gt;会将图片进行拉伸,导致图片变形</p>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210507145239985.png" alt="image-20210507145239985"></p>
</li>
<li><p>设置为<code>aspectFill</code>效果 –&gt;保持纵横⽐缩放图⽚，只保证图⽚的短边能完全显⽰出来,图片不会变形</p>
<p><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210507145301242.png" alt="image-20210507145301242"></p>
</li>
<li><p>根据不同的场景选择不同的<code>mode</code>才是最正确的,就如同该截图场景中,<code>aspectFill</code>明显优于默认</p>
</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="Ⅳ-swiper"><a href="#Ⅳ-swiper" class="headerlink" title="Ⅳ-swiper"></a>Ⅳ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">swiper</a></h3><blockquote>
<p>滑块<code>视图容器</code>。其中只可放置<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper-item.html">swiper-item</a>组件，否则会导致未定义的行为。</p>
<ol>
<li>代码示例</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pages<span class="token operator">/</span>posts<span class="token operator">/</span>posts<span class="token punctuation">.</span>wxml<span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 
    <span class="token comment" spellcheck="true">//1. "false" ==true 普通字符串  </span>
    <span class="token comment" spellcheck="true">//    "{{false}}"==false   {{}}视作运算标记,里面的内容表示表达式 </span>
    <span class="token comment" spellcheck="true">//2. 当你的属性为true时,可以省略value值-- indicator-dots="{{true}}" == indicator-dots</span>
  <span class="token operator">--</span><span class="token operator">></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">indicator-dots</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{true}}<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token attr-name">duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">vertical</span> <span class="token attr-name">circular</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 插槽 <span class="token operator">--</span><span class="token operator">></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scaleToFill<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 插槽 <span class="token operator">--</span><span class="token operator">></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scaleToFill<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 插槽 <span class="token operator">--</span><span class="token operator">></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scaleToFill<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/3.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>该轮播图代码效果预览: <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/swiper%E4%BB%A3%E7%A0%81%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88.gif" alt="swiper代码轮播图效果预览"></li>
</ol>
</blockquote>
<h3 id="Ⅴ-scroll-view"><a href="#Ⅴ-scroll-view" class="headerlink" title="Ⅴ-scroll-view"></a>Ⅴ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a></h3><blockquote>
<p>可滚动视图区域。使用竖向滚动时，需要给<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a>一个固定高度，通过 WXSS 设置 height。组件属性的长度单位默认为px，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a>起支持传入单位(rpx&#x2F;px)。</p>
<ol>
<li>使用举例图</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210507172539074.png" alt="image-20210507172539074"></p>
</blockquote>
<h2 id="2、LinUi组件库"><a href="#2、LinUi组件库" class="headerlink" title="2、LinUi组件库"></a>2、<a href="https://doc.mini.talelin.com/">LinUi</a>组件库</h2><h3 id="Ⅰ-安装与使用"><a href="#Ⅰ-安装与使用" class="headerlink" title="Ⅰ-安装与使用"></a>Ⅰ-安装与使用</h3><blockquote>
<ol>
<li><p><code>Lin UI</code> 是基于 <strong>微信小程序原生语法</strong> 实现的组件库。遵循简洁，易用的设计规范。</p>
</li>
<li><p>与其他组件库不同的是，除了提供基本的组件外，还会提供 <code>wxs模块</code> 、<code>高级组件</code> 、 <code>电商组件模块</code> 等等。 例如，在电商项目里常用的 <code>SKU联动选择</code> ，<code>城市选择器</code> 等</p>
</li>
<li><p><a href="https://doc.mini.talelin.com/start/"><code>安装</code></a>过程可看官方文档:</p>
</li>
</ol>
<ol>
<li>打开小程序的项目根目录，执行下面的命令（如果使用了云开发，需要进入miniprogram文件夹下执行下面的命令）</li>
</ol>
<pre class="line-numbers language-sh"><code class="language-sh">npm init
/*注意事项
1.执行npm init进行初始化，此时会生成一个package.json文件，如果不进行npm init，在构建npm的时候会报一个错误：没有找到 node_modules 目录
2.不建议使用cnpm，这样会带来一些未知的错误。如果网络情况不佳，可以使用下面的命令行更换为淘宝源。
npm config set registry https://registry.npm.taobao.org */
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 2)继续执行下面的命令</p>
<pre class="line-numbers language-sh"><code class="language-sh">npm install lin-ui
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li>安装完成后在小程序需要点击<code>工具</code>–&gt;<code>构建 npm</code>才可以使用(<code>所有npm引入的都需要这一步</code>)</li>
<li>要使用<code>自定义组件</code>的话,需要在<code>配置.json</code>文件中(可以在全局的也可以在页面的,作用域不同)注册,具体实现看下面示例</li>
</ol>
</blockquote>
<h3 id="Ⅱ-avatar头像"><a href="#Ⅱ-avatar头像" class="headerlink" title="Ⅱ-avatar头像"></a>Ⅱ-<a href="https://doc.mini.talelin.com/component/view/avatar.html">avatar</a>头像</h3><blockquote>
<ol>
<li>要使用<code>自定义组件</code>的话,需要在当前page页面.json文件中注册</li>
</ol>
<pre class="line-numbers language-json"><code class="language-json">//page.json
<span class="token punctuation">{</span>
  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"l-avatar"</span><span class="token operator">:</span><span class="token string">"/miniprogram_npm/lin-ui/avatar/index"</span><span class="token punctuation">,</span>
     <span class="token property">"组件名(可以自取,一般如果是linui,就l-xxx)"</span><span class="token operator">:</span><span class="token string">"构建后的路径--要具体到那个文件夹下的js"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>使用:</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pages<span class="token operator">/</span>welcome<span class="token operator">/</span>welcome<span class="token punctuation">.</span>wxml<span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-load</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectFit<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/测试头像图片.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span> <span class="token operator">--</span><span class="token operator">></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>l-avatar</span> 
 <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l-avatar<span class="token punctuation">"</span></span>
 <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span> 
 <span class="token attr-name">open-data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[<span class="token punctuation">'</span>userAvatarUrl<span class="token punctuation">'</span>,<span class="token punctuation">'</span>userNickName<span class="token punctuation">'</span>]}}<span class="token punctuation">"</span></span>
 <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span>
 <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">/* pages/welcome/welcome.wxss */</span>
<span class="token comment" spellcheck="true">//可以自己写样式类,加到组件上</span>
<span class="token punctuation">.</span>l<span class="token operator">-</span>avatar<span class="token punctuation">{</span>
  margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 160rpx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅲ-icon"><a href="#Ⅲ-icon" class="headerlink" title="Ⅲ-icon"></a>Ⅲ-icon</h3><blockquote>
<ol>
<li>在当前page页面.json文件中注册</li>
</ol>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"l-icon"</span><span class="token operator">:</span><span class="token string">"/miniprogram_npm/lin-ui/icon/index"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>使用</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>l-icon</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#34bfa3<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>l-icon</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>l-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>research<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>l-icon</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<hr>
<h1 id="七、小程序API"><a href="#七、小程序API" class="headerlink" title="七、小程序API"></a>七、小程序<a href="https://developers.weixin.qq.com/miniprogram/dev/api/">API</a></h1><h2 id="1、数据缓存"><a href="#1、数据缓存" class="headerlink" title="1、数据缓存"></a>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html">数据缓存</a></h2><blockquote>
<p>类似于网页的<code>localStorage</code></p>
<p>官方文档很详细,此处给出具体地址,翻阅文档即可</p>
</blockquote>
<h2 id="2、交互"><a href="#2、交互" class="headerlink" title="2、交互"></a>2、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html">交互</a></h2><blockquote>
<p>一些微信官方给出的组件,具体参数解释看文档,以下给出学习过程中代码示例</p>
</blockquote>
<h3 id="Ⅰ-wx-showToast与wx-showModal"><a href="#Ⅰ-wx-showToast与wx-showModal" class="headerlink" title="Ⅰ-wx.showToast与wx.showModal"></a>Ⅰ-wx.showToast与wx.showModal</h3><blockquote>
<ol>
<li><code>wx.showToast</code>代码示例:</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js">  wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//此处其实已经被修改完状态,才开始提示,所以要反过来</span>
      title<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'收藏成功'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> <span class="token number">1000</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><code>wx.showModal</code>代码示例:</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">async</span> <span class="token function">onCollect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      title<span class="token punctuation">:</span>  <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'进行收藏'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>confirm<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//点击取消退出</span>
     <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//点击确认后运行的代码</span>
      wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//此处其实已经被修改完状态,才开始提示,所以要反过来</span>
      title<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'收藏成功'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> <span class="token number">1000</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>运行效果示例(两者并存的效果): <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/showToas%E4%B8%8EshowModal%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt="showToas与showModal运行效果图"></li>
</ol>
</blockquote>
<h2 id="3、媒体"><a href="#3、媒体" class="headerlink" title="3、媒体"></a>3、媒体</h2><h3 id="Ⅰ-媒体音乐播放"><a href="#Ⅰ-媒体音乐播放" class="headerlink" title="Ⅰ-媒体音乐播放"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html">媒体音乐播放</a></h3><blockquote>
<ol>
<li><p>wx.getBackgroundAudioManager–播放音乐</p>
</li>
<li><p>代码示例</p>
</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//此处keyi </span>
onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mgr <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getBackgroundAudioManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>_mgr <span class="token operator">=</span> mgr
    <span class="token comment" spellcheck="true">// if(app.gIsPlayMusic) {  此处进入即默认播放</span>
    <span class="token comment" spellcheck="true">//   mgr.src = this.data.postData.music.url</span>
    <span class="token comment" spellcheck="true">//   mgr.title = this.data.postData.music.title</span>
    <span class="token comment" spellcheck="true">// }</span>

    mgr<span class="token punctuation">.</span><span class="token function">onPlay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"监听播放"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    mgr<span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"监听暂停"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
   * 音乐播放
   */</span>
  <span class="token function">onMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mgr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>_mgr
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>isPlaying<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mgr<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      app<span class="token punctuation">.</span>gIsPlayMusicId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//当前播放状态如果为true则终止(stop())、pause()暂停</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      mgr<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>postData<span class="token punctuation">.</span>music<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true">//此处为播放</span>
      mgr<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>postData<span class="token punctuation">.</span>music<span class="token punctuation">.</span>title
      app<span class="token punctuation">.</span>gIsPlayMusicId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>_pid
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      isPlaying<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>isPlaying
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="Ⅱ-图片"><a href="#Ⅱ-图片" class="headerlink" title="Ⅱ-图片"></a>Ⅱ-<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html">图片</a></h3><h4 id="1-wx-previewImage-Object-object"><a href="#1-wx-previewImage-Object-object" class="headerlink" title="1) wx.previewImage(Object object)"></a>1) <a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html">wx.previewImage(Object object)</a></h4><blockquote>
<p>在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作</p>
<ol>
<li><p>代码示例</p>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pages<span class="token operator">/</span>movie<span class="token operator">-</span>detail<span class="token operator">/</span>movie<span class="token operator">-</span>detail<span class="token punctuation">.</span>wxml<span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name"><span class="token namespace">catch:</span>tap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onViewPost<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie-img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{movie.images}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">// pages/movie-detail/movie-detail.js</span>
<span class="token function">onViewPost</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//相册功能(预览)</span>
    wx<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      urls<span class="token punctuation">:</span> <span class="token punctuation">[</span>images1<span class="token punctuation">,</span>images2<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>详见开发文档</p>
</li>
</ol>
</blockquote>
<h2 id="4、界面"><a href="#4、界面" class="headerlink" title="4、界面"></a>4、界面</h2><h3 id="Ⅰ-Tab-Bar"><a href="#Ⅰ-Tab-Bar" class="headerlink" title="Ⅰ-Tab Bar"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">Tab Bar</a></h3><blockquote>
<p>使用时在<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a>中进行配置即可,相关配置详情看全局配置文档,如果需要进行相应操作看官方文档</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token property">"tabBar"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">"selectedColor"</span><span class="token operator">:</span> <span class="token string">"#333333"</span><span class="token punctuation">,</span>
   <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#999999"</span><span class="token punctuation">,</span>
   <span class="token property">"borderStyle"</span><span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
   <span class="token property">"position"</span><span class="token operator">:</span> <span class="token string">"top"</span><span class="token punctuation">,</span>
   <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
       <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/posts/posts"</span><span class="token punctuation">,</span>
       <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"阅读"</span><span class="token punctuation">,</span>
       <span class="token property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"/images/tabBar/yuedu.png"</span><span class="token punctuation">,</span>
       <span class="token property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"/images/tabBar/yuedu_1.png"</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
       <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/movies/movies"</span><span class="token punctuation">,</span>
       <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"电影"</span><span class="token punctuation">,</span>
       <span class="token property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"/images/tabBar/dianying_1.png"</span><span class="token punctuation">,</span>
       <span class="token property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"/images/tabBar/dianying.png"</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">]</span>
 <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<hr>
<h1 id="八、小程序生命周期"><a href="#八、小程序生命周期" class="headerlink" title="八、小程序生命周期"></a>八、小程序生命周期</h1><blockquote>
<p>分为<code>应⽤⽣命周期</code>和<code>⻚⾯⽣命周期</code></p>
<p>关于小程序前后台的定义和小程序的运行机制，请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html">运行机制</a>章节。</p>
</blockquote>
<h2 id="1、应用生命周期"><a href="#1、应用生命周期" class="headerlink" title="1、应用生命周期"></a>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">应用生命周期</a></h2><blockquote>
<ol>
<li>应用生命周期表</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">必填</th>
<th align="left">说明</th>
<th>场景</th>
<th align="left">最低版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">onLaunch</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">生命周期回调——监听小程序初始化。</td>
<td>小程序初始化完成时触发，全局只触发一次。参数也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html">wx.getLaunchOptionsSync</a> 获取。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onShow-Object-object">onShow</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">生命周期回调——监听小程序启动或切前台。</td>
<td>小程序启动，或从后台进入前台显示时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppShow.html">wx.onAppShow</a> 绑定监听</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onHide">onHide</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">生命周期回调——监听小程序切后台。</td>
<td>小程序从前台进入后台时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppHide.html">wx.onAppHide</a> 绑定监听</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onError-String-error">onError</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">错误监听函数。</td>
<td>小程序发生脚本错误或 API 调用报错时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onError.html">wx.onError</a> 绑定监听</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onPageNotFound-Object-object">onPageNotFound</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">页面不存在监听函数。</td>
<td>小程序要打开的页面不存在时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html">wx.onPageNotFound</a> 绑定监听。</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onUnhandledRejection-Object-object">onUnhandledRejection</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">未处理的 Promise 拒绝事件监听函数。</td>
<td>小程序有未处理的 Promise 拒绝时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html">wx.onUnhandledRejection</a> 绑定监听</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.0</a></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onThemeChange-Object-object">onThemeChange</a></td>
<td align="left">function</td>
<td align="left">否</td>
<td align="left">监听系统主题变化</td>
<td>系统切换主题时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onThemeChange.html">wx.onThemeChange</a> 绑定监听</td>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td>
</tr>
<tr>
<td align="left">其他</td>
<td align="left">any</td>
<td align="left">否</td>
<td align="left">开发者可以添加任意的函数或数据变量到 <code>Object</code> 参数中，用 <code>this</code> 可以访问</td>
<td></td>
<td align="left"></td>
</tr>
</tbody></table>
<ol start="2">
<li>代码示例:</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  onLaunch <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Do something initial when launch.</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onShow <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Do something when show.</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onHide <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Do something when hide.</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onError <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  globalData<span class="token punctuation">:</span> <span class="token string">'I am global data'</span>
  <span class="token punctuation">,</span>
  <span class="token function">onPageNotFound</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token punctuation">:</span> <span class="token string">'pages/...'</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果是 tabbar 页面，请使用 wx.switchTab</span>
  <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h2 id="2、页面生命周期"><a href="#2、页面生命周期" class="headerlink" title="2、页面生命周期"></a>2、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">页面生命周期</a></h2><blockquote>
<ol>
<li>页面生命周期表</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#data">data</a></td>
<td align="left">Object</td>
<td align="left">页面的初始数据</td>
</tr>
<tr>
<td align="left">options</td>
<td align="left">Object</td>
<td align="left">页面的组件选项，同 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html"><code>Component</code> 构造器</a> 中的 <code>options</code> ，需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.1</a></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query">onLoad</a></td>
<td align="left">function</td>
<td align="left">生命周期回调—监听页面加载</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShow">onShow</a></td>
<td align="left">function</td>
<td align="left">生命周期回调—监听页面显示</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReady">onReady</a></td>
<td align="left">function</td>
<td align="left">生命周期回调—监听页面初次渲染完成</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide">onHide</a></td>
<td align="left">function</td>
<td align="left">生命周期回调—监听页面隐藏</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload">onUnload</a></td>
<td align="left">function</td>
<td align="left">生命周期回调—监听页面卸载</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPullDownRefresh">onPullDownRefresh</a></td>
<td align="left">function</td>
<td align="left">监听用户下拉动作</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReachBottom">onReachBottom</a></td>
<td align="left">function</td>
<td align="left">页面上拉触底事件的处理函数</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object">onShareAppMessage</a></td>
<td align="left">function</td>
<td align="left">用户点击右上角转发</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareTimeline">onShareTimeline</a></td>
<td align="left">function</td>
<td align="left">用户点击右上角转发到朋友圈</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onAddToFavorites-Object-object">onAddToFavorites</a></td>
<td align="left">function</td>
<td align="left">用户点击右上角收藏</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object">onPageScroll</a></td>
<td align="left">function</td>
<td align="left">页面滚动触发事件的处理函数</td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onResize-Object-object">onResize</a></td>
<td align="left">function</td>
<td align="left">页面尺寸改变时触发，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html#%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E5%90%AF%E7%94%A8%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E6%94%AF%E6%8C%81">响应显示区域变化</a></td>
</tr>
<tr>
<td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onTabItemTap-Object-object">onTabItemTap</a></td>
<td align="left">function</td>
<td align="left">当前是 tab 页时，点击 tab 时触发</td>
</tr>
<tr>
<td align="left">其他</td>
<td align="left">any</td>
<td align="left">开发者可以添加任意的函数或数据到 <code>Object</code> 参数中，在页面的函数中用 <code>this</code> 可以访</td>
</tr>
</tbody></table>
<ol start="2">
<li>官方的小程序页面生命周期图:</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AE%98%E6%96%B9%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE.png" alt="官方的小程序页面生命周期图"></p>
</blockquote>
<h2 id="3、组件生命周期-不算在小程序生命周期中"><a href="#3、组件生命周期-不算在小程序生命周期中" class="headerlink" title="3、组件生命周期-不算在小程序生命周期中"></a>3、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html">组件生命周期</a>-不算在小程序生命周期中</h2><blockquote>
<p>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发</p>
</blockquote>
<hr>
<h1 id="九、自定义组件"><a href="#九、自定义组件" class="headerlink" title="九、自定义组件"></a>九、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">自定义组件</a></h1><blockquote>
<p>开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似</p>
<p>这部分将截取<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">文档自定义组件部分</a>中常见的部分进行注解</p>
</blockquote>
<h2 id="1、组件模板和样式"><a href="#1、组件模板和样式" class="headerlink" title="1、组件模板和样式"></a>1、组件模板和样式</h2><blockquote>
<p>类似于页面，自定义组件拥有自己的 <code>wxml</code> 模板和 <code>wxss</code> 样式。</p>
</blockquote>
<h3 id="Ⅰ-组件样式"><a href="#Ⅰ-组件样式" class="headerlink" title="Ⅰ-组件样式"></a>Ⅰ-组件样式</h3><blockquote>
<p>组件对应 <code>wxss</code> 文件的样式，只对组件wxml内的节点生效。编写组件样式时，需要注意以下几点：</p>
<ul>
<li><p>组件和引用组件的页面不能使用id选择器（<code>#a</code>）、属性选择器（<code>[a]</code>）和标签名选择器，请改用class选择器。</p>
</li>
<li><p>组件和引用组件的页面中使用后代选择器（<code>.a .b</code>）在一些极端情况下会有非预期的表现，如遇，请避免使用。</p>
</li>
<li><p>子元素选择器（<code>.a&gt;.b</code>）只能用于 <code>view</code> 组件与其子节点之间，用于其他组件可能导致非预期的情况。</p>
</li>
<li><p>继承样式，如 <code>font</code> 、 <code>color</code> ，会从组件外继承到组件内。</p>
</li>
<li><p>除继承样式外， <code>app.wxss</code> 中的样式、组件所在页面的的样式对自定义组件无效（除非更改组件样式隔离选项）。</p>
</li>
</ul>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#a</span> </span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 在组件中不能使用 */</span>
<span class="token selector"><span class="token attribute">[a]</span> </span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 在组件中不能使用 */</span>
<span class="token selector">button </span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 在组件中不能使用 */</span>
<span class="token selector"><span class="token class">.a</span> > <span class="token class">.b</span> </span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 除非 .a 是 view 组件节点，否则不一定会生效 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>除此以外，组件可以指定它所在节点的默认样式，使用 <code>:host</code> 选择器（需要包含基础库 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.2</a> 或更高版本的开发者工具支持）。</p>
<p>注:此处本人出了一个<code>问题</code>,详见—&gt;本笔记的<code>杂记-&gt;初学者阶段遇到的问题与解决-&gt;Ⅶ</code></p>
</blockquote>
<h3 id="Ⅱ-外部样式类"><a href="#Ⅱ-外部样式类" class="headerlink" title="Ⅱ-外部样式类"></a>Ⅱ-外部样式类</h3><blockquote>
<ol>
<li>有时，组件希望接受外部传入的样式类。此时可以在 <code>Component</code> 中用 <code>externalClasses</code> 定义段定义若干个外部样式类。这个特性可以用于实现类似于 <code>view</code> 组件的 <code>hover-class</code> 属性：页面可以提供一个样式类，赋予 <code>view</code> 的 <code>hover-class</code> ，这个样式类本身写在页面中而非 <code>view</code> 组件的实现中。</li>
</ol>
<p> <strong>注意：在同一个节点上使用普通样式类和外部样式类时，两个类的<code>优先级是未定义</code>的，因此最好避免这种情况。</strong></p>
<ol start="2">
<li><p><strong>代码示例：</strong></p>
<ol>
<li><p>自定义组件部分定义与占位符示例</p>
<pre class="line-numbers language-xaml"><code class="language-xaml">/* 组件 custom-component.js */
Component({
  externalClasses: ['my-class']
})
                                                                  
<!-- 组件 custom-component.wxml 如何引用 -->
<custom-component class="my-class">这段文本的颜色由组件外的 class 决定</custom-component>                                 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，组件的使用者可以指定这个样式类对应的 class ，就像使用普通属性一样。在 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.1</a> 之后，可以指定多个对应的 class 。</p>
</li>
</ol>
</li>
<li><p>外部使用自定义组件并传入样式类</p>
<pre class="line-numbers language-xaml"><code class="language-xaml"><!-- 页面的 WXML -->
<custom-component my-class="red-text" />
<custom-component my-class="large-text" />
<!-- 以下写法需要基础库版本 2.7.1 以上  注意 这只是一个组件传入两个类名,而不是分别创建两个组件-->
<custom-component my-class="red-text large-text" />
                                                                                                              
------------ 样式类声明 页面.wxss ---------------------------------
.red-text {
  color: red;
}
.large-text {
  font-size: 1.5em;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>主要用途:</p>
<ol>
<li><p>如果子组件都是我们自己开发的,而且无所谓改动自定义组件源码,那可以不使用这个</p>
</li>
<li><p>如果自定义组件封装已经足够成熟,不想再动其中样式源码,就可以用外部样式类进行对自定义组件样式改变(使用<code>!important</code>属性能将样式优先级提高),以此进行对于封装好的组件的样式修改,同理可以运用于第三方库</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.movielist</span></span><span class="token punctuation">{</span> //外部样式类
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">25</span>rpx<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span> <span class="token important">!important</span><span class="token punctuation">;</span>  //此处就可以将这个样式提升到自定义组件样式优先级之上
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p>以后如果自己封装自定义组件,就可以向外暴露外部样式类</p>
</li>
</ol>
</blockquote>
<h2 id="2、组件间通信与事件"><a href="#2、组件间通信与事件" class="headerlink" title="2、组件间通信与事件"></a>2、组件间通信与事件</h2><h3 id="Ⅰ-组件间通信"><a href="#Ⅰ-组件间通信" class="headerlink" title="Ⅰ-组件间通信"></a>Ⅰ-组件间通信</h3><blockquote>
<p>组件间的基本通信方式有以下几种。</p>
<ul>
<li>WXML 数据绑定：用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容数据（自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.9</a> 开始，还可以在数据中包含函数）。具体在 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">组件模板和样式</a> 章节中介绍。</li>
<li>事件：用于子组件向父组件传递数据，可以传递任意数据。</li>
<li>如果以上两种方式不足以满足需要，父组件还可以通过 <code>this.selectComponent</code> 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法。</li>
</ul>
</blockquote>
<h3 id="Ⅱ-触发事件"><a href="#Ⅱ-触发事件" class="headerlink" title="Ⅱ-触发事件"></a>Ⅱ-触发事件</h3><blockquote>
<p>自定义组件触发事件时，需要使用 <code>triggerEvent</code> 方法，指定事件名、detail对象和事件选项</p>
<ol>
<li>官方代码示例</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在自定义组件中 <span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onTap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击这个按钮将触发“myevent”事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">//js文件中</span>
<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    onTap<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> myEventDetail <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// detail对象，提供给事件监听函数</span>
      <span class="token keyword">var</span> myEventOption <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 触发事件的选项</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">'myevent'</span><span class="token punctuation">,</span> myEventDetail<span class="token punctuation">,</span> myEventOption<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>本人在<a href="https://gitee.com/hongjilin/wechat-applet-demo-source-code"><code>hello小程序</code></a>源码中应用</li>
</ol>
<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pages<span class="token operator">/</span>posts<span class="token operator">/</span>posts<span class="token punctuation">.</span>wxml<span class="token operator">--</span><span class="token operator">></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{posts}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postId<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>post</span> <span class="token attr-name"><span class="token namespace">bind:</span>posttap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onGoDetail<span class="token punctuation">"</span></span> <span class="token attr-name">res</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">// components/posts/index.js  这是自定义组件</span>

 methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    onTap <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//此处不能用箭头函数,否则`  this.triggerEvent`将会找不到报错</span>
    <span class="token keyword">const</span> pid <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>res<span class="token punctuation">.</span>postId
    <span class="token comment" spellcheck="true">// console.log( this.data)</span>
    <span class="token comment" spellcheck="true">// console.log( this.properties)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">'posttap'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
        pid   <span class="token comment" spellcheck="true">//这个参数会在事件调用处获取到</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// pages/posts/posts.js  这个是在调用自定义组件的页面的js中,即可以使用自己的方法,单纯是调用自定义组件定义的事件</span>
  onGoDetail<span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//获取组件的自定义属性</span>
    <span class="token comment" spellcheck="true">//先判断,如果e.currentTarget.dataset去得到值,就取有值的 下面这3种写法效果等同</span>
    <span class="token comment" spellcheck="true">//  let pid = (e.currentTarget.dataset.id)?e.currentTarget.dataset.id:e.detail.pid </span>
    <span class="token comment" spellcheck="true">// let pid = e.detail.pid|e.currentTarget.dataset.id  </span>
    <span class="token keyword">let</span> pid <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>pid <span class="token operator">||</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id
    wx<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      url<span class="token punctuation">:</span> <span class="token string">'/pages/post-detail/post-detail?pid='</span> <span class="token operator">+</span> pid<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<hr>
<h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><blockquote>
<p>体系学习过程笔记外的知识点</p>
</blockquote>
<h2 id="1、微信开发者工具使用技巧"><a href="#1、微信开发者工具使用技巧" class="headerlink" title="1、微信开发者工具使用技巧"></a>1、微信开发者工具使用技巧</h2><h3 id="Ⅰ-新建页面的技巧与规则"><a href="#Ⅰ-新建页面的技巧与规则" class="headerlink" title="Ⅰ-新建页面的技巧与规则:"></a>Ⅰ-新建页面的技巧与规则:</h3><blockquote>
<ol>
<li>本技巧适用于<code>微信开发者工具</code></li>
<li>当你需要新建一个页面时:新建一个page文件目录–&gt;右键<code>新建page</code>–&gt;输入page名字–&gt;一次生成所需四个文件 且自动注册到<code>app.json</code>中</li>
<li>##如果配置文件中出现错误时,自动新建无法成功,更无法自动注册</li>
</ol>
</blockquote>
<h3 id="Ⅱ-指定初始页面"><a href="#Ⅱ-指定初始页面" class="headerlink" title="Ⅱ-指定初始页面"></a>Ⅱ-指定初始页面</h3><blockquote>
<p>当你写多个page时,如果每次通过修改<code>app.json</code>的配置项来指定初始页面,十分麻烦</p>
<ol>
<li><p>可以在<code>app.json</code>用”entryPagePath”:”pages&#x2F;页面文件夹&#x2F;页面文件名” 配置首页,但仍要修改配置文件,十分麻烦</p>
</li>
<li><p>使用编译器的<code>工具栏</code>–&gt;添加<code>编译模式</code>进行指定初始化页面(启动页面默认值要先删除才有提示)</p>
</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210421181759900.png" alt="image-20210421181759900"></p>
<ol start="3">
<li>添加后每次调试只要<code>选择编译模式</code>,就可以切换初始页面</li>
</ol>
</blockquote>
<h3 id="Ⅲ-ctrl-滚轮缩放工具界面"><a href="#Ⅲ-ctrl-滚轮缩放工具界面" class="headerlink" title="Ⅲ-ctrl+滚轮缩放工具界面"></a>Ⅲ-ctrl+滚轮缩放工具界面</h3><blockquote>
<p>只能调成字体了,<code>这个BUG被修复了</code>:dog:<img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210423095423566.png" alt="image-20210423095423566"></p>
</blockquote>
<h2 id="2、微信开发常见编程方法与细节"><a href="#2、微信开发常见编程方法与细节" class="headerlink" title="2、微信开发常见编程方法与细节"></a>2、微信开发常见编程方法与细节</h2><blockquote>
<p>学习、练习、开发微信小程序过程中遇到的一些基础知识与细节记录</p>
</blockquote>
<h3 id="Ⅰ-相对路径规则"><a href="#Ⅰ-相对路径规则" class="headerlink" title="Ⅰ-相对路径规则:"></a>Ⅰ-相对路径规则:</h3><blockquote>
<ol>
<li><p><code>/</code>代表根目录:如引入根目录下的images&#x2F;图片 </p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/测试头像图片.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>其余的如:<code>../</code>上一级目录、<code>./</code>同级目录,都与一般无异</p>
</li>
</ol>
</blockquote>
<h3 id="Ⅱ-npm引入第三方库后需进行构建"><a href="#Ⅱ-npm引入第三方库后需进行构建" class="headerlink" title="Ⅱ-npm引入第三方库后需进行构建"></a>Ⅱ-npm引入第三方库后需进行构建</h3><blockquote>
<p>安装第三方库后在小程序需要点击<code>工具</code>–&gt;<code>构建 npm</code>才可以使用</p>
<p><code>所有npm引入的都需要这一步</code></p>
</blockquote>
<h2 id="3、初学阶段遇到的问题与解决"><a href="#3、初学阶段遇到的问题与解决" class="headerlink" title="3、初学阶段遇到的问题与解决"></a>3、初学阶段遇到的问题与解决</h2><blockquote>
<p>这部分将记录本人初学小程序过程遇到的问题,这部分应该大部分是小程序初学者才会遇到的,或者是本人虽然可以直接解决但觉得别人可能会遇到的便记录下来。而后续进阶阶段或者实战开发时遇到的问题,将记录在下面另一章节</p>
</blockquote>
<h3 id="Ⅰ-设置整个page的背景色"><a href="#Ⅰ-设置整个page的背景色" class="headerlink" title="Ⅰ-设置整个page的背景色"></a>Ⅰ-设置整个page的背景色</h3><blockquote>
<ol>
<li><p>问题:当我设置页面背景色时,发现添加背景色的page的高度是被内容撑起而不是全屏?如何解决最简单<br>问题截图 <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210421153332813.png" alt="image-20210421153332813"> 解决后 <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210421153607334.png" alt="image-20210421153607334"></p>
<p>解决:可以在你需要修改的page的样式文件中,给<code>&lt;page/&gt;</code>标签加样式,默认小程序是使用<page>作为最外层的</page></p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">page</span><span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#b3d4db</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</blockquote>
<h3 id="Ⅱ-小程序中使用less"><a href="#Ⅱ-小程序中使用less" class="headerlink" title="Ⅱ-小程序中使用less"></a>Ⅱ-小程序中使用less</h3><blockquote>
<p>原⽣⼩程序不⽀持 less ，其他基于⼩程序的框架⼤体都⽀持，如 wepy ， mpvue ， taro 等。 但是仅仅因为⼀个less功能，⽽去引⼊⼀个框架，肯定是不可取的。因此可以⽤以下⽅式来实现</p>
<ol>
<li><p>编辑器是<code>vscode</code></p>
</li>
<li><p>安装插件<code>easy less</code></p>
</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210421151330740.png" alt="image-20210421151330740"></p>
<ol start="3">
<li>在vscode的设置中加⼊如下，配置</li>
</ol>
<pre class="line-numbers language-json"><code class="language-json">  <span class="token property">"less.compile"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"outExt"</span><span class="token operator">:</span> <span class="token string">".wxss"</span>
   <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>在要编写样式的地⽅，新建 less ⽂件，如 index.less ,然后正常编辑即可。</li>
</ol>
</blockquote>
<h3 id="Ⅲ-报错-TypeError-wx-getMenuButtonBoundingClientRect-is-not-a-function"><a href="#Ⅲ-报错-TypeError-wx-getMenuButtonBoundingClientRect-is-not-a-function" class="headerlink" title="Ⅲ-报错: TypeError: wx.getMenuButtonBoundingClientRect is not a function"></a>Ⅲ-报错: <code>TypeError: wx.getMenuButtonBoundingClientRect is not a function</code></h3><blockquote>
<p>控制台报错: <code>TypeError: wx.getMenuButtonBoundingClientRect is not a function</code></p>
<p>问题分析:这个 api是 更高版本版本支持的，你的用户有的客户端基础库版本 小于这个基础库。你在小程序后台设置下 最低基础库2.1.0.那样用户客户端基础库版本低于此就会提示升级</p>
<p>解决:<img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%8A%A5%E9%94%991%E5%9B%BE%E4%BE%8B.png" alt="报错1图例"></p>
</blockquote>
<h3 id="Ⅳ-警告-无效的page-json"><a href="#Ⅳ-警告-无效的page-json" class="headerlink" title="Ⅳ-警告:无效的page.json"></a>Ⅳ-警告:<code>无效的page.json</code></h3><blockquote>
<p>这是初学者才会犯下的错误,但也记录下来</p>
<ol>
<li>问题:在page.json配置文件中与要修改导航栏颜色,却发生报错<br> <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%AD%A6%E5%91%8Apagejson%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98.png" alt="警告pagejson无效问题"></li>
<li>解决:修改相应报错配置(<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">翻阅文档</a>),虽然响应的属性值相同,但一个外层包裹window,另一个没有包裹<br><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%AD%A6%E5%91%8Apagejson%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.png" alt="警告pagejson无效问题解决.png"></li>
</ol>
</blockquote>
<h3 id="Ⅴ-报错-typeError-Cannot-read-property-39-mark-39-of-undefined"><a href="#Ⅴ-报错-typeError-Cannot-read-property-39-mark-39-of-undefined" class="headerlink" title="Ⅴ-报错:typeError: Cannot read property &#39;mark&#39; of undefined"></a>Ⅴ-报错:<code>typeError: Cannot read property &#39;mark&#39; of undefined</code></h3><blockquote>
<ol>
<li>报错</li>
</ol>
<p> ​	<img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210426170705465.png" alt="image-20210426170705465"></p>
<ol start="2">
<li>解决:最终发现是小程序工具设置问题</li>
</ol>
<p> 需要勾选增强编译</p>
<p> <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210426170827112.png" alt="image-20210426170827112"></p>
</blockquote>
<h3 id="Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题"><a href="#Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题" class="headerlink" title="Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题"></a>Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题</h3><blockquote>
<ol>
<li>问题代码截图:</li>
</ol>
<p><img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210427161221380.png" alt="image-20210427161221380"></p>
<ol start="2">
<li>问题分析:</li>
</ol>
<p>众所周知,箭头函数<code>会改变this指向</code>,当我使用箭头函数后,函数中的this不再指向实例而是指向函数本身,导致data其实是找不到的发生报错</p>
<ol start="3">
<li><p>问题解决:</p>
<ol>
<li><p>不使用箭头函数:</p>
<pre class="line-numbers language-jsx"><code class="language-jsx">   <span class="token keyword">async</span> <span class="token function">onCollect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        title<span class="token punctuation">:</span>  <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'进行收藏'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>confirm<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">let</span> postCollected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>_postCollected <span class="token comment" spellcheck="true">//将当前data中(相当于之前本地缓存的postCollected)拉去下来,防止被覆盖</span>
      postCollected<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>_pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        collected<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'posts_collected'</span><span class="token punctuation">,</span> postCollected<span class="token punctuation">)</span>
      wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//此处其实已经被修改完状态,才开始提示,所以要反过来</span>
        title<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'收藏成功'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
        duration<span class="token punctuation">:</span> <span class="token number">1000</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用箭头函数,但需要保存this指向</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> con  <span class="token comment" spellcheck="true">//用来保存this指向</span>
                                                                              
  <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1. 生命周期函数中保存this指向</span>
  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          con<span class="token operator">=</span><span class="token keyword">this</span>  <span class="token comment" spellcheck="true">//用来保存this指向</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//2. 函数体写法</span>
  onCollect<span class="token punctuation">:</span><span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  箭头函数写法<span class="token punctuation">,</span>需要保存<span class="token keyword">this</span>指向
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> wx<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      title<span class="token punctuation">:</span>  <span class="token operator">!</span>con<span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'进行收藏'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>confirm<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                                                                              
    <span class="token keyword">let</span> postCollected <span class="token operator">=</span> con<span class="token punctuation">.</span>data<span class="token punctuation">.</span>_postCollected <span class="token comment" spellcheck="true">//将当前data中(相当于之前本地缓存的postCollected)拉去下来,防止被覆盖</span>
    postCollected<span class="token punctuation">[</span>con<span class="token punctuation">.</span>data<span class="token punctuation">.</span>_pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>con<span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected
    con<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      collected<span class="token punctuation">:</span> <span class="token operator">!</span>con<span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'posts_collected'</span><span class="token punctuation">,</span> postCollected<span class="token punctuation">)</span>
    wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//此处其实已经被修改完状态,才开始提示,所以要反过来</span>
      title<span class="token punctuation">:</span> con<span class="token punctuation">.</span>data<span class="token punctuation">.</span>collected <span class="token operator">?</span> <span class="token string">'收藏成功'</span> <span class="token punctuation">:</span> <span class="token string">'取消收藏'</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> <span class="token number">1000</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="Ⅶ-警告-Some-selectors-are-not-allowed-in-component-wxss-including-tag-name-selectors-ID-selectors-and-attribute-selectors"><a href="#Ⅶ-警告-Some-selectors-are-not-allowed-in-component-wxss-including-tag-name-selectors-ID-selectors-and-attribute-selectors" class="headerlink" title="Ⅶ-警告: Some selectors are not allowed in component wxss, including tag name selectors, ID selectors, and attribute selectors"></a>Ⅶ-警告: <code>Some selectors are not allowed in component wxss, including tag name selectors, ID selectors, and attribute selectors</code></h3><blockquote>
<ol>
<li>出现场景:在我将之前写好的样式模块抽出成<code>自定义组件</code>时,控制台突然出现警告</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210430101549430.png" alt="image-20210430101549430"></p>
<ol start="2">
<li>分析:我使用了<code>属性选择器</code>,而<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">官方文档在自定义组件部分</a>有要求不能使用,防止出现样式错误,</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210430101700628.png" alt="image-20210430101700628"></p>
<ol start="3">
<li>解决:将属性选择器删除即可</li>
</ol>
</blockquote>
<h3 id="Ⅷ-解决flex布局中-space-between方法的排版问题"><a href="#Ⅷ-解决flex布局中-space-between方法的排版问题" class="headerlink" title="Ⅷ-解决flex布局中 space-between方法的排版问题"></a>Ⅷ-解决flex布局中 space-between方法的排版问题</h3><blockquote>
<p>flex布局 justify-content：space-between； 解决最后一排数量不够自动向两端排列问题</p>
<ol>
<li>问题图示:</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210507095120687.png" alt="image-20210507095120687"></p>
<ol start="2">
<li>分析:flex 布局两端对齐当最后一排数量不够时，会出现以下布局情况</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210507095230974.png" alt="image-20210507095230974"></p>
<ol start="3">
<li>解决方法1:父级添加after伪类法</li>
</ol>
<p>  <img src="/2023/03/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86%E7%82%B9/image-20210507095349825.png" alt="image-20210507095349825"></p>
<p>  ps:这种解决方案只适合每列有<code>3个</code>的分布情况，如果布局每列有4个，5个,就需要解决方法2</p>
<ol start="4">
<li>解决方法2:使用grid栅格布局,此处不详解,只将解决方案指出,有需要的直接百度搜索<code>使用grid栅格布局</code>即可</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>微信小程序</tag>
        <tag>Wxss</tag>
        <tag>Wxml</tag>
      </tags>
  </entry>
  <entry>
    <title>PIC单片机——电压检测器</title>
    <url>/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/</url>
    <content><![CDATA[<h1 id="·核心原理"><a href="#·核心原理" class="headerlink" title="·核心原理"></a>·核心原理</h1><img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E6%A6%82%E8%BF%B0%E5%9B%BE.png" class title="核心原理">
<span id="more"></span>

<blockquote>
<p>　　采集最初采用一个半波采集100个数据的方法，这种方法理论上拥有最准确的精度和最稳定的效果，但是经过仿真跑表测试，单独循环AD函数将要花费442us，远超过要求的100us，删除掉AD计算电压值的这种花费时间的浮点数计算，也只能降到113us，然而这种计算是必不可少的。同时UART和LCD的实时显示都将占用不少的时间。最后全程序测试，发现在定时器设定最短的情况下，跑完一次半波采样只能进行1-3次不等的转换，这是远远无法满足要求的，更不用说实际硬件存在的不可避免的延时与误差。同时定时器中断将无法退出，间隔时长将短于定时器中断代码运行时长，意味着主循环内的任何代码都不可能运行。</p>
<p>　　所以最后使用了单周期单采样的方法，从0度开始，每次采集相对于上一次对半波产生180*0.01电角度的移相，经过100个周期就会均匀采集满半波的100个点，理论上的效果是一致的，数据更新周期将为原来的1&#x2F;100，定时器需要的间隔将变为20.2ms，这个时长对于代码周期是十分充裕的。</p>
</blockquote>
<h1 id="·硬件"><a href="#·硬件" class="headerlink" title="·硬件"></a>·硬件</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><blockquote>
<p>单片机使用的资源：<br>　　AD模块及模拟口1个<br>　　UART串口<br>　　定时器TMR1<br>　　RD引脚（普通电平口）</p>
</blockquote>
<h2 id="LCD1602"><a href="#LCD1602" class="headerlink" title="LCD1602"></a>LCD1602</h2><blockquote>
<p>　　基本原理，电平控制16<em>2个显示位（每个位5</em>7个液晶像素点）不同的字符。模块内自带HD44780U显示芯片（主控，80个地址）用于控制像素显示，以及HD44100H芯片（可扩展）用于辅助驱动。不同位地址分配不同的DRAM，地址和位数据通过2个口和8个口（ASCII码对应显示内容）输入。这两个通用性高的芯片使得编程思路变得相对方便且适用于各种单片机。</p>
</blockquote>
<h2 id="仿真电路"><a href="#仿真电路" class="headerlink" title="仿真电路"></a>仿真电路</h2><img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E4%BB%BF%E7%9C%9F%E7%94%B5%E8%B7%AF.png" class title="仿真电路">

<h1 id="·软件"><a href="#·软件" class="headerlink" title="·软件"></a>·软件</h1><h2 id="AD部分"><a href="#AD部分" class="headerlink" title="AD部分"></a>AD部分</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> AD<span class="token punctuation">;</span>
<span class="token keyword">float</span> OUT<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//AD转出来的电压值</span>

<span class="token keyword">void</span> <span class="token function">AD_CSH</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//初始化</span>
    T1CON<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    TRISA<span class="token operator">|</span><span class="token operator">=</span>0B01110000<span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//模拟接收口、参考电压口</span>
    TMR1H<span class="token operator">=</span>T1_20MS<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">;</span>
    TMR1L<span class="token operator">=</span>T1_20MS<span class="token punctuation">;</span>
    TMR1ON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">AD_SUB</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//ad操作函数，k是采样通道，本次取1</span>
    ADCON1<span class="token operator">=</span>0B10000000<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//参考电压，0、5V</span>
    ADCON0<span class="token operator">=</span>0B01000001<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//选择分频，使能AD</span>
    ADCON0<span class="token operator">=</span>ADCON0<span class="token operator">|</span><span class="token punctuation">(</span>k<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//将通道赋值在中间四位</span>
    <span class="token function">__delay_us</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//延时等电容充电</span>
    GO<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           	<span class="token comment" spellcheck="true">//开始AD转换</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>GO<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//等待转换完成</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ADRESH<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>ADRESL<span class="token punctuation">)</span><span class="token punctuation">;</span>      
            <span class="token comment" spellcheck="true">//拼接结果并输出</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="串口部分"><a href="#串口部分" class="headerlink" title="串口部分"></a>串口部分</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送数据</span>
<span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//存放收到数据</span>
<span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> idata<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//接受测试变量</span>
<span class="token keyword">void</span> <span class="token function">UART_CSH</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//初始化</span>
    OPTION_REG<span class="token operator">=</span>0B11010110<span class="token punctuation">;</span>                
    INTCON<span class="token operator">=</span>0B11000000<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断使能</span>
    RCIE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接收中断使能</span>
    SPBRG<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span>  		<span class="token comment" spellcheck="true">//8位下配置波特率因子1</span>
    RCSTA<span class="token operator">=</span>0B10010000<span class="token punctuation">;</span>
    TXSTA<span class="token operator">=</span>0B00100100<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">UART_Send</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>          
<span class="token comment" spellcheck="true">//发送字符串，输入为所发字符串</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">*</span>str<span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        TXREG<span class="token operator">=</span><span class="token operator">*</span>str<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>TRMT<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LCD上层函数"><a href="#LCD上层函数" class="headerlink" title="LCD上层函数"></a>LCD上层函数</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> LCD_E RD6     </span><span class="token comment" spellcheck="true">//读写使能</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LCD_RW RD5</span><span class="token comment" spellcheck="true">//读1/写0控制线</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LCD_RS RD4   </span><span class="token comment" spellcheck="true">//寄存器选择</span>
<span class="token macro property">#<span class="token directive keyword">define</span> COM 0       </span><span class="token comment" spellcheck="true">//0表示写命令</span>
<span class="token macro property">#<span class="token directive keyword">define</span> DATA 1      </span><span class="token comment" spellcheck="true">//1表示写数据</span>
<span class="token keyword">extern</span> <span class="token keyword">char</span> DD<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      
     <span class="token comment" spellcheck="true">//定义数组用来存放整行显示数据</span>
<span class="token keyword">void</span> <span class="token function">DISP_C</span><span class="token punctuation">(</span><span class="token keyword">char</span> line<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//显示某整行</span>
    <span class="token keyword">char</span> i<span class="token punctuation">;</span>
    <span class="token function">LCD_WRITE</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span>COM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写信号</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//遍历行写入</span>
        <span class="token function">LCD_WRITE</span><span class="token punctuation">(</span>DD<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCD_WRITE</span><span class="token punctuation">(</span><span class="token keyword">char</span> R1<span class="token punctuation">,</span><span class="token keyword">char</span> FLAG<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//写八位</span>
    <span class="token keyword">char</span> R2<span class="token punctuation">;</span>
    <span class="token function">LCD_BUSY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    R2<span class="token operator">=</span>R1<span class="token operator">&amp;</span><span class="token number">0XF0</span><span class="token punctuation">;</span>
    R2<span class="token operator">=</span>R2<span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WRITE_4</span><span class="token punctuation">(</span>R2<span class="token punctuation">,</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>
    R2<span class="token operator">=</span>R1<span class="token operator">&amp;</span><span class="token number">0X0F</span><span class="token punctuation">;</span>
    <span class="token function">LCD_WRITE_4</span><span class="token punctuation">(</span>R2<span class="token punctuation">,</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__delay_us</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="装置主逻辑"><a href="#装置主逻辑" class="headerlink" title="装置主逻辑"></a>装置主逻辑</h2><h3 id="变量和初始化"><a href="#变量和初始化" class="headerlink" title="变量和初始化"></a>变量和初始化</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TMR1_20MS 45663</span>
   <span class="token comment" spellcheck="true">//定时器时长，保证采样个数的关键</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LINE1 0b10000000</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LINE2 0b11000000</span>
<span class="token keyword">int</span> last_OUT<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//上一个电压值</span>
<span class="token keyword">int</span> last_AD<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//上一个电压值</span>
<span class="token keyword">long</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//半波电压和</span>
<span class="token keyword">int</span> data_index<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//数组索引</span>
<span class="token keyword">int</span> data_ave<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//半波平均值</span>
<span class="token keyword">int</span> data_val<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//半波有效值</span>
<span class="token keyword">int</span> dataSave<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//是否存储数据（正半周）,0不存  </span>
<span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//发送串口的字符串暂存</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    idata<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">UART_CSH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//各个模块初始化</span>
    <span class="token function">AD_CSH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCD_CSH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TMR1IE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//定时器使能</span>
    TMR1ON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定时器中断采样"><a href="#定时器中断采样" class="headerlink" title="定时器中断采样"></a>定时器中断采样</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">__interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">INT_SER</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>TMR1IF<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        TMR1IF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        TMR1H<span class="token operator">=</span>TMR1_20MS<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">;</span>
        TMR1L<span class="token operator">=</span>TMR1_20MS<span class="token punctuation">;</span>
        last_AD<span class="token operator">=</span>AD<span class="token punctuation">;</span>
        last_OUT<span class="token operator">=</span>OUT<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//存放上一个OUT</span>
        AD<span class="token operator">=</span><span class="token function">AD_SUB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//AD采样操作</span>
        OUT<span class="token operator">=</span>AD<span class="token operator">*</span><span class="token number">5000.0</span><span class="token operator">/</span><span class="token number">1023.0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0到+5参考电压下的电压（mV）</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> last_AD<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> AD<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token comment" spellcheck="true">//负到正过零点，进入正半周</span>
            dataSave<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//开始收集数据</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>last_AD<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> AD<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//正到负过零点，不存数据</span>
            dataSave<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">ClearData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正半周结束进行数据处理</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dataSave<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> AD<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//只有正半周存储数据</span>
            sum<span class="token operator">+</span><span class="token operator">=</span>OUT<span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//求和的方式存数据不占据内存</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data_val<span class="token operator">&lt;</span>OUT<span class="token punctuation">)</span> 	<span class="token comment" spellcheck="true">//找到最大值，用于算有效值</span>
                data_val<span class="token operator">=</span>OUT<span class="token punctuation">;</span>
            data_index<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//记录采样点个数</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ClearData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  		<span class="token comment" spellcheck="true">//正半周数据每100次处理一次，获得平均值和有效值，并且发送串口</span>
    data_ave<span class="token operator">=</span>sum<span class="token operator">/</span>data_index<span class="token punctuation">;</span>             	<span class="token comment" spellcheck="true">//求平均值</span>
    data_val<span class="token operator">=</span>data_val<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      		<span class="token comment" spellcheck="true">//求有效值</span>
    <span class="token function">UART_Send</span><span class="token punctuation">(</span><span class="token function">BCD</span><span class="token punctuation">(</span>data_index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    			<span class="token comment" spellcheck="true">//BCD转换 采样点数 生成字符串并发送</span>
    <span class="token function">UART_Send</span><span class="token punctuation">(</span><span class="token function">BCD</span><span class="token punctuation">(</span>data_ave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       		<span class="token comment" spellcheck="true">//BCD转换 平均值 生成字符串并发送</span>
    <span class="token function">LCD_SHOW</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">BCD</span><span class="token punctuation">(</span>data_ave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            	<span class="token comment" spellcheck="true">//屏幕显示第一行</span>
    <span class="token function">UART_Send</span><span class="token punctuation">(</span><span class="token function">BCD</span><span class="token punctuation">(</span>data_val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//BCD转换 有效值 生成字符串并发送</span>
    <span class="token function">LCD_SHOW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">BCD</span><span class="token punctuation">(</span>data_val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            	<span class="token comment" spellcheck="true">//屏幕显示第二行</span>
    TXREG<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span>           		<span class="token comment" spellcheck="true">//ENTER</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>TRMT<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data_index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    		<span class="token comment" spellcheck="true">//发送一次三数归零</span>
    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    data_val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="LCD显示"><a href="#LCD显示" class="headerlink" title="LCD显示"></a>LCD显示</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_SHOW</span><span class="token punctuation">(</span><span class="token keyword">int</span> line<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> show<span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment" spellcheck="true">//LCD显示，输入为行号（0或1）、内容的字符串</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//格式：  AVE=x.xxxV</span>
        <span class="token function">BCD</span><span class="token punctuation">(</span>data_ave<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'V'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'E'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'='</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        show<span class="token operator">++</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        show<span class="token operator">++</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        show<span class="token operator">++</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'V'</span><span class="token punctuation">;</span>
        <span class="token function">DISP_C</span><span class="token punctuation">(</span>LINE1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//格式：  VAL=x.xxxV</span>
        <span class="token function">BCD</span><span class="token punctuation">(</span>data_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'V'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'='</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        show<span class="token operator">++</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        show<span class="token operator">++</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        show<span class="token operator">++</span><span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">*</span>show<span class="token punctuation">;</span>
        DD<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'V'</span><span class="token punctuation">;</span>
        <span class="token function">DISP_C</span><span class="token punctuation">(</span>LINE2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="·结果"><a href="#·结果" class="headerlink" title="·结果"></a>·结果</h1><h2 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h2><img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E4%BB%BF%E7%9C%9F%E7%BB%93%E6%9E%9C1.png" class title="仿真结果1">
<img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E4%BB%BF%E7%9C%9F%E7%BB%93%E6%9E%9C2.png" class title="仿真结果2">
<h2 id="实物"><a href="#实物" class="headerlink" title="实物"></a>实物</h2><img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E5%AE%9E%E7%89%A9%E7%BB%93%E6%9E%9C1.jpg" class title="实物结果1">
<img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E5%AE%9E%E7%89%A9%E7%BB%93%E6%9E%9C2.png" class title="实物结果2">
<img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%9C.png" class title="数据结果">
<h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><blockquote>
<p>　　在本套装置使用过程中，发现PC端可以利用串口实现数据接收，便可以利用该优势，对数据进行实时可视化显示和存储，在实际过程中对电压的检测势必也需要使用者对数据有直观的接收，以便对情况高效作出判断，存储数据也利于对历史情况进行分析。于是基于python，在电脑端通过Pyqt5实现能够数据可视化的串口接收程序，利用强大的组件我设计了一个可方便使用的界面，按钮组件实现数据保存，折线图动态更新，使用自己编写的图表模块实现折线图显示。采样点、平均值、有效值也能清晰地显示在界面当中。</p>
</blockquote>
<img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/pc%E7%AB%AF%E4%BB%A3%E7%A0%81.png" class title="pc端代码">
<img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2.png" class title="可视化界面">
<img src="/2023/03/02/PIC%E5%8D%95%E7%89%87%E6%9C%BA%E2%80%94%E2%80%94%E7%94%B5%E5%8E%8B%E6%A3%80%E6%B5%8B%E5%99%A8/pc%E6%95%B0%E6%8D%AE%E5%AD%98%E6%94%BE.png" class title="pc数据存放">

]]></content>
      <categories>
        <category>编程</category>
        <category>嵌入式</category>
        <category>项目</category>
        <category>仿真</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>单片机</tag>
        <tag>PIC</tag>
        <tag>LCD</tag>
        <tag>串口通信</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>PLC刀具库</title>
    <url>/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>通过PLC实训的刀具库，锻炼以类似单片机编程的思维解决电气控制问题</li>
</ul>
</blockquote>
<h1 id="控制要求"><a href="#控制要求" class="headerlink" title="控制要求"></a>控制要求</h1><blockquote>
<ul>
<li>按请求键P01—PO6后，控制转盘转动，到所需刀具位置后转盘停转、到位&#x2F;换刀指示灯亮，取刀具、使用完（2秒钟）放回刀具，灯灭,等待下一次请求。</li>
</ul>
<ol>
<li>程序开始运行时初始位为“3”位置(每次用刀后都回到此处)<span id="more"></span></li>
<li>刀具的取放过程中不响应外部请求信号；</li>
<li>根据请求位的位置系统自动判断并以最小距离的方向运行；</li>
<li>程序第一次运行初始位为“3”位置，用刀后以上次选用的位置为本次的初始位置(提高选做，即本文的选择)</li>
</ol>
</blockquote>
<p><img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E5%88%80%E5%85%B7%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%8C%BA.jpg" alt="刀具库实验区"> </p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote>
<ul>
<li>(1) PLC输入信号：<br>　　PO1、P02、P03、P04、P05、P06分别为1、2、3、4、5、6号刀具请求信号<br>　　DJS1   刀具库实验区计数脉冲信号</li>
<li>(2) PLC 输出信号：<br>　　DJTD  转盘运行（或停止）<br>　　QFD  刀具取（放）控制信号（“1”取刀具，“0”放刀具）</li>
</ul>
</blockquote>
<h1 id="流程图以及思路"><a href="#流程图以及思路" class="headerlink" title="流程图以及思路"></a>流程图以及思路</h1><img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class title="流程图">
<blockquote>
<p>　　当前位置和目的位置为3。进入扫描循环，先扫描6个输入按键，将目的位置变量设置为输入值（按下n按钮赋值为n）。<br>再进入差值运算，将目的值和当前值相减获取差值，根据差值判断正反转，差值在(0,3] 或 [-5,-3] 进行正转，在 (3,5] 或 (-3,0) 反转，该结论可以通过简单的穷举或者归纳得出。正反转判断伴随电机运行判断，即运动状态输出。<br>　　随即进入状态更新环节，每当触发一次传感器说明电机转动了六分之一圈，根据之前的正反转可得出新的当前值（当前值+1或者-1），同时注意1和6位置转换。<br>　　最后判断是否转到目的地，即目标值和当前值相等，电机停转，取刀信号通过定时器TOF触发2s后关闭，说明取刀完成，此间任何输入无效。一个扫描周期完成。</p>
</blockquote>
<h1 id="梯形图"><a href="#梯形图" class="headerlink" title="梯形图"></a>梯形图</h1><img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%A2%AF%E5%BD%A2%E5%9B%BE1.png" class title="1、初始化">
<blockquote>
<ul>
<li>MW5代表目标位置的数值</li>
<li>MW7代表当前位置的数值</li>
<li>程序开始将两个值都赋值为3</li>
</ul>
</blockquote>
<img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%A2%AF%E5%BD%A2%E5%9B%BE2.png" class title="2、输入扫描">
<blockquote>
<ul>
<li>输入的6个按钮分别对应1-6赋值操作，对目标变量MW5赋值，当Q0.2为1即取刀时所有输入无效</li>
</ul>
</blockquote>
<img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%A2%AF%E5%BD%A2%E5%9B%BE3.png" class title="3、差值计算、正反转判断">
<img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%A2%AF%E5%BD%A2%E5%9B%BE4.png" class title="4、运动输出">
<blockquote>
<ul>
<li>将目标值减去当前值获得差值，对差值MW10进行判断，当MW10在 (0,3] 或 [-5,-3] 进行正转，在 (3,5] 或 (-3,0) 反转，这样能够走最短路径取刀，其中正反转是相对概念根据实际情况可对调。</li>
<li>差值为0电机就不会转动。</li>
</ul>
</blockquote>
<img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%A2%AF%E5%BD%A2%E5%9B%BE5.png" class title="5、状态更新">
<blockquote>
<ul>
<li>根据正反转进入其中一行，捕获传感器上升沿说明到达下一个位置，数值根据正反转相应地将当前状态变量+1或-1，注意考虑1和6的切换，而且这与+1和-1要加互锁结构，不可同时发生</li>
</ul>
</blockquote>
<img src="/2023/03/02/PLC%E5%88%80%E5%85%B7%E5%BA%93/%E6%A2%AF%E5%BD%A2%E5%9B%BE6.png" class title="6、取刀判断">
<blockquote>
<ul>
<li>判断电机是否停止、当前值与目标值是否相等，满足条件后P_TRIG产生一个扫描周期的脉冲，TOF立即导通使得Q0.2输出，进入取刀状态，2s后将TOF到时关断，取刀结束。环节结束进入下一个扫描周期</li>
</ul>
</blockquote>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote>
<p>　　实现目标现象：初值为3，按下4转盘顺时针旋转1步（60度）停下覆盖原来3的位置，取刀指示灯亮2s后熄灭，等待下一步请求。按下6，电机继续转2步停止，重复上述操作。无论按下哪个按钮，都能按最短的方向转动到目标位置实现取刀，取刀过程按下新请求无效果。结果实现，实验成功。</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>PLC</tag>
      </tags>
  </entry>
  <entry>
    <title>C++部分知识点</title>
    <url>/2023/03/02/C-%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="记录未在例程中实现的知识点："><a href="#记录未在例程中实现的知识点：" class="headerlink" title="记录未在例程中实现的知识点："></a>记录未在例程中实现的知识点：</h1><p><strong>1、虚方法</strong>：在父类中的方法前添加virtual，如<code>virtual void eat(void);</code>  ，该方法变为虚方法，当用父类指针指向子类对象时调用子类重写（覆盖）的函数时，才会达到效果，否则父类指针会直接调用父类中未被重写的方法。析构函数都是虚方法。<br><strong>2、静态方法</strong>：static，使用	<code>类名::方法();</code>    调用比较好，而非   <code>对象名.方法();</code>   调用。<br><strong>3、抽象方法</strong>：<code>virtual void eat(void)=0;</code>		在虚方法后用 &#x3D;0 ，将其设为抽象方法，父类就不需要对该方法进行具体的实现，在子类中才会各自实现。</p>
<span id="more"></span>
<p>4、类内属性如果与外部进来的<strong>变量重名</strong>，可以用 <code>this=&gt;x</code> 来表示类的属性，没有this的则是外部的变量。<br>5、指针分配内存可以用<strong>new</strong>，如 <code>*x=new Myclass();</code> 不再使用这个内存用delete x; 的方法删除内存，然后指针指向NULL，即 x&#x3D;NULL 。<br><strong>6、命名空间</strong>，在需要的代码区域外用<code>using namespace xxx&#123;&#125;</code>  即可将这块代码设置为该命名空间，xxx自己定即可，在引用时需要在变量、函数前添加xxx::以说明该变量、函数来自该命名空间，这样可以使不同模块相同名字的东西可以同时出现在一个文件使用。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C#知识点</title>
    <url>/2023/03/02/C-%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p><strong>被class修饰的叫做类</strong></p>
<ul>
<li>Console 控制台<br>WriteLine(); ReadLine(); ReadKey();<span id="more"></span></li>
</ul>
<p><strong>三种注释</strong>：单行&#x2F;&#x2F; 多行&#x2F;* *&#x2F; 概要 &#x2F;&#x2F;&#x2F;</p>
<ul>
<li>int 整数</li>
<li>float 单精度小数（可以存储整数），在用于存储小数时需要在数字末尾加f</li>
<li>double 双精度小数</li>
<li>char 字符</li>
<li>string 字符串</li>
<li>Bool 布尔型 有True 和False 两个值</li>
<li>对数组有 变量名.Length属性，是这个数组的元素数量</li>
</ul>
<p>变量分为 <strong>值类型</strong> 和 <strong>引用类型</strong></p>
<ul>
<li>值类型即直接存储一个数值，存储于栈空间中</li>
<li>引用类型类似于指针，存在于堆空间中，如<code>int[] intA = new int[]&#123;*,*,*,*,*&#125;; int[] intB = intA;</code> 可以认为单单数组名或者数组名[] 都是一个指针变量，因此上例中intB和intA指向同一段内存空间，类似于C语言的数组名字</li>
</ul>
<p><strong>字符串变量的特点：</strong></p>
<ol>
<li>字符串是引用类型（相当于C语言 char c[]）的，变量名下只存储了一个字符串所在堆空间的地址</li>
<li>字符串是不可变的，对一个字符串的值进行修改时原值不会消失，而是重新开辟一块空间存储新值（连续存储）</li>
<li>字符串可以看作是自读的字符数组（类似C语言）</li>
</ol>
<p><strong>运算符和C语言一样：</strong></p>
<ul>
<li>占位符：在字符串里加入{<em>}，</em>为数字，指的是用后面提供的第几个参数，从0开始计算</li>
<li>转义符\：\b退格 \t制表符 \n换行符 &quot;英文双引号 @用在字符串的前面，作用：取消\在字符串内的转义作用 和 将字符串按原格式输出</li>
</ul>
<p> 隐式类型转换无感使用 显式类型转换为(目标类型名) Convert类型转换，对如string和int之间进行类型转换<br> 常量声明关键字: const 数据类型 常量名 &#x3D; 值，多用大写</p>
<p><code>if-else for&#123;;;&#125;   while do-while   switch-case-default</code>  三种结构均是条件满足则执行条件下的语句（块）<br><code>break;  continue;</code><br>关键字</p>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ul>
<li><strong>数组定义</strong>： <code>数据类型[] 变量名;</code></li>
<li><strong>数组初始化</strong>： <code>数组名 = new 数据类型[\*];</code></li>
<li><strong>声明时初始化</strong>： <code>数据类型[] 数组名 = new 数据类型[\*];</code><br>　　　　声明 初始化 赋值 <code>数据类型[] 数组名 = new 数据类型[\*] &#123;\*,\*,\*,\*,\*&#125;;</code><br>　　　　<code>数据类型[] 数组名 = new 数据类型[ ] &#123;\*,\*,\*,\*,\*&#125;;</code><br>　　　　单个赋值&#x2F;取值 <code>数组名[\*] = \*;</code></li>
</ul>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul>
<li><strong>数组定义</strong>： <code>数据类型[,] 变量名;</code></li>
<li><strong>数组初始化</strong>： <code>数组名 = new 数据类型[\*,\*]; //两个*分别是行数和列数</code></li>
<li><strong>声明时初始化</strong>： <code>数据类型[,] 数组名 = new 数据类型[\*,\*];</code><br>　　　　声明 初始化 赋值 <code>数据类型[,] 数组名 = new 数据类型[\*,\*]  &#123; &#123;\*,\*,\*,\*,\*&#125;,&#123;\*,\*,\*,\*,\*&#125;,&#125;;//两层大括号</code><br>　　　　<code>数据类型[,] 数组名 = new 数据类型[, ] &#123;\*,\*,\*,\*,\*&#125;;</code><br>　　　　单个赋值&#x2F;取值 <code>数组名[\*,\*] = \*;</code></li>
<li>对于没有进行赋值的元素系统自动给初始值（int float double 0 string NULL bool False）</li>
<li>数组元素遍历：<code> for循环（循环语句）//多维数组则可以使用嵌套实现</code><br><code>foreach(数组数据类型 临时变量 in 数组名)&#123;...&#125; //该语句效果：将数组内各个元素依次赋值给临时变量并在每赋一个值后都运行一次后面的语句块，在语句块内对临时变量进行操作即可获得或者使用每个元素</code></li>
</ul>
<h3 id="函数（方法）"><a href="#函数（方法）" class="headerlink" title="函数（方法）"></a>函数（方法）</h3><blockquote>
<p><strong>Pascal命名法</strong><br>　每个单词的首字母大写，其余字母小写，多用于给类或者函数命名<br><strong>声明</strong><br>　static 返回值类型 函数名([参数列表])<br>　形式参数与实际参数<br>　return关键字 不用括号，void函数不用return<br><strong>函数重载</strong><br>　函数名称相同而参数列表不同，调用这类函数时，会根据不同的参数，自动选择合适的函数重载形式，参数个数和类型只能有一个不同<br><strong>高级参数</strong><br>　普通参数：把调用时提供的数值赋值给被调用函数的参数（前者提供的值是实际参数，后者是形式参数，相当于一个变量）<br><strong>ref参数（引用传递）</strong><br>　在形式参数前加ref关键字：Fun(ref 变量名); static void Fun(ref 参数的数据类型 参数名){…} 可以理解为ref为取地址（？），这样就可以通过更改形参的值来改变实际参数了<br><strong>out参数</strong><br>　一个函数中需要返回多个不同的值时需要用到out参数<br>　static声明一个函数，参数列表里声明一些作为返回值使用的参数，在这些参数前面加上out关键字，在调用时在对应位置加上同类型变量，这些变量需要事先声明，在调用时，同样需要在这些变量名前加out关键字，这样可以实现被调用函数中的值（形参）回传给对应的实参，以此实现返回多个类型返回值的效果，如： </p>
</blockquote>
<pre class="line-numbers language-cs"><code class="language-cs">int a; int b; int c; //ab为提供的两个参数，c为存储运算结果的变量
add(a,b,out c); //即可将ab的和存进c
static void add(int a,int b,out int c)
{
    c = a + b;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>递归调用</strong><br>　自己调用自己</p>
</blockquote>
<h2 id="进阶部分"><a href="#进阶部分" class="headerlink" title="进阶部分"></a>进阶部分</h2><h3 id="字符串操作常用方法"><a href="#字符串操作常用方法" class="headerlink" title="字符串操作常用方法"></a>字符串操作常用方法</h3><p><strong>字母变大写&#x2F;小写</strong> 字符串名字.ToUpper();&#x2F;ToLower();<br>将字符串转换成大写形式，仅对字母有效，且不改变原变量，仅仅返回改变后的结果，需要专门保存<br>用法：<code>字符串变量.ToUpper()/ToLower;</code> 即ToUpper是字符串变量的一个方法名</p>
<p><strong>字符串比较</strong>（是否相同） 字符串名字.Equals(string);<br>用法：<code>字符串A.Equals(字符串B);</code></p>
<p><strong>字符串分割</strong> 字符串名字.Split(char[]);<br>用法：<code>字符串变量.Split(作为分隔符的字符数组);</code>，返回值是一个字符串数组（string[]），需要声明一个数组来接收这个返回值，分隔符将被丢弃分隔符可以是字符数组也可以仅仅是一个字符</p>
<p><strong>字符串截取</strong> 字符串名字.Substring();<br>用法：<code>string.Substring(开始截取的位置角标);</code><br>    <code>string.Substring(开始截取的位置角标，截取长度);</code></p>
<p><strong>字符串查找</strong> <code>字符串名字.IndexOf(string);``字符串名字.LastIndexOf(string);</code><br>查找某个字符串在整个字符串中首次&#x2F;最后一次出现的位置，缺省值-1</p>
<p><strong>判断是否包含某字符串</strong> <code>字符串名字.Contains(string);</code></p>
<p><strong>判断是否以某字符串开始&#x2F;结束</strong> <code>字符串名字.StartsWith(string);</code><br>                        <code>字符出串名字.EndsWith(string);</code></p>
<p><strong>字符串部分替换</strong> <code>字符串名字.Replace(string1,string2);</code>将字符串中的string1替换成string2</p>
<p><strong>去除字符串中前后空格</strong> <code>字符串名字.Trim();</code>返回处理后的字符串<br><strong>去掉字符串中前面的空格</strong> <code>字符串名字.TrimStart();</code><br><strong>去掉字符串中后面的空格</strong> <code>字符串名字.TrimEnd();</code></p>
<p><strong>判断字符串是否为Null或者空</strong> <code>string.IsNullOrEmpty(string); //Null不占空间而为空是占用空间的。</code><br>IsNullOrEmpty();是对string这个数据类型的方法，所以使用时应写 <code>string.IsNullOrEmpty(变量名字);</code>返回值为True表示为空或为Null</p>
<p><strong>StringBuilder</strong>：字符串构建器，是一个类，该类型的变量是引用类型，它相当于一个字符串变量，在运行中一直操作同一块空间，执行效率也高于string类型的字符串变量。依赖System.Text命名空间，程序开头应有<code>using System.Text</code></p>
<ul>
<li>使用：</li>
</ul>
<ol>
<li>创建StringBuilder类型变量<br><code>StringBuilder sb = new StringBuilder();</code></li>
<li>追加数据<br><code>sb.Append();</code> 追加数据<br>这个方法有很多重载方法，所以可以提供各种类型的参数进行追加<br><code>sb.ToString();</code> 转化为string字符串<br><code>Console.WriteLine(sb.ToString());</code> 打印出来</li>
<li>清空数据<br><code>sb.Clear();</code></li>
</ol>
<p><strong>StringBuilder效率测试（Stopwatch类的使用）</strong></p>
<ol>
<li>Stopwatch类<br>Stopwatch，秒表计时器，用来记录程序运行的时间，依赖System.Diagnostics命名空间</li>
<li>创建Stopwatch类型对象</li>
</ol>
<pre class="line-numbers language-cs"><code class="language-cs">Stopwatch sw = new Stopwatch();
sw.Start(); //计时器开始
sw.Stop(); //计时器结束
sw.Elapsed; //开始到结束之间的时长，注意这是一个属性，在进行过开始和结束后通过这个获取计时的时长
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>在计时器开始和结束之间分别进行一次对string和StringBuilder类的数据追加操作，然后输出sw.Elapsed</li>
</ol>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><ul>
<li>枚举类型的定义：</li>
</ul>
<ol>
<li>定义在namespace内，对该namespace下的所有程序有效，用于在团队协作中对同一类事物的各个成员事先规定统一的称呼，各个值之间用 , 隔开</li>
<li>语法：</li>
</ol>
<pre class="line-numbers language-cs"><code class="language-cs">public enum 枚举名
{
    值1,
    值2,
    值N
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>例子：以一周七天的称呼为例</li>
</ol>
<pre class="line-numbers language-cs"><code class="language-cs">namespace First_C_Sharp
{
    public enum week
    {
        周一,
        周二,
        周三,
        周四,
        周五,
        周六,
        周末
    }
    internal class Program
    {
        static void Main()
        {
            week wk = week.周一;
            Console.WriteLine(wk);
            Console.ReadKey();
            return;
        }
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><ul>
<li>struct，是一种值类型，用于封装一些小型变量数据</li>
<li>Unity3D 中提供的一些结构体类型数据：Vector3（三维向量），Color（颜色），Quaternion（四元数），Ray（射线）等等</li>
<li>声明：声明在namespace下</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">public struct 结构体名称
{
    public 数据类型 变量名;
    public 数据类型 变量名;
    public 数据类型 变量名;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>结构体变量的创建</strong>：<br><code>结构体类型 结构体变量名 = new 结构体类型();</code><br><strong>数据的使用或者赋值</strong>：<br><code>结构体变量名.成员变量名（在结构体声明里的变量名）</code></p>
<ul>
<li>可以声明结构体类型数组变量！</li>
</ul>
<h3 id="面向对象基础与类"><a href="#面向对象基础与类" class="headerlink" title="面向对象基础与类"></a>面向对象基础与类</h3><p>类、对象、字段、对象使用方法<br><strong>1、类</strong></p>
<ul>
<li>具有相同特征的事物归为一类</li>
<li>语法：</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">[访问修饰符] class 类名 //[访问修饰符]可有可无，非必要，有默认值
{
    类的描述信息 //描述这类事物的特征（字段、属性、方法）
    public int intA; //相当于对象的“属性”
    public string name; //这里定义的就是两个“字段”
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>eg：创建一个Apple类</li>
<li>解决方案上右击–添加–类–命名</li>
</ul>
<p><strong>2、对象</strong></p>
<ul>
<li>一个具体的个体就是一个对象，在程序中通过实例化出来的就是对象</li>
<li>语法：<code>类名 对象名 = new 类名();</code><br>　　　<code>Apple a1 = new Apple();</code> new可以理解为实例化</li>
<li>类 和 对象 的关系 类似结构体</li>
<li>对象 是 类 的一个实例</li>
</ul>
<p><strong>3、字段</strong></p>
<ul>
<li>字段 是变量在 面向对象的 类 中的称呼，作用和变量是一样的</li>
<li>语法：<code>public 数据类型 字段名</code></li>
</ul>
<h3 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h3><p><strong>1、访问修饰符</strong></p>
<blockquote>
<p><em>public</em>  公开的，可以通过对象名.字段名 进行访问<br><em>private</em>  私有的，不能通过对象名.字段名 进行访问</p>
</blockquote>
<p><strong>2、属性及其语法 保护字段的手段</strong></p>
<ul>
<li>将需要进行操作合法性校验的字段设置为private，同时在class声明的语句块内写：</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">public 数据类型 属性名（一般可以命名为字段名的首字母大写的形式）
{
    get{return intA;} //通过对象名.属性名读取intA
    set{intA = value;} //通过对对象名.属性名赋值实现对intA的间接赋值，value是调用函数提供的参数（也就是想要给intA赋予的值）
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>get{…}和set{…}实质上是两个方法，分别在读取 对象名.属性名 时和对 对象名.属性名 赋值时被调用，这样我们就可以通过在这个方法内进行一些操作最终把我们要保护的字段的值反馈给上层调用函数或者把上层调用函数提供的参数赋值给我们要保护的字段</li>
</ul>
<p><strong>3、命名空间 namespace</strong></p>
<ul>
<li>对代码文件进行分类管理</li>
<li>语法：定义命名空间：</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">namespace 空间名称
{
    类
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>引用命名空间<br><code>using 空间名称</code></li>
</ul>
<h3 id="面向对象基础-三种方法"><a href="#面向对象基础-三种方法" class="headerlink" title="面向对象基础 三种方法"></a>面向对象基础 三种方法</h3><p><strong>1、普通方法</strong></p>
<ul>
<li>就是普通函数，可以在类内声明一些方法，然后使用实例化对象的这些方法进行调用而实现一些功能,例如系统提供的 Console.WriteLine(); 其中WriteLine就是对象Console的一个方法</li>
<li>语法：</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">访问修饰符 返回值 方法名(参数列表)
{
    方法的具体功能代码;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这些方法可以直接对类的private字段进行访问</li>
</ul>
<p><strong>2、构造方法</strong></p>
<ul>
<li>具有“构造”功能&#x2F;作用的方法，对实例化出来的对象进行初始化</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">public 类名(对应需要初始化的字段的名称的参数表) //必须用public，不能用private，没有返回值，不能写void，名称和类名一致，可以有重载方法，写在类的声明语句块里
{
    构造函数代码
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>this关键字，代表当前类的对象，当参数表里的参数名和类里对应字段重名时可以使用this.字段名指代要被赋值的字段，而形式参数则直接用参数名指代</li>
<li>使用 <code>类名 对象名 = new 类名();</code> 时，默认自动调用类里的构造函数，所以括号内要提供参数。如果声明类中不写构造方法，在编译时系统会自动为类添加一个空构造方法，写了构造方法则系统不再自动添加，通常会保留一种空参数的构造方法用于实例化空对象</li>
</ul>
<p><strong>3、析构方法</strong></p>
<ul>
<li>用于清理一个对象</li>
<li>语法： 不带参数表不带返回值，也没有访问修饰符，由系统自动调用，可以不写</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">~类名()
{
    析构方法代码体;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="面向对象基础-堆栈关系"><a href="#面向对象基础-堆栈关系" class="headerlink" title="面向对象基础 堆栈关系"></a>面向对象基础 堆栈关系</h3><p><strong>1、对象的赋值（对象间的赋值）</strong></p>
<ul>
<li>对象的赋值也是引用类型<br><code>类名 对象1名 = new 类名();</code><br><code>类名 对象2名 = 对象1名;</code></li>
<li>结果对对象2进行修改相当于对对象1进行修改</li>
</ul>
<p><strong>2、new关键字的作用</strong></p>
<ul>
<li>在内存（堆空间）中开辟了一块空间</li>
<li>在开辟出来的这个空间中创建对象数据</li>
<li>调用对象的构造方法进行对象的初始化</li>
</ul>
<p><strong>3、面向对象编程</strong>：游戏里的一些事物都是对象，这些对象具备一些属性（字段）和能力（方法），提前做好规划（定义字段和定义普通方法），可以直接调用以修改其属性和使用其能力<br><strong>总结</strong>：类和结构体类似，只是结构体仅存储一些数据，而类里还可以添加一些方法进行调用，结构体是值类型，类是引用类型</p>
<h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><p><strong>1、什么是继承</strong></p>
<ul>
<li>面向对象开发有三大特性&#x2F;特征&#x2F;特点：**<em>封装、继承、多态</em>**</li>
<li>将一堆类中的一些共有成员单独抽取出来作为父类，然后这一堆类继承这个父类，共享父类资源，这就叫做继承</li>
</ul>
<p><strong>2、好处</strong></p>
<ul>
<li>优化结构，使类与类之间产生关系，提高代码复用性，便于阅读，为多态提供前提</li>
</ul>
<p><strong>3、语法</strong></p>
<ul>
<li>如游戏开发中把玩家操作的角色定义为“英雄”并且抽象出一个Hero类，然后可供选择的英雄类继承这个Hero类，再细分编写各个英雄类（独有信息用字段表示并使用属性进行封装，技能信息使用普通方法封装等），而公共的信息如名字、称号、背景信息、基础属性等在父类中进行定义</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">class 子类:父类
{
    //类成员
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>4、类视图</strong></p>
<ul>
<li>在当前项目上右键–视图–查看类图<br>　可以看到类的继承关系图，以及类中的成员概况。可以多加留意字段、属性、方法和各自特有的图标</li>
</ul>
<h3 id="继承之构造方法"><a href="#继承之构造方法" class="headerlink" title="继承之构造方法"></a>继承之构造方法</h3><p>　　在父类中构建了构造方法以后，在子类中的构造方法的括号之后可以加上:<code>base()</code>，并把构造方法中需要传递给父类的数据（形参名）依次写入括号，这相当于使用base()对父类的构造方法进行访问。只要在访问父类构造函数时传参顺序正确即可，子类构造方法里的参数表顺序并非必须和父类一致<br>　　也可以在语句块内用 <code>base.属性名/字段名（如果未被保护）</code>对父类的字段进行赋值。</p>
<h3 id="继承之成员继承"><a href="#继承之成员继承" class="headerlink" title="继承之成员继承"></a>继承之成员继承</h3><p><strong>1、继承的效果</strong><br>子类中可以访问到父类中定义的成员（字段、属性、方法），这个访问是有范围的</p>
<p><strong>2、字段</strong><br>由于大多数情况下字段都会使用private修饰，在子类中无法访问。使用public修饰的字段可以在子类中通过base.字段名进行访问</p>
<p><strong>3、属性</strong><br>大多数属性常用public修饰，可以通过base.属性名进行访问</p>
<p><strong>4、普通方法</strong><br>public修饰的可以通过base.方法名进行访问使用</p>
<p><strong>5、构造方法</strong></p>
<ul>
<li>绝大多数情况下使用public修饰，这种情况下可以使用base() 的形式进行访问</li>
<li>子类并没有真正继承父类的构造方法</li>
<li>另外，对子类实例化的对象也可以通过对象名.字段&#x2F;属性&#x2F;方法() 的方式使用父类的成员</li>
<li>子类实例化的对象所占用的空间内包含了一个父类的实例化，这就是继承的实质</li>
</ul>
<p><strong>6、连续的继承关系</strong><br>最下级的子类的实例也可以通过 对象名.成员名 来使用父类甚至更上层的父类的成员</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>在继承关系的前提下，不同子类实例化的对象调用父类中相同的方法而实现不同的功能，这就叫做多态</p>
<p><strong>1、虚方法</strong></p>
<ul>
<li>在父类中使用virtual关键字修饰的方法，就是虚方法，在子类中使用override关键字对该虚方法进行重写</li>
<li>语法：</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">父类 子类
public virtual 返回值类型 方法名() public override 返回值类型 方法名()
{ {
    方法的代码体; 方法的代码体;
} }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>理解：在继承中的函数重载<br>在实际使用中可以在父类的虚方法中实现一些共有功能，如初始化等工作，然后在子类中重写的方法中调用一次父类的虚方法（使用base.方法名()进行调用），重写并非必须进行的，如果没有重写那么通过对象名.方法名进行操作会直接调用父类的方法</li>
</ul>
<p><strong>面向对象编程的六大原则</strong><br>①单一职责原则；②开闭原则；③里氏转换原则；④依赖倒置原则；⑤接口隔离原则；⑥迪米特原则</p>
<ul>
<li><p>里氏转换原则：<br>①子类可以直接赋值给父类变量；<br><code>父类名 变量名 = new 子类();</code>使用此语句后，通过 变量名.方法名(); 可以实现子类对象.方法名(); 的功能。如果该方法被virtual修饰并在子类中进行了重写，执行后也会把子类中的代码实现<br>②子类对象可以调用父类中的成员，但是父类对象永远只能调用自己的成员；<br>③如果父类对象中装的是子类对象，可以将这个父类对象强转为子类对象<br>如①中，可以new一个子类对象，并把(子类名)父类对象名赋值给新建的子类对象，这样新的子类对象就是一个已经初始化完成的子类。</p>
</li>
<li><p>用于对象间强制转换的关键字is和as<br>is：转换成功返回True，否则返回False，写法：父类对象 is 子类名 将会对父类对象是否可以转换为子类对象进行判定<br>as：同上，可以转换返回转换结果，不可以转换则返回NULL</p>
</li>
</ul>
<p><strong>2、抽象类</strong></p>
<ul>
<li>虚方法-&gt;抽象方法</li>
<li>当父类中的虚方法虚到完全无法确定方法体的时候，就可以使用抽象方法的形式来表现</li>
<li>abstract放在返回值类型前修饰方法，且该方法没有方法体，即<code>abstract 返回值类型 方法名();</code></li>
<li>抽象类：在定义类的关键字class前加abstract，定义子类继承抽象类，并使用override继承抽象方法。父类中定义的抽象方法必须在子类内实现<br>①抽象类中可以没有抽象方法，但是抽象方法必须用在抽象类中<br>②抽象类不能实例化，因为其中可能包含无意义的抽象方法</li>
<li>使用场景：<br>父类的方法不知道如何实现或者父类不需要有默认实现且父类不需要实例化，使用抽象方法<br>父类需要实例化，使用虚方法</li>
</ul>
<p><strong>3、多态之接口语法</strong></p>
<ul>
<li>语法：<code>抽象类-&gt;接口</code></li>
<li>当抽象类中所有的方法都是抽象方法的时候，就可以把这个抽象类用另一种形式来表现，这种形式叫接口</li>
<li>使用interface关键字定义接口，没有class关键字，接口一般采用“IXxxx”这种方式进行接口的命名，在一堆脚本中通过名字判断，I开头的都是接口</li>
<li>接口中不能包含字段，但是可以包含属性</li>
<li>详情：C#中有常规属性（get set）和自动属性。当属性的get和set只是完成字段的取值和赋值操作，而没有任何附加的逻辑代码时，可以使用自动属性，如public int Age { get; set; } 写好后C#编译器会为自动属性添加对应的字段。接口中只能使用这种自动属性，子类中则需要像重写方法一样在自己内部重写属性和对应的字段</li>
<li>接口定义的方法不能有方法体，全是抽象方法，但是这些抽象方法不需要用abstract修饰</li>
<li>接口的成员不允许添加访问修饰符，默认都是public</li>
<li>一个类可以继承多个接口，在各个接口之间用 , 隔开即可</li>
<li>接口也可以继承多个接口</li>
<li>接口存在的作用是在需要添加一些具有特殊功能的实例时可以通过类对接口的继承来添加更多成员和实现</li>
</ul>
<h3 id="五种访问控制符"><a href="#五种访问控制符" class="headerlink" title="五种访问控制符"></a>五种访问控制符</h3><blockquote>
<p><em>public</em> 公开访问，继承其所在类的子类都可以直接访问到<br><em>private</em> 私有访问，仅仅能在本体内部进行访问，子类不能访问到<br><em>protected</em> 受保护的访问权限，能在当前类和子类中进行访问，不能在实例对象中访问到<br><em>internal</em> 内部访问，只能在程序集（项目）中访问，在同一个项目中internal和public效果一样。项目：解决方案的内一级，每项是一个项目<br><em>protected internal</em> 内部保护访问权限<br>修饰类的访问控制符：public 和 internal，后者是默认值<br>修饰类成员的访问修饰符：五种都可以</p>
</blockquote>
<h3 id="静态成员关键字static"><a href="#静态成员关键字static" class="headerlink" title="静态成员关键字static"></a>静态成员关键字static</h3><p><strong>1、关键字</strong><br>static 静态，由 static 修饰的是静态**，静态成员先于类本身的存在而存在，且需要用类名.成员名进行调用，static关键字写在访问修饰符之后<br><strong>2、静态字段</strong></p>
<ul>
<li>要通过类名.静态字段的方式进行访问，不能使用对象名.字段名的方式进行访问，例如 <code>对象名.字段名</code>，可以直接指代在定义时赋给的值，也就是直接调用在声明类时为字段定义的值。静态字段只会在内存中存储一份</li>
<li>静态字段重新赋值的方式：<code>在类声明之外进行类名.字段名 = 新的值;</code></li>
</ul>
<p><strong>3、静态属性</strong></p>
<ul>
<li>用于对被static修饰的字段进行封装，并保证静态字段的合法性。静态属性通过 类名.静态属性名 进行访问</li>
<li>静态属性不能用于封装非静态字段，因为静态的类成员先于类存在于内存中</li>
</ul>
<p><strong>4、静态普通方法</strong><br>静态方法中不能调用非静态方法（存在顺序）</p>
<p><strong>5、静态构造方法</strong><br>用于初始化静态成员，一个类中仅一个静态构造方法，可以在静态类和非静态类中声明。静态构造方法在引用任何类成员时，或者创建第一个实例时在其之前执行完成类中静态成员的初始化</p>
<p><strong>6、静态类</strong></p>
<ul>
<li>所有成员都是静态成员时可以把类声明为静态类</li>
<li>静态类不能实例化对象</li>
</ul>
<h3 id="静态之设计模式"><a href="#静态之设计模式" class="headerlink" title="静态之设计模式"></a>静态之设计模式</h3><p><strong>1、设计模式</strong><br>针对某些问题总结的经验、解决方案。前人已经总结过很多设计模式，如《GoF23种设计模式》</p>
<p><strong>2、单例设计模式</strong></p>
<ul>
<li>设计一个类的时候，需要保证程序运行期间仅仅存在一个实例对象</li>
<li>用于非静态类中，在静态类中使用无意义</li>
<li>步骤：<br>①声明一个静态私有的当前类的类型的字段<br><code>private static ClassName instance;</code><br>②创建私有无参构造方法，保证外部无法实例化这个类<br><code>private ClassName() &#123; &#125;</code><br>③创建一个静态方法，用于创建此类的唯一对象</li>
</ul>
<pre class="line-numbers language-cs"><code class="language-cs">public static ClassName Instance()
{
    if(instance == null)
    {
        instance = new ClassName();
    }
    return instance;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>需要使用这个对象时，在需要的地方写：<br><code>对象名 = ClassName.Instance();</code></p>
</li>
<li><p><strong>嵌套类</strong>：在一个类定义的内部再定义一个类，具备形式上嵌套的关系（通过外层类名.内层类名.成员名()进行访问，但是内层类仍具备完整的类的功能和地位<br><strong>匿名类</strong>：<code>var 对象名 = new&#123; Name = &quot;...&quot; , Age = 100 &#125;;</code> 用于存储一组只读属性<br><strong>密封类</strong>：由sealed关键字修饰过的类不可以被继承，也就是说不能有子类，这样的类称之为密封类<br><strong>Object类</strong>：在C#中，Object类是所有类的父类，无论是C#自带类还是用户创建的类，都直接或间接地继承这个类</p>
</li>
<li><p>另外，object是类型，两者差不多，使用小写即可</p>
</li>
<li><p>C#中有一个内置的Object类，其中有一个ToString方法，直接使用对象调用这个方法会返回对应类所在命名空间和类名，为了辅助进行开发，通常在自己的类中重写ToString方法</p>
</li>
<li><p>需要在非WriteLine中使用占位符时，写<code>string.Format();</code> 其中括号像WriteLine里一样写即可</p>
</li>
</ul>
<h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p><strong>装箱</strong>：值类型转换成引用类型<br><strong>拆箱</strong>：引用类型转换成值类型<br>　在两者之间存在继承关系的时候，才可能出现装箱与拆箱操作</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
</search>
